<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://www.stitcher.io/rss</id>
    <link href="https://www.stitcher.io/rss"/>
    <title><![CDATA[ stitcher.io ]]></title>
    <updated>2021-03-09T05:53:42+00:00</updated>
                        <entry>
                <title><![CDATA[ PHP Enums ]]></title>

                <link rel="alternate" href="https://stitcher.io/blog/php-enums"/>

                <id>https://www.stitcher.io/blog/php-enums</id>

                <author>
                    <name><![CDATA[ Brent Roose ]]></name>
                </author>

                <summary type="html"><![CDATA[ <p>They are finally coming — built-in support for enums will be added in <a href="/blog/new-in-php-81">PHP 8.1</a>! Some might consider them long overdue, but you don't hear me complain; I'm glad they made it! This post is dedicated to looking at the newly added feature in-depth. If you want to stay up to date about these kinds of changes and new features in PHP, make sure to <a target="_blank" href="/newsletter/subscribe">subscribe to my newsletter</a>.</p>
<p><div class="sidenote">
    <p>
        Tired of managing servers?
        Check out <a href="https://gumroad.com/a/575280243" ping="https://analytics.stitcher.io/r" target="_blank" rel="noopener noreferrer">Serverless Visually Explained</a> by Matthieu Napoli and learn how to create scalable PHP applications on AWS.
    </p>
</div>
</p>
<p>As usual with my PHP feature posts, we start with a high level overview of what enums look like:</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-highlight  keyword">enum</span> <span class="hljs-highlight  type">Status</span>
{
    <span class="hljs-keyword">case</span> <span class="hljs-highlight  prop">DRAFT</span>;
    <span class="hljs-keyword">case</span> <span class="hljs-highlight  prop">PUBLISHED</span>;
    <span class="hljs-keyword">case</span> <span class="hljs-highlight  prop">ARCHIVED</span>;
}</code></pre>
<p>The benefit of enums is that they represent a collection of constant values, but most importantly those values can be typed, like so:</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BlogPost</span>
</span>{
    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span><span class="hljs-params">(
        <span class="hljs-highlight  keyword">public</span> <span class="hljs-highlight  type">Status</span> <span class="hljs-highlight  prop">$status</span>, 
    )</span> </span>{}
}</code></pre>
<p>In this example, creating an enum and passing it to a <code><span class="hljs-highlight  type">BlogPost</span></code> looks like this:</p>
<pre><code class="language-php hljs php" data-lang="php">$post = <span class="hljs-keyword">new</span> <span class="hljs-highlight  type">BlogPost</span>(<span class="hljs-highlight  type">Status</span>::<span class="hljs-highlight  prop">DRAFT</span>);</code></pre>
<p>That's the basics out of the way, as you can see there's nothing complex at all about them. There are lots of side notes to be made though, let's look at enums in depth!</p>
<h3 id="enum-methods"><a href="#enum-methods" class="heading-anchor">#</a> Enum methods</h3>
<p>Enums can define methods, just like classes. This is a very powerful feature, especially in combination with the <code><span class="hljs-highlight  keyword">match</span></code> operator:</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-highlight  keyword">enum</span> <span class="hljs-highlight  type">Status</span>
{
    <span class="hljs-keyword">case</span> <span class="hljs-highlight  prop">DRAFT</span>;
    <span class="hljs-keyword">case</span> <span class="hljs-highlight  prop">PUBLISHED</span>;
    <span class="hljs-keyword">case</span> <span class="hljs-highlight  prop">ARCHIVED</span>;
    
    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">color</span><span class="hljs-params">()</span>: <span class="hljs-title">string</span>
    </span>{
        <span class="hljs-keyword">return</span> <span class="hljs-highlight  keyword">match</span>(<span class="hljs-keyword">$this</span>) 
        {
            <span class="hljs-highlight  type">Status</span>::<span class="hljs-highlight  prop">DRAFT</span> =&gt; <span class="hljs-string">'grey'</span>,   
            <span class="hljs-highlight  type">Status</span>::<span class="hljs-highlight  prop">PUBLISHED</span> =&gt; <span class="hljs-string">'green'</span>,   
            <span class="hljs-highlight  type">Status</span>::<span class="hljs-highlight  prop">ARCHIVED</span> =&gt; <span class="hljs-string">'red'</span>,   
        };
    }
}</code></pre>
<p>Methods can used like so:</p>
<pre><code class="language-php hljs php" data-lang="php">$status = <span class="hljs-highlight  type">Status</span>::<span class="hljs-highlight  prop">ARCHIVED</span>;

$status-&gt;<span class="hljs-highlight  prop">color</span>(); <span class="hljs-comment">// 'red'</span></code></pre>
<p>Static methods are allowed as well:</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-highlight  keyword">enum</span> <span class="hljs-highlight  type">Status</span>
{
    <span class="hljs-comment">// …</span>
    
    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">make</span><span class="hljs-params">()</span>: <span class="hljs-title">Status</span>
    </span>{
        <span class="hljs-comment">// …</span>
    }
}</code></pre>
<p>And you can also use <code><span class="hljs-highlight  keyword">self</span></code> within an enum:</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-highlight  keyword">enum</span> <span class="hljs-highlight  type">Status</span>
{
    <span class="hljs-comment">// …</span>
    
    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">color</span><span class="hljs-params">()</span>: <span class="hljs-title">string</span>
    </span>{
        <span class="hljs-keyword">return</span> <span class="hljs-highlight  keyword">match</span>(<span class="hljs-keyword">$this</span>) 
        {
            <span class="hljs-highlight  keyword"><span class="hljs-keyword">self</span></span>::<span class="hljs-highlight  prop">DRAFT</span> =&gt; <span class="hljs-string">'grey'</span>,   
            <span class="hljs-highlight  keyword"><span class="hljs-keyword">self</span></span>::<span class="hljs-highlight  prop">PUBLISHED</span> =&gt; <span class="hljs-string">'green'</span>,   
            <span class="hljs-highlight  keyword"><span class="hljs-keyword">self</span></span>::<span class="hljs-highlight  prop">ARCHIVED</span> =&gt; <span class="hljs-string">'red'</span>,   
        };
    }
}</code></pre>
<h3 id="enum-interfaces"><a href="#enum-interfaces" class="heading-anchor">#</a> Enum interfaces</h3>
<p>Enums can implement interfaces, just like normal classes:</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">HasColor</span>
</span>{
    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">color</span><span class="hljs-params">()</span>: <span class="hljs-title">string</span></span>;
}</code></pre>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-highlight  keyword">enum</span> <span class="hljs-highlight  type">Status</span> <span class="hljs-highlight  keyword">implements</span> <span class="hljs-highlight  type">HasColor</span>
{
    <span class="hljs-keyword">case</span> <span class="hljs-highlight  prop">DRAFT</span>;
    <span class="hljs-keyword">case</span> <span class="hljs-highlight  prop">PUBLISHED</span>;
    <span class="hljs-keyword">case</span> <span class="hljs-highlight  prop">ARCHIVED</span>;
    
    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">color</span><span class="hljs-params">()</span>: <span class="hljs-title">string</span> </span>{ <span class="hljs-comment">/* … */</span> }
}</code></pre>
<h3 id="enum-values-—-aka-&quot;backed-enums&quot;"><a href="#enum-values-—-aka-"backed-enums"" class="heading-anchor">#</a> Enum values — aka "Backed enums"</h3>
<p>Enum values are represented by objects internally, but you can assign a value to them if you want to; this is useful for eg. serializing them into a database.</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-highlight  keyword">enum</span> <span class="hljs-highlight  type">Status</span>: <span class="hljs-highlight  type">string</span>
{
    <span class="hljs-keyword">case</span> <span class="hljs-highlight  prop">DRAFT</span> = <span class="hljs-string">'draft'</span>;
    <span class="hljs-keyword">case</span> <span class="hljs-highlight  prop">PUBLISHED</span> = <span class="hljs-string">'published'</span>;
    <span class="hljs-keyword">case</span> <span class="hljs-highlight  prop">ARCHIVED</span> = <span class="hljs-string">'archived'</span>;
}</code></pre>
<p>Note the type declaration in the enum definition. It indicates that all enum values are of a given type. You could also make it an <code><span class="hljs-highlight  type">int</span></code>. Take note that only <code><span class="hljs-highlight  type">int</span></code> and <code><span class="hljs-highlight  type">string</span></code> are allowed as enum values.</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-highlight  keyword">enum</span> <span class="hljs-highlight  type">Status</span>: <span class="hljs-highlight  type green">int</span>
{
    <span class="hljs-keyword">case</span> <span class="hljs-highlight  prop">DRAFT</span> = <span class="hljs-number">1</span>;
    <span class="hljs-keyword">case</span> <span class="hljs-highlight  prop">PUBLISHED</span> = <span class="hljs-number">2</span>;
    <span class="hljs-keyword">case</span> <span class="hljs-highlight  prop">ARCHIVED</span> = <span class="hljs-number">3</span>;
}</code></pre>
<p>The technical term for typed enums is called "backed enums" since they are "backed" by a simpler value. If you decide to assign enum values, all cases should have a value. You cannot mix and match them. Enums that aren't "backed" are called "pure enums".</p>
<h3 id="backed-enums-with-interfaces"><a href="#backed-enums-with-interfaces" class="heading-anchor">#</a> Backed enums with interfaces</h3>
<p>If you're combining backed enums and interface, the enum type must come directly after the enum name, before the <code><span class="hljs-highlight  keyword">implements</span></code> keyword.</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-highlight  keyword">enum</span> <span class="hljs-highlight  type">Status</span>: <span class="hljs-highlight  type">string</span> <span class="hljs-highlight  keyword">implements</span> <span class="hljs-highlight  type">HasColor</span>
{
    <span class="hljs-keyword">case</span> <span class="hljs-highlight  prop">DRAFT</span> = <span class="hljs-string">'draft'</span>;
    <span class="hljs-keyword">case</span> <span class="hljs-highlight  prop">PUBLISHED</span> = <span class="hljs-string">'published'</span>;
    <span class="hljs-keyword">case</span> <span class="hljs-highlight  prop">ARCHIVED</span> = <span class="hljs-string">'archived'</span>;
    
    <span class="hljs-comment">// …</span>
}</code></pre>
<h3 id="serializing-backed-enums"><a href="#serializing-backed-enums" class="heading-anchor">#</a> Serializing backed enums</h3>
<p>If you're assigning values to enum cases, you probably want a way to serialize and deserialize them. Serializing them means you need a way to access the enum's value. That's done with a readonly public property:</p>
<pre><code class="language-php hljs php" data-lang="php">$value = <span class="hljs-highlight  type">Status</span>::<span class="hljs-highlight  prop">PUBLISHED</span>-&gt;<span class="hljs-highlight  prop">value</span>; <span class="hljs-comment">// 2</span></code></pre>
<p>Restoring an enum from a value can be done by using <code><span class="hljs-highlight  type">Enum</span>::<span class="hljs-highlight  prop">from</span></code>:</p>
<pre><code class="language-php hljs php" data-lang="php">$status = <span class="hljs-highlight  type">Status</span>::<span class="hljs-highlight  prop">from</span>(<span class="hljs-number">2</span>); <span class="hljs-comment">// Status::PUBLISHED</span></code></pre>
<p>There's also a <code><span class="hljs-highlight  prop">tryFrom</span></code> that returns <code><span class="hljs-highlight  keyword">null</span></code> if an unknown value is passed. If you'd use <code><span class="hljs-highlight  prop">from</span></code> there would be an exception.</p>
<pre><code class="language-php hljs php" data-lang="php">$status = <span class="hljs-highlight  type">Status</span>::<span class="hljs-highlight  prop">from</span>(<span class="hljs-string">'unknown'</span>); <span class="hljs-comment">// ValueError</span>
$status = <span class="hljs-highlight  type">Status</span>::<span class="hljs-highlight  prop">tryFrom</span>(<span class="hljs-string">'unknown'</span>); <span class="hljs-comment">// null</span></code></pre>
<p>Note that you can also use the built-in <code><span class="hljs-highlight  prop">serialize</span></code> and <code><span class="hljs-highlight  prop">unserialize</span></code> functions on enums. Furthermore, you can use <code><span class="hljs-highlight  prop">json_encode</span></code> in combination with backed enums, its result will be the enum value. This behaviour can be overridden by implementing <code><span class="hljs-highlight  type">JsonSerializable</span></code>.</p>
<h3 id="listing-enum-values"><a href="#listing-enum-values" class="heading-anchor">#</a> Listing enum values</h3>
<p>You can use the static <code><span class="hljs-highlight  type">Enum</span>::<span class="hljs-highlight  prop">cases</span>()</code> method to get a list of all available cases within an enum:</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-highlight  type">Status</span>::<span class="hljs-highlight  prop">cases</span>();

<span class="hljs-comment">/* [
    Status::DRAFT, 
    Status::PUBLISHED, 
    Status::ARCHIVED
] */</span></code></pre>
<p>Note that this array contains the actual enum objects:</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-highlight  prop">array_map</span>(
    <span class="hljs-highlight  keyword">fn</span>(<span class="hljs-highlight  type">Status</span> $status) =&gt; $status-&gt;<span class="hljs-highlight  prop">color(</span>), 
    <span class="hljs-highlight  type">Status</span>::<span class="hljs-highlight  prop">cases</span>()
);</code></pre>
<p>When using backed enums, the array keys will contain the enum value:</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-highlight  type">Status</span>::<span class="hljs-highlight  prop">cases</span>();

<span class="hljs-comment">/* [
    'draft' =&gt; Status::DRAFT, 
    'published' =&gt; Status::PUBLISHED, 
    'archived' =&gt; Status::ARCHIVED,
] */</span></code></pre>
<h3 id="enums-are-objects"><a href="#enums-are-objects" class="heading-anchor">#</a> Enums are objects</h3>
<p>I already mentioned that enums values are represented as objects, in fact those are singleton objects. That means that you can do comparisons with them like so:</p>
<pre><code class="language-php hljs php" data-lang="php">$statusA = <span class="hljs-highlight  type">Status</span>::<span class="hljs-highlight  prop">PENDING</span>;
$statusB = <span class="hljs-highlight  type">Status</span>::<span class="hljs-highlight  prop">PENDING</span>;
$statusC = <span class="hljs-highlight  type">Status</span>::<span class="hljs-highlight  prop">ARCHIVED</span>;

$statusA === $statusB; <span class="hljs-comment">// true</span>
$statusA === $statusC; <span class="hljs-comment">// false</span>
$statusC <span class="hljs-keyword">instanceof</span> <span class="hljs-highlight  type">Status</span>; <span class="hljs-comment">// true</span></code></pre>
<h3 id="enums-as-array-keys"><a href="#enums-as-array-keys" class="heading-anchor">#</a> Enums as array keys</h3>
<p>Because enums values are actually objects, it's currently not possible to use them as array keys. The following will result in an error:</p>
<pre><code class="language-php hljs php" data-lang="php">$list = [
    <span class="hljs-highlight  striped"><span class="hljs-highlight  type">Status</span>::<span class="hljs-highlight  prop">DRAFT</span></span> =&gt; <span class="hljs-string">'draft'</span>,
    <span class="hljs-comment">// …</span>
];</code></pre>
<p>There is <a target="_blank" href="https://wiki.php.net/rfc/object_keys_in_arrays">an RFC</a> to change this behaviour, but it hasn't been voted yet.</p>
<p>This means you can only use enums as keys in <code><span class="hljs-highlight  type">SplObjectStorage</span></code> and <code><span class="hljs-highlight  type">WeakMaps</span></code>.</p>
<h3 id="traits"><a href="#traits" class="heading-anchor">#</a> Traits</h3>
<p>Enums can use traits just like classes, but with some more restrictions. You're not allowed to override built-in enum methods, and they can't contain class properties — those are prohibited on enums.</p>
<h3 id="reflection-and-attributes"><a href="#reflection-and-attributes" class="heading-anchor">#</a> Reflection and attributes</h3>
<p>As expected, there are a few reflection classes added for dealing with enums: <code><span class="hljs-highlight  type">ReflectionEnum</span></code>, <code><span class="hljs-highlight  type">ReflectionEnumUnitCase</span></code> and <code><span class="hljs-highlight  type">ReflectionEnumBackedCase</span></code>. There's also a new <code><span class="hljs-highlight  prop">enum_exists</span></code> function which does what its name suggests.</p>
<p>Just like normal classes and properties, enums and their cases can be annotated using <a href="/blog/attributes-in-php-8">attributes</a>. Note that <code><span class="hljs-highlight  prop">TARGET_CLASS</span></code> filter will also include enums.</p>
<p>One last thing: enums also have a read only property <code>$enum-><span class="hljs-highlight  prop">name</span></code>, which the RFC mentions is an implementation detail and should probably only be used for debugging purposes. It's still worth mentioning though.</p>
<p><div class="author">
    Noticed a tpyo? You can submit a
    <a href="https://github.com/brendt/stitcher.io" target="_blank" rel="noopener noreferrer">PR</a> to fix it.

    If you want to stay up to date about what's happening on this blog, you can follow me
    <a href="https://mobile.twitter.com/brendt_gd" target="_blank" rel="noopener noreferrer">on Twitter</a> or subscribe to my newsletter:

    <form action="https://mail.stitcher.io/subscribe/81fa83d0-4a0b-4eff-b897-f6ce51dfb7f0" method="post" class="newsletter-form">
        <label for="newsletter-email-1">Email</label>
        <input type="email" name="email" id="newsletter-email-1"/>
        <button type="submit" class="cta cta-small">Subscribe</button>
    </form>
</div>
</p>
<p>That's about all there is to say about enums, I'm very much looking forward to using them as soon as <a href="/blog/new-in-php-81">PHP 8.1 arrives</a>, and also to sunset my own <a target="_blank" href="https://github.com/spatie/enum">userland implementation</a>.</p>
 ]]></summary>

                <updated>2021-02-17T00:00:00+00:00</updated>
            </entry>
                                <entry>
                <title><![CDATA[ PHP Enums before PHP 8.1 ]]></title>

                <link rel="alternate" href="https://stitcher.io/blog/php-enums-before-php-81"/>

                <id>https://www.stitcher.io/blog/php-enums-before-php-81</id>

                <author>
                    <name><![CDATA[ Brent Roose ]]></name>
                </author>

                <summary type="html"><![CDATA[ <div class="sidenote">
<h2 id="native-support-in-php-8.1!"><a href="#native-support-in-php-8.1!" class="heading-anchor">#</a> Native support in PHP 8.1!</h2>
<p>You can read all about built-in enums in PHP 8.1 in <a href="/blog/php-enums">this post</a>. If you're looking for more information on userland implementations of enums before PHP 8.1, you can continue to read this post.</p>
</div>
<p>If you came here looking for our enum implementation in PHP, that's <a target="_blank" href="https://github.com/spatie/enum">this way</a>. If you're interested in the design philosophy behind it, read on!</p>
<hr />
<p>An enumeration type, "enum" for short, is a data type to categorise named values.
Enums can be used instead of hard coded strings to represent, for example,
the status of a blog post in a structured and typed way.</p>
<p>PHP doesn't have a native enum type.
It offers a very basic <a target="_blank" href="http://php.net/manual/en/class.splenum.php">SPL implementation</a>,
but this really doesn't cut the mustard.</p>
<p><div class="ad-container">
    <script async type="text/javascript" src="//cdn.carbonads.com/carbon.js?serve=CK7ICK3W&placement=stitcherio" id="_carbonads_js"></script>
</div>
</p>
<p>There's a popular package written by <a target="_blank" href="https://mobile.twitter.com/matthieunapoli">Matthieu Napoli</a>
called <a target="_blank" href="https://github.com/myclabs/php-enum">myclabs/php-enum</a>.
It's a package I and many others have been using in countless projects.
It's really awesome.</p>
<p>Today I want to explore some of the difficulties we encounter when solving problems like enums in userland.
I'll talk about my personal take on enums, and we'll ponder on core support.</p>
<p>One last note:
I will assume that you know what enums are,
and that you know on how to use them in real life projects.</p>
<p><div class="author">
    Noticed a tpyo? You can submit a
    <a href="https://github.com/brendt/stitcher.io" target="_blank" rel="noopener noreferrer">PR</a> to fix it.

    If you want to stay up to date about what's happening on this blog, you can follow me
    <a href="https://mobile.twitter.com/brendt_gd" target="_blank" rel="noopener noreferrer">on Twitter</a> or subscribe to my newsletter:

    <form action="https://mail.stitcher.io/subscribe/81fa83d0-4a0b-4eff-b897-f6ce51dfb7f0" method="post" class="newsletter-form">
        <label for="newsletter-email-2">Email</label>
        <input type="email" name="email" id="newsletter-email-2"/>
        <button type="submit" class="cta cta-small">Subscribe</button>
    </form>
</div>
</p>
<h2 id="imagine-if:"><a href="#imagine-if:" class="heading-anchor">#</a> Imagine if:</h2>
<p>We could write something like this in PHP…</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Post</span>
</span>{
    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">setStatus</span><span class="hljs-params">(PostStatus $status)</span>: <span class="hljs-title">void</span>
    </span>{
        <span class="hljs-keyword">$this</span>-&gt;status = $status;
    }
}</code></pre>
<p>… and be sure that the value of <code>Post::$status</code> is always one of three strings:
<code>draft</code>, <code>published</code> or <code>archived</code>.</p>
<p>Say we'd save this <code>Post</code> in a database, its status would automatically be represented as a string.</p>
<p>The <code>myclabs/php-enum</code> package allows us to write this:</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PostStatus</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Enum</span>
</span>{
    <span class="hljs-keyword">const</span> DRAFT = <span class="hljs-string">'draft'</span>;
    <span class="hljs-keyword">const</span> PUBLISHED = <span class="hljs-string">'published'</span>;
    <span class="hljs-keyword">const</span> ARCHIVED = <span class="hljs-string">'archived'</span>;
}</code></pre>
<p>We could use the constant values directly like so:</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Post</span>
</span>{
    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">setStatus</span><span class="hljs-params">(string $status)</span>: <span class="hljs-title">void</span>
    </span>{
        <span class="hljs-keyword">$this</span>-&gt;status = $status;
    }
}

<span class="hljs-comment">// …</span>

$post-&gt;setStatus(PostStatus::DRAFT);</code></pre>
<p>But this prevents us to do proper type checking, as every string could be passed to <code>Post::setStatus()</code>.</p>
<p>A better approach is to use a little magic introduced by the library:</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PostStatus</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Enum</span>
</span>{
    <span class="hljs-keyword">private</span> <span class="hljs-keyword">const</span> DRAFT = <span class="hljs-string">'draft'</span>;
    <span class="hljs-keyword">private</span> <span class="hljs-keyword">const</span> PUBLISHED = <span class="hljs-string">'published'</span>;
    <span class="hljs-keyword">private</span> <span class="hljs-keyword">const</span> ARCHIVED = <span class="hljs-string">'archived'</span>;
}

$post-&gt;setStatus(PostStatus::DRAFT());</code></pre>
<p>Using the magic method <code>__callStatic()</code> underneath, an object of the class <code>PostStatus</code> is constructed,
with the <code>'draft'</code> value in it.</p>
<p>Now we can type check for <code>PostStatus</code>
and ensure the input is one of the three things defined by the "enum".</p>
<p>Here's the problem with the <code>myclabs/php-enum</code> package though:
by relying on <code>__callStatic()</code>, we lose static analysis benefits like auto completion and refactoring:</p>
<p><img src="/resources/img/blog/enum/no-autocomplete.gif" srcset="/resources/img/blog/enum/no-autocomplete-632x405.gif 632w, /resources/img/blog/enum/no-autocomplete-894x573.gif 894w, /resources/img/blog/enum/no-autocomplete-1000x642.gif 1000w, /resources/img/blog/enum/no-autocomplete-447x286.gif 447w, /resources/img/blog/enum/no-autocomplete-774x496.gif 774w" sizes="" alt=""></img></p>
<p>As you can see in this case, your IDE is unaware of the <code>PostsStatus::DRAFT()</code> method.</p>
<p>Luckily, this problem is solvable with docblock type hints:</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-comment">/**
 * <span class="hljs-doctag">@method</span> static self DRAFT()
 * <span class="hljs-doctag">@method</span> static self PUBLISHED()
 * <span class="hljs-doctag">@method</span> static self ARCHIVED()
 */</span>
<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PostStatus</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Enum</span>
</span>{
    <span class="hljs-keyword">private</span> <span class="hljs-keyword">const</span> DRAFT = <span class="hljs-string">'draft'</span>;
    <span class="hljs-keyword">private</span> <span class="hljs-keyword">const</span> PUBLISHED = <span class="hljs-string">'published'</span>;
    <span class="hljs-keyword">private</span> <span class="hljs-keyword">const</span> ARCHIVED = <span class="hljs-string">'archived'</span>;
}

$post-&gt;setStatus(PostStatus::DRAFT());</code></pre>
<p>But now we're in trouble when refactoring an enum's value.
Say we want to rename <code>DRAFT</code> to <code>NEW</code>:</p>
<p><img src="/resources/img/blog/enum/no-refactor.gif" srcset="/resources/img/blog/enum/no-refactor-894x742.gif 894w, /resources/img/blog/enum/no-refactor-632x524.gif 632w, /resources/img/blog/enum/no-refactor-774x642.gif 774w, /resources/img/blog/enum/no-refactor-447x371.gif 447w, /resources/img/blog/enum/no-refactor-1000x830.gif 1000w" sizes="" alt=""></img></p>
<p>Also we're maintaining duplicate code: there's the constant values, and the doc blocks.</p>
<p>At this point it's time to stop and think.
In an ideal world, we'd have built-in enums in PHP:</p>
<pre><code class="language-java hljs java" data-lang="java"><span class="hljs-keyword">enum</span> PostStatus {
    DRAFT, PUBLISHED, ARCHIVED;
}</code></pre>
<p>Since that's not the case right now, we're stuck with userland implementations.</p>
<p>Extending PHP's type system in userland most likely means two things: magic and reflection.</p>
<p>If we're already relying on these two elements,
why not go full-out and make our lives as simple as possible?</p>
<p>Here's how I write enums today:</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-comment">/**
 * <span class="hljs-doctag">@method</span> static self DRAFT()
 * <span class="hljs-doctag">@method</span> static self PUBLISHED()
 * <span class="hljs-doctag">@method</span> static self ARCHIVED()
 */</span>
<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PostStatus</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Enum</span>
</span>{
}</code></pre>
<p>Opinionated, right? It's less code to maintain though, with more benefits.</p>
<p><div class="sidenote">
    <p>
        Tired of managing servers?
        Check out <a href="https://gumroad.com/a/575280243" ping="https://analytics.stitcher.io/r" target="_blank" rel="noopener noreferrer">Serverless Visually Explained</a> by Matthieu Napoli and learn how to create scalable PHP applications on AWS.
    </p>
</div>
</p>
<p>I <em>know</em> this is far from an ideal situation.
It would be amazing to see built-in support for enums in PHP one day.
But until then, this has to do.</p>
<p>If you want to, you can try out my implementation <a target="_blank" href="https://github.com/spatie/enum">here</a>.</p>
<p>So, what's your take on enums? Do you want them in core PHP?
Let's talk about it on <a target="_blank" href="https://twitter.com/brendt_gd">Twitter</a>!</p>
 ]]></summary>

                <updated>2021-02-17T00:00:00+00:00</updated>
            </entry>
                                <entry>
                <title><![CDATA[ What&#039;s new in PHP 8.1 ]]></title>

                <link rel="alternate" href="https://stitcher.io/blog/new-in-php-81"/>

                <id>https://www.stitcher.io/blog/new-in-php-81</id>

                <author>
                    <name><![CDATA[ Brent Roose ]]></name>
                </author>

                <summary type="html"><![CDATA[ <p>PHP 8.1 is currently in active development and will probably be released somewhere around the end of November 2021. We already know about new features, performance improvements, changes and deprecations; so let's go through them one by one.</p>
<p><div class="sidenote">
    <p>
        Tired of managing servers?
        Check out <a href="https://gumroad.com/a/575280243" ping="https://analytics.stitcher.io/r" target="_blank" rel="noopener noreferrer">Serverless Visually Explained</a> by Matthieu Napoli and learn how to create scalable PHP applications on AWS.
    </p>
</div>
</p>
<h2 id="new-features"><a href="#new-features" class="heading-anchor">#</a> New features</h2>
<p>As with every release, PHP 8.1 adds some nice new features. Keep in mind that this list will grow over the year. I'm also listing features that haven't been implemented yet but that make a good chance of ending up in the language. I'll make sure to always mark those features.</p>
<hr />
<h3 id="enums-rfc"><a href="#enums-rfc" class="heading-anchor">#</a> Enums <small><a target="_blank" href="https://wiki.php.net/rfc/enumerations">RFC</a></small></h3>
<p>Enums will be added in PHP 8.1! If you're unsure what they can be used for, you can read about them <a target="_blank" href="/blog/php-enums">here</a>.</p>
<p>Adding enums would be a significant improvement in PHP, so I for one am very much looking forward seeing enums arrive in PHP 8.1. To give you a quick preview of what they will look like, here's a code sample:</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-highlight  keyword">enum</span> <span class="hljs-highlight  type">Status</span> {
  <span class="hljs-highlight  keyword"><span class="hljs-keyword">case</span></span> <span class="hljs-highlight  prop">Pending</span>;
  <span class="hljs-highlight  keyword"><span class="hljs-keyword">case</span></span> <span class="hljs-highlight  prop">Active</span>;
  <span class="hljs-highlight  keyword"><span class="hljs-keyword">case</span></span> <span class="hljs-highlight  prop">Archived</span>;
}</code></pre>
<p>And this is how they will be used:</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Post</span>
</span>{
    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span><span class="hljs-params">(
        <span class="hljs-highlight  keyword">private</span> <span class="hljs-highlight  type">Status</span> <span class="hljs-highlight  prop">$status</span> = <span class="hljs-highlight  type">Status</span>::<span class="hljs-highlight  prop">Pending</span>;
    )</span> </span>{}

    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">setStatus</span><span class="hljs-params">(<span class="hljs-highlight  type">Status</span> $status)</span>: <span class="hljs-title">void</span>
    </span>{
        <span class="hljs-comment">// …</span>
    }
}

$post-&gt;<span class="hljs-highlight  prop">setStatus</span>(<span class="hljs-highlight  type">Status</span>::<span class="hljs-highlight  prop">Active</span>);</code></pre>
<p>You can find an in-depth analysis of how to use enums in <a href="/blog/php-enums">this post</a>.</p>
<hr />
<h3 id="performance-improvements-pr"><a href="#performance-improvements-pr" class="heading-anchor">#</a> Performance improvements <small><a target="_blank" href="https://github.com/php/php-src/pull/6627">PR</a></small></h3>
<p>Dmitry Stogov has added some improvements to opcache, he calls it "<a target="_blank" href="https://github.com/php/php-src/pull/6627">inheritance cache</a>". This feature allows links between classes to be cached, much like linked classes can be <a target="_blank" href="/blog/preloading-in-php-74">preloaded</a> as of PHP 7.4.</p>
<p>Dmitry reports between a 5% and 8% performance increase thanks to this change, a nice little detail to look out for in PHP 8.1.</p>
<p><div class="ad-container">
    <script async type="text/javascript" src="//cdn.carbonads.com/carbon.js?serve=CK7ICK3W&placement=stitcherio" id="_carbonads_js"></script>
</div>
</p>
<hr />
<h3 id="array-unpacking-with-string-keys-rfc"><a href="#array-unpacking-with-string-keys-rfc" class="heading-anchor">#</a> Array unpacking with string keys <small><a target="_blank" href="https://wiki.php.net/rfc/array_unpacking_string_keys">RFC</a></small></h3>
<p>Array unpacking was already allowed in <a href="/blog/new-in-php-74">PHP 7.4</a>, but it only worked with numeric keys. The reason string keys weren't supported before is because there wasn't any consensus on how to merge array duplicates. The RFC cleanly solves this by following the semantics of <code><span class="hljs-highlight  prop">array_merge</span></code>:</p>
<pre><code class="language-php hljs php" data-lang="php">$array1 = [<span class="hljs-string">"a"</span> =&gt; <span class="hljs-number">1</span>];

$array2 = [<span class="hljs-string">"b"</span> =&gt; <span class="hljs-number">2</span>];

$array = [<span class="hljs-string">"a"</span> =&gt; <span class="hljs-number">0</span>, ...$array1, ...$array2];

<span class="hljs-highlight  prop">var_dump</span>($array); <span class="hljs-comment">// ["a" =&gt; 1, "b" =&gt; 2]</span></code></pre>
<hr />
<h3 id="new-array_is_list-function-rfc"><a href="#new-array_is_list-function-rfc" class="heading-anchor">#</a> New <code><span class="hljs-highlight  prop">array_is_list</span></code> function <small><a target="_blank" href="https://wiki.php.net/rfc/is_list">RFC</a></small></h3>
<p>You've probably had to deal with this once in a while: determine if an array's keys are in numerical order, starting from index 0. Just like <code><span class="hljs-highlight  prop">json_encode</span></code> decides whether an array should be encoded as an array or object.</p>
<p>PHP 8.1 adds a built-in function to determine whether an array is a list with those semantics, or not:</p>
<pre><code class="language-php hljs php" data-lang="php">$list = [<span class="hljs-string">"a"</span>, <span class="hljs-string">"b"</span>, <span class="hljs-string">"c"</span>];

<span class="hljs-highlight  prop">array_is_list</span>($list); <span class="hljs-comment">// true</span>

$notAList = [<span class="hljs-number">1</span> =&gt; <span class="hljs-string">"a"</span>, <span class="hljs-number">2</span> =&gt; <span class="hljs-string">"b"</span>, <span class="hljs-number">3</span> =&gt; <span class="hljs-string">"c"</span>];

<span class="hljs-highlight  prop">array_is_list</span>($notAList); <span class="hljs-comment">// false</span>

$alsoNotAList = [<span class="hljs-string">"a"</span> =&gt; <span class="hljs-string">"a"</span>, <span class="hljs-string">"b"</span> =&gt; <span class="hljs-string">"b"</span>, <span class="hljs-string">"c"</span> =&gt; <span class="hljs-string">"c"</span>];

<span class="hljs-highlight  prop">array_is_list</span>($alsoNotAList); <span class="hljs-comment">// false</span></code></pre>
<p><div class="sidenote">
    <p>
        Do you want to stay up-to-date about PHP 8.1's development? Subscribe to my newsletter and receive occasional updates:
    </p>

    <form action="https://mail.stitcher.io/subscribe/81fa83d0-4a0b-4eff-b897-f6ce51dfb7f0" method="post" class="newsletter-form">
        <label for="newsletter-email-5">Email</label>
        <input type="email" name="email" id="newsletter-email-5"/>
        <button type="submit" class="cta cta-small">Subscribe</button>
    </form>
</div>
</p>
<hr />
<h3 id="explicit-octal-integer-literal-notation-rfc"><a href="#explicit-octal-integer-literal-notation-rfc" class="heading-anchor">#</a> Explicit octal integer literal notation <small><a target="_blank" href="https://wiki.php.net/rfc/explicit_octal_notation">RFC</a></small></h3>
<p>You can now use <code>0o</code> and <code>0O</code> to denote octal numbers. The previous notation by prefixing a number with <code>0</code> still works as well.</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-number">016</span> === <span class="hljs-number">0</span>o16; <span class="hljs-comment">// true</span>
<span class="hljs-number">016</span> === <span class="hljs-number">0</span>O16; <span class="hljs-comment">// true</span></code></pre>
<h2 id="breaking-changes"><a href="#breaking-changes" class="heading-anchor">#</a> Breaking changes</h2>
<p>While PHP 8.1 is a minor version, there will be some changes that might technically be a breaking change, and deprecations as well. Let's discuss them one by one.</p>
<hr />
<h3 id="restrict-$globals-usage-rfc"><a href="#restrict-$globals-usage-rfc" class="heading-anchor">#</a> Restrict <code>$GLOBALS</code> usage <small><a target="_blank" href="https://wiki.php.net/rfc/restrict_globals_usage">RFC</a></small></h3>
<p>A small change to how <code>$GLOBALS</code> is used will have a significant impact on the performance of all array operations. Nikita does a fine job explaining the problem and solution in the <a target="_blank" href="https://wiki.php.net/rfc/restrict_globals_usage">RFC</a>. The change means that some edge cases aren't possible to do any more with <code>$GLOBALS</code>. "<em>What is no longer supported are writes to $GLOBALS taken as a whole. All the following will generate a compile-time error</em>":</p>
<pre><code class="language-php hljs php" data-lang="php">$GLOBALS = [];
$GLOBALS += [];
$GLOBALS =&amp; $x;
$x =&amp; $GLOBALS;
<span class="hljs-keyword">unset</span>($GLOBALS);</code></pre>
<p>On top of that, passing <code>$GLOBALS</code> by reference will generate a runtime error:</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-highlight  prop">by_ref</span>($GLOBALS); <span class="hljs-comment">// Run-time error</span></code></pre>
<p>Nikita analysed the top 2000 packages on Packagist, and only found 23 cases that will be affected by this change. We can conclude the impact of this — technically breaking — change will be low, which is why internals decided to add it in PHP 8.1. Remember that most of us will win by this change, given the positive performance impact it has everywhere in our code.</p>
<hr />
<h3 id="resource-to-object-migrations"><a href="#resource-to-object-migrations" class="heading-anchor">#</a> Resource to object migrations</h3>
<p>These changes are part of the long-term vision to convert all resources to dedicated objects. You can read more about it <a target="_blank" href="https://github.com/php/php-tasks/issues/6">here</a>.</p>
<p><strong>Fileinfo functions with <code><span class="hljs-highlight  type">finfo</span></code> objects</strong></p>
<p>Functions like <code><span class="hljs-highlight  prop">finfo_file</span></code> and <code><span class="hljs-highlight  prop">finfo_open</span></code> used to accept and return resources. As of PHP 8.1, they work with <a target="_blank" href="https://www.php.net/manual/en/class.finfo.php"><code><span class="hljs-highlight  type">finfo</span></code></a> objects.</p>
<p><strong>IMAP functions with <code><span class="hljs-highlight  type">IMAPConnection</span></code> objects</strong></p>
<p>Just like the fileinfo change, IMAP functions like <code><span class="hljs-highlight  prop">imap_body</span></code> and <code><span class="hljs-highlight  prop">imap_open</span></code> no longer work with resources</p>
<hr />
<h3 id="deprecate-passing-null-to-non-nullable-arguments-of-internal-functions-rfc"><a href="#deprecate-passing-null-to-non-nullable-arguments-of-internal-functions-rfc" class="heading-anchor">#</a> Deprecate passing null to non-nullable arguments of internal functions <small><a target="_blank" href="https://wiki.php.net/rfc/deprecate_null_to_scalar_internal_arg">RFC</a></small></h3>
<p>This change is simple: internal functions currently accept <code>null</code> for arguments that are non-nullable, this RFC deprecates that behaviour. For example, this is currently possible:</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-highlight  prop">str_contains</span>(<span class="hljs-string">"string"</span>, <span class="hljs-highlight  striped"><span class="hljs-keyword">null</span></span>);</code></pre>
<p>In PHP 8.1, these kinds of errors will throw a deprecation warning, in PHP 9 they will be converted to type errors.</p>
<hr />
<h3 id="other-small-changes"><a href="#other-small-changes" class="heading-anchor">#</a> Other small changes</h3>
<p>With every release, there's a bunch of very minor changes to the language. All of them are listed in the <a target="_blank" href="https://github.com/php/php-src/blob/master/UPGRADING">UPGRADING</a> guide on GitHub, make sure to check it out if you want to know every little detail.</p>
<p>Here's a summary of the most significant changes:</p>
<ul>
<li>
<code><span class="hljs-highlight  prop">MYSQLI_STMT_ATTR_UPDATE_MAX_LENGTH</span></code> no longer has an effect</li>
<li>
<code><span class="hljs-highlight  prop">MYSQLI_STORE_RESULT_COPY_DATA</span></code> no longer has an effect</li>
<li>
<hljs type>PDO</hljs>::<hljs prop>ATTR_STRINGIFY_FETCHES</hljs> now also works with booleans</li>
<li>Integers and floats in PDO MySQL and Sqlite result sets will be returned using native PHP types instead of strings when using emulated prepared statements</li>
<li>Functions like <code><span class="hljs-highlight  prop">htmlspecialchars</span></code> and <code><span class="hljs-highlight  prop">htmlentities</span></code> now also escape <code>'</code> by default to <code>&amp;#039;</code>; malformed UTF-8 will also by replaced with a unicode character, instead of resulting in an empty string</li>
<li>The <code><span class="hljs-highlight  prop">hash</span></code>, <code><span class="hljs-highlight  prop">hash_file</span></code> and <code><span class="hljs-highlight  prop">hash_init</span></code> have an extra argument added to them called <code>$options</code>, it has a default value of <code>[]</code> so it won't affect your code</li>
<li>New support for <code>MurmurHash3</code> and <code>xxHash</code>
</li>
</ul>
<hr />
<p>That's it for now, keep in mind I'll regularly update this post during the year, so make sure to <a href="/newsletter/subscribe">subscribe</a> if you want to be kept in the loop. Are you excited for PHP 8.1? Let me know on <a target="_blank" href="https://twitter.com/brendt_gd">Twitter</a>!</p>
<p><div class="author">
    Noticed a tpyo? You can submit a
    <a href="https://github.com/brendt/stitcher.io" target="_blank" rel="noopener noreferrer">PR</a> to fix it.

    If you want to stay up to date about what's happening on this blog, you can follow me
    <a href="https://mobile.twitter.com/brendt_gd" target="_blank" rel="noopener noreferrer">on Twitter</a> or subscribe to my newsletter:

    <form action="https://mail.stitcher.io/subscribe/81fa83d0-4a0b-4eff-b897-f6ce51dfb7f0" method="post" class="newsletter-form">
        <label for="newsletter-email-6">Email</label>
        <input type="email" name="email" id="newsletter-email-6"/>
        <button type="submit" class="cta cta-small">Subscribe</button>
    </form>
</div>
</p>
 ]]></summary>

                <updated>2021-01-29T00:00:00+00:00</updated>
            </entry>
                                <entry>
                <title><![CDATA[ A storm in a glass of water ]]></title>

                <link rel="alternate" href="https://stitcher.io/blog/a-storm-in-a-glass-of-water"/>

                <id>https://www.stitcher.io/blog/a-storm-in-a-glass-of-water</id>

                <author>
                    <name><![CDATA[ Brent Roose ]]></name>
                </author>

                <summary type="html"><![CDATA[ <p>I just read a post about PHP 8 that I couldn't just silently ignore. If you want to read it first, go <a target="_blank" href="https://24daysindecember.net/2020/12/21/a-perfect-storm/">check it out</a>.</p>
<p>With a fitting title "A Perfect Storm", the author voices their concerns about how upgrading to PHP 8 isn't an easy path, and how open source maintainers have to struggle to be able to support PHP 8 on top of their existing codebase.</p>
<p>There's no denying that PHP 8 introduces <a href="/blog/new-in-php-8">some breaking changes</a>. Especially the addition of union types, named arguments and consequently the changes made to the reflection API might feel like a pain.</p>
<p><div class="ad-container">
    <script async type="text/javascript" src="//cdn.carbonads.com/carbon.js?serve=CK7ICK3W&placement=stitcherio" id="_carbonads_js"></script>
</div>
</p>
<p>What the author seems to forget when calling PHP 8 "a nightmare" and claiming it'll take years before being able to use it, is that PHP 8 is a major version, and things are allowed to break. Better yet: it's the entire purpose of a major release.</p>
<p>I don't blame the author for this sentiment, it lives in lots of people's mind. I think it's a side effect from a long and stable period of releases during the 7.x era. We've got used to easy updates, and we find it difficult when our code breaks because of one.</p>
<p>The problem however isn't with PHP growing and maturing, it's with developers and companies not being able to adapt quickly enough. Here's the brutal truth: PHP 7.4 has <a target="_blank" href="https://www.php.net/supported-versions.php">less than one year</a> of active support to go. By the end of 2021, PHP 8 will be the only version (together with the future PHP 8.1) that's still actively worked on. You <em>need</em> to get on board, or you risk becoming stuck in legacy land. Believe it or not, but PHP 7.4 will one day be what we perceive PHP 5.4 or PHP 5.6 to be: completely outdated, insecure and slow.</p>
<p>Instead of shifting the blame on the perfectly healthy and stable release cycle of PHP, we should look at ourselves and our companies.</p>
<hr />
<p>If you're still here and wanting to ride along, let's discuss a few things that <em>you</em> can do to prevent ending up in legacy land.</p>
<p>First: learn and use the proper <strong>tools</strong>. A <a href="/blog/craftsmen-know-their-tools">craftsman is nothing without proper knowledge of his tools</a>. These tools include <a target="_blank" href="https://psalm.dev/">static analysers</a>, <a target="_blank" href="https://github.com/FriendsOfPHP/PHP-CS-Fixer">code formatters</a>, <a target="_blank" href="https://www.jetbrains.com/phpstorm/">IDEs</a>, <a target="_blank" href="https://phpunit.de/">test frameworks</a> and <a target="_blank" href="https://github.com/rectorphp/rector">automatic updaters</a>. Most problems you face during upgrades are actually solved automatically if only you'd use the proper tools.</p>
<p>While you're at it, consider buying the people maintaining those projects a drink, they are going to save you hours upon hours of manual and boring labour; they are worth a few bucks. We recently upgraded a large project to PHP 8. It took a few hours of preparation and research, and only 2 hours to do the actual upgrade; it's doable.</p>
<p>Next: if you're an <strong>open source maintainer</strong>. Don't bother supporting all of PHP 7 and 8 in the same version. Embrace PHP 8 as your main target and support 7.4 if it doesn't cause any problems. If you really need to actively support older versions, you'll have to support separate branches.</p>
<p>What baffles me about the "open source argument" made by many against PHP 8, is that they seem to forget that their old tags will keep working just fine. It's not because code isn't actively maintained any more that you're prohibited from using it. If your users really need to support an older PHP version, have them use an older version of your packages. If there's a crucial feature missing from those older versions, they are free to fork the package and do whatever they want with it. There shouldn't be anything holding you back from only supporting the active PHP versions. If anything, you're encouraging the majority of your users to upgrade faster, you're doing the PHP community a favour.</p>
<p>Finally, if you're in <strong>management or running a company</strong>: sticking with older PHP versions will always make you lose money in the end. Every year you hold off on updating your codebase, it becomes more difficult and time-consuming to catch up. Can you imagine what will happen when a critical security issue is discovered in your old version? On top of that: employees really worth their money won't stick with your legacy project forever. One day they'll seize a new opportunity if you don't keep them happy. If you're not keeping up to date, you're loosing in the end.</p>
<hr />
<p>Part of being a professional developer is to be able to deal with these kinds of situations. Sure, I'd rather spend those hours spent updating on something else, but I know it's a small investment for a lot of joy in the long run.</p>
<p>Don't get dragged along the negativity, embrace the maturing language that is PHP and follow along. You won't regret it.</p>
 ]]></summary>

                <updated>2021-01-20T00:00:00+00:00</updated>
            </entry>
                                <entry>
                <title><![CDATA[ If it were up to me ]]></title>

                <link rel="alternate" href="https://stitcher.io/blog/php-reimagined"/>

                <id>https://www.stitcher.io/blog/php-reimagined</id>

                <author>
                    <name><![CDATA[ Brent Roose ]]></name>
                </author>

                <summary type="html"><![CDATA[ <p>If it were up to me, I'd change a thing or two about PHP.
Of course, I don't have anything to say about PHP's development, and that's ok. I still find it an interesting thought experiment to discover what changes I'd like to make to the language I use on a day-by-day basis and I'd love to hear <a target="_blank" href="https://twitter.com/brendt_gd">your thoughts</a> as well.
To be clear: it's a very subjective list and in no way a critique on the amazing work the core team is doing.</p>
<p>This is an updated version of an older post of mine, since PHP is <a href="/blog/new-in-php-8">growing and evolving</a> year by year. Let's dive in!</p>
<p><div class="ad-container">
    <script async type="text/javascript" src="//cdn.carbonads.com/carbon.js?serve=CK7ICK3W&placement=stitcherio" id="_carbonads_js"></script>
</div>
</p>
<h2 id="final-by-default"><a href="#final-by-default" class="heading-anchor">#</a> Final by default</h2>
<p>A <a target="_blank" href="https://front-line-php.com/object-oriented">common misconception</a> about OO programming is that it's all about inheritance.
Inheritance and polymorphism have their place, but OO is way more than that.</p>
<p>Because these principles are more often than not abused by programmers who claim they write "OO" code,
I think the language should help prevent us making these mistakes.</p>
<p>That's why I would make all classes final by default:</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-highlight  error"><span class="hljs-keyword">final</span></span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Foo</span>
</span>{
}</code></pre>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Bar</span> <span class="hljs-highlight  striped"><span class="hljs-keyword">extends</span> <span class="hljs-title">Foo</span></span>
</span>{
}</code></pre>
<p>Going even one step further: classes are only allowed to extend from abstract classes or implement interfaces.
This way we can prevent deep inheritance chains of concrete classes.</p>
<h2 id="void-by-default"><a href="#void-by-default" class="heading-anchor">#</a> Void by default</h2>
<p>Void is a strange thing when you think about it: it a "type", indicating the lack of a type.
Why not go with the obvious way: no return type, means nothing is returned.</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Foo</span>
</span>{
    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">bar</span><span class="hljs-params">()</span><span class="hljs-highlight  error">: <span class="hljs-title">void</span></span>
    </span>{
        <span class="hljs-comment">// …</span>
    }
}</code></pre>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Foo</span>
</span>{
    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">bar</span><span class="hljs-params">()</span>
    </span>{
        <span class="hljs-highlight  striped"><span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;</span>
    }
}</code></pre>
<p>Now you might be thinking: what if a function wants to return two types, that's the next point.</p>
<h2 id="no-mixed-type"><a href="#no-mixed-type" class="heading-anchor">#</a> No <code>mixed</code> type</h2>
<p>The <code>mixed</code> type basically means:
"you've got no idea what this function needs or will return, figure it out on your own".</p>
<p>Such a loose type system can be the source of many bugs.
If you feel the need to use two different types in the same function,
you should either make two implementations — this is where polymorphism has its place;
or you should program to an interface.</p>
<p>Either way, there's <em>always</em> a better solution then relying on <code>mixed</code>.
In my version of PHP, the language would ensure we always choose the better solution.</p>
<h2 id="all-parameters-must-by-typed"><a href="#all-parameters-must-by-typed" class="heading-anchor">#</a> All parameters must by typed</h2>
<p>We already established that my version of PHP would make return types required.
It's no surprise that the same goes for function parameters.</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">handle</span><span class="hljs-params">(<span class="hljs-highlight  striped">$bar</span>)</span>
</span>{
}</code></pre>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">handle</span><span class="hljs-params">(<span class="hljs-highlight  type">Bar</span> $bar)</span>
</span>{
}</code></pre>
<h2 id="class-properties-must-be-typed"><a href="#class-properties-must-be-typed" class="heading-anchor">#</a> Class properties must be typed</h2>
<p>The same rules apply to class properties.
Luckily for us, PHP 7.4 will introduce <a href="/blog/new-in-php-74#typed-properties-rfc">typed properties</a>.
I'd make them required though.</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Foo</span>
</span>{
    <span class="hljs-highlight  striped"><span class="hljs-keyword">public</span> <span class="hljs-highlight  prop">$bar</span>;</span>
}</code></pre>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Foo</span>
</span>{
    <span class="hljs-keyword">public</span> <span class="hljs-highlight  type">Bar</span> <span class="hljs-highlight  prop">$bar</span>;
}</code></pre>
<h2 id="visibility-modifiers-are-required"><a href="#visibility-modifiers-are-required" class="heading-anchor">#</a> Visibility modifiers are required</h2>
<p>Explicitness eliminates room for confusion.
That's why all methods and class variables must have a visibility modifier.</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Foo</span>
</span>{
    <span class="hljs-highlight  striped"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">bar</span><span class="hljs-params">()</span>
    </span>{
        <span class="hljs-comment">// …</span>
    }</span>
} </code></pre>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Foo</span>
</span>{
    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">bar</span><span class="hljs-params">()</span>
    </span>{
        <span class="hljs-comment">// …</span>
    }
} </code></pre>
<h2 id="final-on-variables"><a href="#final-on-variables" class="heading-anchor">#</a> Final on variables</h2>
<p>I started this list by saying I'd drop the <code>final</code> keyword, that is on classes and methods.
<code>final</code> would be a valid keyword to mark class variables as "read only".</p>
<p>A final variable may be set on construct, and not be changed afterwards.</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Foo</span>
</span>{
    <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-highlight  type">Bar</span> <span class="hljs-highlight  prop">$bar</span>;
    
    <span class="hljs-keyword">public</span> <span class="hljs-highlight  prop">__construct</span>(<span class="hljs-highlight  type">Bar</span> $bar)
    {
        <span class="hljs-keyword">$this</span>-&gt;<span class="hljs-highlight  prop">bar</span> = $bar;
    }
}</code></pre>
<pre><code class="language-php hljs php" data-lang="php">$foo = <span class="hljs-keyword">new</span> <span class="hljs-highlight  type">Foo</span>($bar);

<span class="hljs-highlight  striped">$foo-&gt;bar = <span class="hljs-keyword">new</span> Bar();</span></code></pre>
<h2 id="no-more-uninitialized-state"><a href="#no-more-uninitialized-state" class="heading-anchor">#</a> No more uninitialized state</h2>
<p>Right now, <a href="/blog/typed-properties-in-php-74">Typed properties</a> can be initialized after construction. This is valid PHP</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Foo</span>
</span>{
    <span class="hljs-keyword">public</span> <span class="hljs-highlight  type">string</span> <span class="hljs-highlight  prop">$bar</span>;
    
    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span><span class="hljs-params">()</span> </span>{
        <span class="hljs-comment">// Don't initialize bar</span>
    }
}

$foo = <span class="hljs-keyword">new</span> <span class="hljs-highlight  type">Foo</span>();

$foo-&gt;<span class="hljs-highlight  prop">bar</span> = <span class="hljs-string">'abc'</span>;</code></pre>
<p>PHP only throws an error when the property is accessed before it's initialised.</p>
<pre><code class="language-php hljs php" data-lang="php">$foo = <span class="hljs-keyword">new</span> <span class="hljs-highlight  type">Foo</span>();

<span class="hljs-keyword">echo</span> $foo-&gt;<span class="hljs-highlight  prop">bar</span>; <span class="hljs-comment">// Error</span></code></pre>
<p>I'd say to get rid rid of this behaviour. If a typed property isn't initialised after the object was constructed, you get an error.</p>
<p><div class="author">
    Noticed a tpyo? You can submit a
    <a href="https://github.com/brendt/stitcher.io" target="_blank" rel="noopener noreferrer">PR</a> to fix it.

    If you want to stay up to date about what's happening on this blog, you can follow me
    <a href="https://mobile.twitter.com/brendt_gd" target="_blank" rel="noopener noreferrer">on Twitter</a> or subscribe to my newsletter:

    <form action="https://mail.stitcher.io/subscribe/81fa83d0-4a0b-4eff-b897-f6ce51dfb7f0" method="post" class="newsletter-form">
        <label for="newsletter-email-7">Email</label>
        <input type="email" name="email" id="newsletter-email-7"/>
        <button type="submit" class="cta cta-small">Subscribe</button>
    </form>
</div>
</p>
<h2 id="named-parameters"><a href="#named-parameters" class="heading-anchor">#</a> Named parameters</h2>
<p>Named parameters were originally on this list, but fortunately are <a href="/blog/php-8-named-arguments">possible as of PHP 8</a>!</p>
<h2 id="better-closures"><a href="#better-closures" class="heading-anchor">#</a> Better closures</h2>
<p>I originally listed "multiline short closures" here, but I think it's a little bit more complex. What I'd like to see is a combination of <code>function/fn</code> and <code>=>/{</code>. I'd make all combinations possible:</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">a</span><span class="hljs-params">()</span> </span>{
    <span class="hljs-keyword">return</span> <span class="hljs-comment">/* … */</span>;
}

<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">b</span><span class="hljs-params">()</span> =&gt; 1</span>;

<span class="hljs-highlight  keyword">fn</span> <span class="hljs-highlight  prop">c</span>() {
    <span class="hljs-keyword">return</span> <span class="hljs-comment">/* … */</span>;
}

<span class="hljs-highlight  keyword">fn</span> <span class="hljs-highlight  prop">d</span>() =&gt; <span class="hljs-number">1</span>;</code></pre>
<p>Here's the difference: when using the <code><span class="hljs-highlight  keyword">function</span></code> keyword, there's no automatic access to the outer scope, in other words you'll have to use <code><span class="hljs-highlight  keyword">use</span></code> to access variables outside the closure. Using <code><span class="hljs-highlight  keyword">fn</span></code> doesn't have this restriction.</p>
<p>If you're using the bracket notation for the closure's body <code>{}</code>, you'll be allowed to write multiline functions, but there's no magic return statement. <code>=></code> on the other hand only allows a single expression, which is immediately returned.</p>
<h2 id="scalar-types-are-also-objects"><a href="#scalar-types-are-also-objects" class="heading-anchor">#</a> Scalar types are also objects</h2>
<p>One of the few things I think that we're all in agreement about:
the current PHP function names and definitions are inconsistent and kind of sucky.</p>
<p>Let's treat all scalar types as objects,
allowing them to contain what otherwise would be standalone functions.</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">handle</span><span class="hljs-params">()</span>: <span class="hljs-title">string</span>
</span>{
    <span class="hljs-keyword">return</span> <span class="hljs-string">"a, b, c"</span>;
}

<span class="hljs-keyword">$this</span>-&gt;<span class="hljs-highlight  prop">handle</span>()<span class="hljs-highlight  ">-&gt;<span class="hljs-highlight  prop">explode</span>(<span class="hljs-string">','</span>)</span>;</code></pre>
<h2 id="improved-variance"><a href="#improved-variance" class="heading-anchor">#</a> Improved variance</h2>
<p>You may have noticed a trend in the above changes.
Most of them relate to PHP's type system.
If all them were added, we'd also need to make the current type system more flexible.</p>
<p>Luckily again, PHP 7.4 already introduces <a href="/blog/new-in-php-74#improved-type-variance-rfc">improvements regarding type variance</a>.</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Bar</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Foo</span> </span>{ <span class="hljs-comment">/* … */</span> }</code></pre>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">A</span>
</span>{
    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">handle</span><span class="hljs-params">(<span class="hljs-highlight  type">Bar</span> $bar)</span>: <span class="hljs-title">Foo</span></span>;
}

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">B</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">A</span>
</span>{
    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">handle</span><span class="hljs-params">(<span class="hljs-highlight  type">Foo</span> $bar)</span>: <span class="hljs-highlight  type"><span class="hljs-title">Bar</span></span>
    </span>{
        <span class="hljs-comment">// …</span>
    }
}</code></pre>
<h2 id="always-strict-type-checking"><a href="#always-strict-type-checking" class="heading-anchor">#</a> Always strict type checking</h2>
<p>Strict type checking is done by default, you should never <code>declare(strict_types=1);</code> anymore.</p>
<h2 id="generics"><a href="#generics" class="heading-anchor">#</a> Generics</h2>
<p>After several improvements to the type system, I'd add some more improved ways to actually use it.</p>
<p>First a feature that probably most of the PHP world is waiting for: generics.</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">List</span>&lt;<span class="hljs-highlight  type"><span class="hljs-title">T</span></span>&gt;
</span>{
    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">current</span><span class="hljs-params">()</span>: <span class="hljs-title">T</span>
    </span>{
        <span class="hljs-comment">// …</span>
    }
}</code></pre>
<h2 id="enums"><a href="#enums" class="heading-anchor">#</a> Enums</h2>
<p>Next up: built-in enums.
Based on the <a target="_blank" href="https://github.com/myclabs/php-enum">several</a> <a target="_blank" href="https://github.com/marc-mabe/php-enum">userland</a>
<a target="_blank" href="https://github.com/spatie/enum">implementations</a>
it's clear that the community would benefit from a built-in enum type.</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-highlight  keyword">enum</span> <span class="hljs-highlight  type">Status</span> 
{
    <span class="hljs-highlight  prop">DRAFT</span>, <span class="hljs-highlight  prop">STATUS</span>, <span class="hljs-highlight  prop">PUBLISHED</span>;
}</code></pre>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Bar</span>
</span>{
    <span class="hljs-keyword">public</span> <span class="hljs-highlight  type">Status</span> $status;
}</code></pre>
<pre><code class="language-php hljs php" data-lang="php">$bar-&gt;status = <span class="hljs-highlight  type">Status</span>::<span class="hljs-highlight  prop">DRAFT</span>;</code></pre>
<p>It's interesting to note that a new RFC <a target="_blank" href="https://wiki.php.net/rfc/enumerations_and_adts">popped up</a> that might add enums in PHP 8.1. It's still being discussed though, so nothing concrete yet.</p>
<h2 id="structs"><a href="#structs" class="heading-anchor">#</a> Structs</h2>
<p>To end this list: structs.
One of my own packages I use all the time is the <a target="_blank" href="https://github.com/spatie/data-transfer-object">data transfer object</a> package.
It allows us to define strongly typed objects.
In essence, they are a userland implementation of what structs are meant to solve.</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-highlight  keyword">struct</span> <span class="hljs-highlight  type">Point</span> {
    <span class="hljs-highlight  type">int</span> $x;
    <span class="hljs-highlight  type">int</span> $y;
}</code></pre>
<pre><code class="language-php hljs php" data-lang="php">$point = <span class="hljs-highlight  type">Point</span> {<span class="hljs-number">1</span>, <span class="hljs-number">2</span>}</code></pre>
<h2 id="what-would-you-like-to-change?"><a href="#what-would-you-like-to-change?" class="heading-anchor">#</a> What would you like to change?</h2>
<p>Let me know <a target="_blank" href="https://twitter.com/brendt_gd">what's on your PHP wishlist</a>! If you want to be kept in the loop, feel free to subscribe to <a href="http://stitcher.io/newsletter/subscribe">my newsletter</a>.</p>
 ]]></summary>

                <updated>2021-01-13T00:00:00+00:00</updated>
            </entry>
                                <entry>
                <title><![CDATA[ Websites should be more like Star Wars ]]></title>

                <link rel="alternate" href="https://stitcher.io/blog/websites-like-star-wars"/>

                <id>https://www.stitcher.io/blog/websites-like-star-wars</id>

                <author>
                    <name><![CDATA[ Brent Roose ]]></name>
                </author>

                <summary type="html"><![CDATA[ <p>I have to admit I'm not the biggest Star Wars fan, but I can enjoy one of the movies from time to time. Whenever I watch one there is <em>one</em> thing that always stands out: the movement in everything Star Wars related feels… odd.</p>
<p>Here's what I mean with that: whenever a door slides open or a non-human character speaks, whenever a droid walks or moves; those movements feel a little unnatural to me. It makes the characters feel like puppets, and it makes objects like sliding doors feel like they have no actual weight.</p>
<p>Here's an example:</p>
<p>
    <img src="/resources/img/static/star-wars/star-wars.gif"/>
</p>
<p>Baby Yoda feels like it's a hand played puppet, its movements don't seem natural at all. There is, of course, a good reason that Star Wars uses this approach: it's a style they continued to use ever since the oldest movies which, back in the day, had to deal with much more technical limitations and where the puppet-like feeling was unavoidable. They decided to continue to use the same style of movement, not because it was necessary, but because of the charm and nostalgia feeling.</p>
<p>So what does that have to do with websites?</p>
<p><div class="ad-container">
    <script async type="text/javascript" src="//cdn.carbonads.com/carbon.js?serve=CK7ICK3W&placement=stitcherio" id="_carbonads_js"></script>
</div>
</p>
<p>I was a toddler when the internet began to grow, so I'm too young to have witnessed its rise first hand. Still I got into web development at an early age, starting with HTML when I was 12. These were times when the web was still shaping itself to what we know today. Just like Star Wars, the web had to deal with lots of technical limitations but with those limitations came creativity.</p>
<p>When I browse the web today, there's little creativity left to find. Sure, most websites are as polished as can be, but compare their design to ten others in the same niche, and you'll quickly start to see pattern emerging. While so many websites these days are pixel-perfect, they lack the soul and personality the web used to have.</p>
<p>Test it yourself: think about a topic and do a simple google search. Whether it's email campaigns, travel blogs, social media or news sites; there's little distinction between them.</p>
<p>I wish more websites aimed to be more like Star Wars: not sticking to the modern day rules and instead hold on to the things that give character, that make your website unique. We're allowed to break free from best practices, we're allowed to experiment.</p>
<p>The web still allows you to do so, the only thing holding us back is us.</p>
<p><div class="author">
    Noticed a tpyo? You can submit a
    <a href="https://github.com/brendt/stitcher.io" target="_blank" rel="noopener noreferrer">PR</a> to fix it.

    If you want to stay up to date about what's happening on this blog, you can follow me
    <a href="https://mobile.twitter.com/brendt_gd" target="_blank" rel="noopener noreferrer">on Twitter</a> or subscribe to my newsletter:

    <form action="https://mail.stitcher.io/subscribe/81fa83d0-4a0b-4eff-b897-f6ce51dfb7f0" method="post" class="newsletter-form">
        <label for="newsletter-email-8">Email</label>
        <input type="email" name="email" id="newsletter-email-8"/>
        <button type="submit" class="cta cta-small">Subscribe</button>
    </form>
</div>
</p>
 ]]></summary>

                <updated>2021-01-10T00:00:00+00:00</updated>
            </entry>
                                <entry>
                <title><![CDATA[ How to be right on the internet ]]></title>

                <link rel="alternate" href="https://stitcher.io/blog/how-to-be-right-on-the-internet"/>

                <id>https://www.stitcher.io/blog/how-to-be-right-on-the-internet</id>

                <author>
                    <name><![CDATA[ Brent Roose ]]></name>
                </author>

                <summary type="html"><![CDATA[ <p>The internet is a wonderful place. It's full of knowledge, it enables us to stay close to family and friends, and sometimes there are people who get under your skin and cause an immense amount of frustration. I've been on both sides: the one dealing with troublemakers, but also the troublemaker himself.</p>
<p>Arguments and fights on the internet can make you feel exhausted, often having an effect on your mood in real life. So today I'd like to share a few guidelines with you on managing such situations. You can apply these rules to every situation: whether you've found yourself unwillingly dragged into a conversation that's quickly spiralling out of control, or whether you're the one who's getting a little heated yourself.</p>
<p>Finally, before diving in, I want to mention a very popular book on the topic of "how to deal with people": <a target="_blank" href="https://en.wikipedia.org/wiki/The_7_Habits_of_Highly_Effective_People">The 7 Habits of Highly Effective People</a> by Stephen Covey. It's one of the most popular resources on people management, and part of this post was inspired by Covey's principles.</p>
<h2 id="the-meaning-of-conflict"><a href="#the-meaning-of-conflict" class="heading-anchor">#</a> The meaning of conflict</h2>
<p>First things first: I use the term "conflict" and I want to make sure we're all on the same page on what it means. Let's look at the Oxford Dictionary's definition:</p>
<blockquote>
<p>a situation in which people, groups or countries disagree strongly or are involved in a serious argument</p>
</blockquote>
<p>Note how it doesn't say anything about the feelings of those people, groups or countries. This is the definition I'll assume when I use the term "conflict" throughout this post. It's a situation where a tension between people exists, but it doesn't mean that that situation needs to deteriorate into one where feelings are hurt and frustration arises.</p>
<p>When I say "conflict", it means there is a situation where people don't agree, but it doesn't mean they are fighting over it.</p>
<p><div class="ad-container">
    <script async type="text/javascript" src="//cdn.carbonads.com/carbon.js?serve=CK7ICK3W&placement=stitcherio" id="_carbonads_js"></script>
</div>
</p>
<h2 id="five-rules"><a href="#five-rules" class="heading-anchor">#</a> Five rules</h2>
<p>Instead of the seven habits described by Covey (which cover more than conflict resolving), we'll stick with five rules.</p>
<p>I've managed several online communities in the past years and most recently I've been moderating /r/php on Reddit. I wouldn't say I have to deal with conflicts every day, but they are very real and very abundant indeed. That's why I always try to follow these five rules when having a conversation, and I find they work very well.</p>
<p>The first four rules focus on conflict resolving in a constructive way. They have in common that they focus on a positive outcome. They assume a level of empathy and understanding.
The fifth rule is for dealing with conflicts when there's no other way out. It's the emergency break when you notice the conversation is derailing. It's the most drastic one, but in some cases it's better to prevent further escalation.</p>
<p>Also note that you can use these rules, even when the other party doesn't agree to them. That's truly the power of these rules: you can apply them yourself even when the other side doesn't have the same constructive intentions. You'll notice that in most cases they'll even start copying your way of communication throughout a conflict, and start being constructive themselves, without even knowing.</p>
<p>Let's look at these rules one by one.</p>
<h3 id="right-or-wrong"><a href="#right-or-wrong" class="heading-anchor">#</a> Right or Wrong</h3>
<p>Rule number one: there seldom is one absolute truth. Most times there's only our personal interpretation of any given situation. All of us have a background and context; things like education, programming languages, frameworks, projects and workplace have a tangible impact on our opinion, our view of the world.</p>
<p>There's a lot of power in realizing that both you and the other party are not neutral. I even think this offers a significant learning opportunity: a conflict where both parties are open to the context of the other one can result in valuable lessons for both.</p>
<p>We're only  into rule one, and we've already identified a secondary goal: we can not only prevent conflicts from devolving into chaos, but we can seize the given opportunities to learn and grow. Even when the other party isn't interested in your context, it's still possible for you to grow.</p>
<h3 id="perspective"><a href="#perspective" class="heading-anchor">#</a> Perspective</h3>
<p>You're on the internet, written text can — and will — be interpreted in other ways than intended. I'd say that written text is one of the worst mediums to resolve conflicts with, since there's very little nuance you can make with dry text.</p>
<p>This is why people on the internet often come across as more rude than they'd be in real life. While many simply forget about the downsides of text, some know it very well and abuse that "freedom" the internet gives. The way some people act online is mind-boggling to me: surely they can't be like this in real life? Realizing this reality will help you put heated conflicts into perspective.</p>
<p>But there's also something to say the other way around: you have to make sure the other party doesn't misinterpret what you wrote. That's why I try to explain my perspective clearly enough when dealing with a conflict. It often looks something like this:</p>
<p>"<em>I want to make sure this doesn't come across as rude. I genuinely believe my point of view is the correct one, but I don't want to insult you by phrasing it in a rude or hurtful way.</em>"</p>
<p>Addressing your perspective and acknowledging that there can be differences is often enough to defuse tensions entirely.</p>
<h3 id="expectations-instead-of-assumptions"><a href="#expectations-instead-of-assumptions" class="heading-anchor">#</a> Expectations instead of assumptions</h3>
<p>When reading someone's comments, you might be inclined to assume an undertone, an emotion, maybe even an unspoken opinion. These assumptions might trigger you in writing a more offensive response. You should be aware that all of this can happen unconsciously, and protect yourself from it.</p>
<p>The most effective way of doing so is by describing how you interpreted any given kind of text. Next you should allow the other party to correct your assumptions.</p>
<p>"<em>I interpreted what you've written here as such and such, and want to make it clear that my answer is based on that interpretation. If you didn't mean it the way I interpreted it, please let me know.</em>"</p>
<p>From your point of view, you can be one step ahead and clarify your emotions and possible underlying feelings within the text. Furthermore, by reviewing what you've written, you can often identify parts that might be misconstrued and rewrite them. In some cases it even helps identify that you as well were driven by emotions without knowing and help prevent further escalation by rephrasing before posting.</p>
<h3 id="conflict-resolving"><a href="#conflict-resolving" class="heading-anchor">#</a> Conflict resolving</h3>
<p>One important thing to keep in mind at all times is that resolving a conflict doesn't mean all parties have to agree. It's perfectly fine to step away without agreement. There are conflicts that can't be resolved, and you'll have to find a way of dealing with such situations. Sometimes this means that you both agree to disagree, but other times it can also result in one of the parties stepping away from a project or community. Conflict resolving can be drastic indeed, but it should always be done in a respectful and civilized manner.</p>
<p>If you keep the goal of resolving a conflict in mind, you can steer the conversation in the right way.</p>
<h3 id="the-power-of-silence"><a href="#the-power-of-silence" class="heading-anchor">#</a> The power of silence</h3>
<p>Like I said before, the fifth rule is the emergency break. There are conflicts that you don't want to engage in or where the other party doesn't seem to be open to any kind of other opinion. You'll always have the power to simply step away from those conversations.</p>
<p>In such cases, it would be most polite to let the other party know you won't be engaging this conversation any further, but there might be cases where even such a message wouldn't be welcome. Just step away. You don't <em>have</em> to reply, you don't <em>have</em> to engage. Decide what's worth your time and what's not.</p>
<p>You shouldn't consider "stepping away" as failing: in some cases it's actually the better and smarter thing to do.</p>
<h2 id="in-summary"><a href="#in-summary" class="heading-anchor">#</a> In summary</h2>
<ol>
<li>There is rarely one absolute truth, more often there are our interpretations, influenced by our personal context.</li>
<li>Written text is one of the worst mediums to accurately describe your feelings. Use text to your advantage and clearly describe what your intentions are.</li>
<li>Voice your assumptions instead of letting them guide you unintentionally.</li>
<li>Resolving a conflict doesn't mean you have to agree with each other.</li>
<li>If all else fails, you have the power to step away.</li>
</ol>
<p><div class="sidenote">
    <p>
        Thanks for reading! This post is part of my "Dev Diaries" series where I write about my own and personal experiences as a developer. Would you like to read some more?
    </p>

    <ul>
        <li><a href="/blog/dont-get-stuck">Don't get stuck</a></li>
        <li><a href="/blog/dont-write-your-own-framework">Don't write your own framework</a></li>
        <li><a href="/blog/when-i-lost-a-few-hundred-leads">When I lost a few hundred leads</a></li>
        <li><a href="/blog/how-to-be-right-on-the-internet">How to be right on the internet</a></li>
    </ul>

    <p>

        If you want to stay up to date about what's happening on this blog, you can follow me
        <a href="https://mobile.twitter.com/brendt_gd" target="_blank" rel="noopener noreferrer">on Twitter</a> or subscribe to my newsletter:
    </p>

    <form action="https://mail.stitcher.io/subscribe/81fa83d0-4a0b-4eff-b897-f6ce51dfb7f0" method="post" class="newsletter-form">
        <label for="email">Email</label>
        <input type="email" name="email"/>
        <button type="submit" class="cta cta-small">Subscribe</button>
    </form>
</div>
</p>
 ]]></summary>

                <updated>2020-12-31T00:00:00+00:00</updated>
            </entry>
                                <entry>
                <title><![CDATA[ When I lost a few hundred leads ]]></title>

                <link rel="alternate" href="https://stitcher.io/blog/when-i-lost-a-few-hundred-leads"/>

                <id>https://www.stitcher.io/blog/when-i-lost-a-few-hundred-leads</id>

                <author>
                    <name><![CDATA[ Brent Roose ]]></name>
                </author>

                <summary type="html"><![CDATA[ <div class="sidenote">
<h2>Before you start…</h2>
<p>Some readers have reached out to me and talked about solutions to the technical problems described in this post. I'd like to make clear that this post isn't about how to deal with or prevent bugs. It's about how I felt during a rather bad and stressful time, to talk about emotions and how to self-reflect and improve. With that out of the way, I hope you find value in this post.</p>
</div>
<p>I went home that evening anxious and stressed out. I'm not ashamed to admit I had to fight back a few tears on the train during my commute back home. Those weren't tears of sadness, mind you, rather tears of fear.</p>
<p>It had only been a few hours since my manager came to me saying that one of our clients complained that someone called them, saying they expected to have gotten a call after filling in the contact form and they never did.
They asked me to look into it.</p>
<p>See, this client sold a particular service to people, and they could fill in a form on the website to ask for a quote. Depending on their residence the closest office would call them back after they'd filled in that form. This wasn't a super complex form, it had three steps, and asked some information about people's project, some check boxes, radio buttons and drop downs — you've seen such forms before. Every request submitted is called "a lead" (a potential client), hence the name we internally gave the form: "the lead form".</p>
<p>When one of those leads called our client's office to complain about never receiving a phone call, the office manager was clever enough to ask for the lead's email address, making my job easier. All I had to do was go in the database, find the form submission for that lead's email address, and look at what went wrong.</p>
<p><div class="ad-container">
    <script async type="text/javascript" src="//cdn.carbonads.com/carbon.js?serve=CK7ICK3W&placement=stitcherio" id="_carbonads_js"></script>
</div>
</p>
<p>As a junior developer, my first thought was to look for external problems. Every time a lead submitted the form, an email would be sent to the corresponding office with all information, my guess was that either that email ended up in spam for some reason, or that maybe there had been a problem with our mailing service.</p>
<p>I couldn't find an entry in our database for that email address though.</p>
<p>"The address is probably wrong" — I remember thinking. See, the first thing that happens when the form is submitted is that its contents are saved into the database. That way we always have a copy of the data, in case something went wrong with mailing the office. So I told my manager to contact our client, telling them the email address they gave me is probably wrong, and went on with my day.</p>
<p>A few minutes later and my manager tells me that the email address is absolutely correct.</p>
<p>Ok, that means that the form was never submitted then? I sigh out loud: "it probably has to do with all third party javascript trackers and marketing tools we're using on the site". Team marketing was quite into using A/B testing libraries or tools like Mouseflow to record a user's screen so that they can analyse how people interact with the website. I wouldn't be surprised if one of those tools messed up the form submission.</p>
<p>So I call their marketing team and ask if they know anything more about this lead. They tell me they'll look into it and I, again, went on with my day. An hour goes by and I've already forgotten about the whole affair thanks to my "not my problem" mentality. Suddenly my manager's back again: team marketing wants to speak to me and he hands me the phone.</p>
<p>They have found the screen recording for that particular lead. Around 50% of all sessions were recorded, so we were pretty lucky finding it. It turns out the lead actually submitted the form, they'll send me the recording now.</p>
<p>This is the point where I start to consider that it <em>might</em> be my problem after all, but let's not jump to conclusions. I watch the recording, and yes indeed: the lead fills in step one, step two, step three, submits it and… that's not the right page. He should see a "thank you" page after submitting the form. Instead he sees a page with the header and footer of the website, but without any content on it.</p>
<p>That's not good.</p>
<p>I go into the test environment and submit the form with exactly the same data. I end up on the same blank page, and sure enough my submission isn't saved into the database. is this page? I've never seen it before. So I look at the logs. An error: <code>null passed instead of boolean</code>. That's a type error deep down in <em>my</em> code.</p>
<hr />
<p>Before moving on, let me tell you about the error, why it happened and why no one knew of it.</p>
<p>So this form had a bunch of input fields, including check boxes. Whenever a lead request was submitted, we captured the data and prepared to save it into the database. It looked something like this:</p>
<pre><code class="language-php hljs php" data-lang="php">$formSubmission = <span class="hljs-keyword">new</span> <span class="hljs-highlight  type">FormSubmission</span>();

$formSubmission-&gt;<span class="hljs-highlight  prop">name</span> = $form-&gt;<span class="hljs-highlight  prop">get</span>(<span class="hljs-string">'name'</span>);
$formSubmission-&gt;<span class="hljs-highlight  prop">email</span> = $form-&gt;<span class="hljs-highlight  prop">get</span>(<span class="hljs-string">'email'</span>);
<span class="hljs-comment">// …</span>

$entityManager-&gt;<span class="hljs-highlight  prop">save</span>($formSubmission);</code></pre>
<p>The bug, simple as it may sound, was a simple typo:</p>
<pre><code class="language-javascript hljs javascript" data-lang="javascript">$formSubmission-&gt;<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">prop&gt;</span>more_feedback_required<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span></span> = 
    $form-&gt;<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">prop&gt;</span>get<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span></span>(<span class="hljs-string">'more_feedback_requierd'</span>);</code></pre>
<p>Can you spot the <code>requierd</code> when calling <code>$form-><span class="hljs-highlight  prop">get</span>()</code>?</p>
<p>As it turns out, our form library — written by us for our in-house framework — wouldn't give an error when you're trying to get an unknown property, it simply returns <code>null</code>.</p>
<p>The database however expected a boolean value, and thus an error was thrown.</p>
<p>This isn't that big of a problem, albeit not that no one knew of it. The second part of the bug was the empty page: this one was served directly from nginx whenever an error would occur — we didn't want visitors to be bothered by error pages. It turned out that one of my colleagues had set it up a few months ago, and I didn't know of it. When a lead saw the empty page, they probably thought the form was submitted just fine, they didn't know there should be a "thank you" page instead.</p>
<p>Next, we never saw the error happening during testing, because the erroneous code only ran in specific cases, and no one thought about testing those. The form itself was unit tested, but not all edge cases were.</p>
<p>Finally we weren't automatically notified of errors in production, which meant no one knew about it until the client complained. At the time, the company didn't do any error monitoring on production, that might seem completely bonkers, but yes: it happens.</p>
<hr />
<p>I deployed a fix for the typo (which I wrote to begin with), I told my manager about the problem and that it's fixed. In turn he asks me how many people were affected by it. I tell him to check up on this. I go back to my desk and check when this bug was committed and deployed to production. A month ago.</p>
<p>I remember a sickening feeling starting to rise from this point on.</p>
<p>I check the log files, and scan for the error. I'm stunned for a few moments. It's not just a few errors. It's hundreds. Hundreds of leads that we lost over the past month. I started to shake a little. After a few minutes I reported back to my manager. I again explained the bug itself, why it had been undetected for a month, and finally gave him the hard numbers. There was nothing we could do: those leads were lost.</p>
<h2 id="the-aftermath"><a href="#the-aftermath" class="heading-anchor">#</a> The aftermath</h2>
<p>The following days were probably the most stressful in my career up until today. I'm thankful that no one blamed me directly: we all agreed that this was the team's responsibility and not my own. Still I was the one who wrote the typo, I was the one tasked with testing and deploying the changes to the form a month earlier.</p>
<p>I can honestly tell you that I had a hard time dealing with this feeling of guilt, even though my manager and colleagues were understanding.</p>
<p>I could of course point fingers to others: we shouldn't have used our own framework with its quirky form validation; devops should have installed some kind of error tracking; the empty error page should have been more clear. I admit I thought all these thoughts the days after, I even felt anger towards some of my colleagues for a while. But I learned that anger didn't get me anywhere. I better spent my time looking at how <em>I</em> could learn from all of this, instead of pointing fingers at others.</p>
<p>So, after a few weeks of processing, what felt to me like a trauma; I found the courage to look at what I could have done differently. What I could learn from this.</p>
<p>First of: ask my colleagues for reviews. It doesn't matter if I'm a junior or senior; a fresh look on my code is always valuable. I've learned that most people are busy themselves and won't help you unless you specifically ask them to. To this day I often ask my colleagues to review a PR. Even when I might have more years of experience, I highly value my colleagues' input. No matter how long I've been doing this, I still make mistakes, and I shouldn't be too proud to admit that.</p>
<p>Next: I don't use tools I don't know or trust. This <a href="/blog/dont-write-your-own-framework">wasn't the first time</a> I stumbled upon the limitations of a custom, in-house framework. I've learned that it's better to use tools that are supported by a large open source community. It wasn't my decision which framework to use on that particular project, but it was a requirement for my next job: I only want to use well-known, community supported frameworks when it comes to client projects in production.</p>
<p>Third: I should test better myself, I shouldn't assume that a checkbox is just a checkbox. I should be skeptical towards every line of code I write. This incident is one of the reasons I came to love strongly typed systems more and more. I don't want a language that tries to be smart and juggle types here and there. I want a language that crashes hard when something happens that shouldn't happen, the stronger the type system, the better.</p>
<p>Next: I tend to code more defensively. I constantly ask myself: are null values possible? Anything unexpected that could happen? I prefer to add an extra check rather than assuming it'll work fine.</p>
<p>And finally: I learned not to blame others first. I think it's a trait of many junior developers to think the problem happened somewhere else. It was an important and humbling lesson to learn, and I tend to be more cautious when blaming an external party these days.</p>
<hr />
<p>It's strange writing this blogpost. I was a young developer when this happened to me, and it's something that I think has had a lasting impact on my programming career. I also think we don't talk about this often enough. I lay awake at night thinking about how angry the client would be, what the impact would be on the company I worked for. Even though I realise most of my feelings were exaggerated, they still were there. I wasn't able to just turn them off. I felt fear and shame, and had little people to talk about it.</p>
<p>We write about our success stories, but what about our mistakes? What about the impact of these kinds of experiences on our mental health? Many of us in the software industry are introverts, or feel like we can't talk about our deepest emotions.</p>
<p>Let's keep an eye out for each other instead.</p>
<p><div class="sidenote">
    <p>
        Thanks for reading! This post is part of my "Dev Diaries" series where I write about my own and personal experiences as a developer. Would you like to read some more?
    </p>

    <ul>
        <li><a href="/blog/dont-get-stuck">Don't get stuck</a></li>
        <li><a href="/blog/dont-write-your-own-framework">Don't write your own framework</a></li>
        <li><a href="/blog/when-i-lost-a-few-hundred-leads">When I lost a few hundred leads</a></li>
        <li><a href="/blog/how-to-be-right-on-the-internet">How to be right on the internet</a></li>
    </ul>

    <p>

        If you want to stay up to date about what's happening on this blog, you can follow me
        <a href="https://mobile.twitter.com/brendt_gd" target="_blank" rel="noopener noreferrer">on Twitter</a> or subscribe to my newsletter:
    </p>

    <form action="https://mail.stitcher.io/subscribe/81fa83d0-4a0b-4eff-b897-f6ce51dfb7f0" method="post" class="newsletter-form">
        <label for="email">Email</label>
        <input type="email" name="email"/>
        <button type="submit" class="cta cta-small">Subscribe</button>
    </form>
</div>
</p>
 ]]></summary>

                <updated>2020-11-29T00:00:00+00:00</updated>
            </entry>
                                <entry>
                <title><![CDATA[ Announcing Blogs for Devs ]]></title>

                <link rel="alternate" href="https://stitcher.io/blog/blogs-for-devs"/>

                <id>https://www.stitcher.io/blog/blogs-for-devs</id>

                <author>
                    <name><![CDATA[ Brent Roose ]]></name>
                </author>

                <summary type="html"><![CDATA[ <p><div class="sidenote blogs-for-devs index">
    <h2>Index</h2>

    <ul>
        <li><a href="/blogs-for-devs/01-intro">01 – Intro</a></li>
        <li><a href="/blogs-for-devs/02-content-is-king">02 – Content is King</a></li>
        <li><a href="/blogs-for-devs/03-the-stack">03 – The Stack</a></li>
        <li><a href="/blogs-for-devs/04-your-audience">04 – Your Audience</a></li>
        <li><a href="/blogs-for-devs/05-interaction">05 – Interaction</a></li>
        <li><a href="/blogs-for-devs/06-stay-in-touch">06 – Stay in Touch</a></li>
        <li><a href="/blogs-for-devs/07-be-searchable">07 – Be Searchable</a></li>
        <li><a href="/blogs-for-devs/08-analytics">08 – Analytics</a></li>
        <li><a href="/blogs-for-devs/09-social-channels">09 – Social Channels</a></li>
        <li><a href="/blogs-for-devs/10-monetize">10 – Monetize</a></li>
    </ul>
</div>
</p>
<p>When I started my blog in 2017 I never imagined it'd be as successful as now. I never seriously invested in SEO or did any aggressive marketing campaigns, and yet here we are: closing in to 2 million sessions, and the end is no where near.</p>
<p><a target="_blank" href="/resources/img/blogs-for-devs/01-01.png"><img src="/resources/img/blogs-for-devs/01-01.png" srcset="/resources/img/blogs-for-devs/01-01-1341x799.png 1341w, /resources/img/blogs-for-devs/01-01-948x565.png 948w, /resources/img/blogs-for-devs/01-01-670x399.png 670w, /resources/img/blogs-for-devs/01-01-1500x894.png 1500w, /resources/img/blogs-for-devs/01-01-1161x691.png 1161w" sizes="" alt="Cumulated amount of sessions per week">Cumulated amount of sessions per week</img></a></p>
<p>I did of course do something to put my content out there. Over the years I found ways to reach people who might be interested in reading what I wrote. But still, there wasn't much effort involved: I'd share a link from time to time; I'd listen to feedback (a thick skin is an asset if you're writing a blog, people on the internet <em>love</em> to tell you you're wrong); I tried to improve my writing.</p>
<p>I guess the reason it feels like little effort is because it's something I actually really enjoy doing. Even though I'm making some money with my blog now, I still consider it a hobby project. There has never been any pressure to write when I didn't want to. I ignored most of the "blogging best practices" because they asked way too much of my free time. I managed to find my own way of doing things, and it turns out it works.</p>
<p>Throughout this series I'll share everything I learned during my blogging journey with you: how to start, how to grow, how to analyse, how to engage with your audience, how to make money by writing on the internet. I'm a developer so some topics will be technical, but even if you've got no programming experience, you'll be able to learn lots — I'll keep things as simple as possible.</p>
<p>So, are you a blogger? Has it been your long-time dream of starting a blog? I'm happy to share my experience with you!</p>
<p><div class="sidenote blogs-for-devs">
    <h2>Do you enjoy this series?</h2>

    <p>I write about much more technical and blog related topics, if you want to you can subscribe to stay up to date about my content.</p>

    <form
            action="https://mail.stitcher.io/subscribe/81fa83d0-4a0b-4eff-b897-f6ce51dfb7f0"
            method="post"
            class="newsletter-form"
            target="_blank"
    >
        <input type="hidden" name="tags" value="blogs-for-devs">
        <label for="email">Email</label>
        <input type="email" name="email"/>
        <button type="submit" class="cta cta-small">Keep me posted!</button>
    </form>

    <em class="small center">You can also subscribe via <a href="/blogs-for-devs/rss" target="_blank" rel="noopener noreferrer">RSS</a>.</em>
    <br>
</div>
</p>
 ]]></summary>

                <updated>2020-11-28T00:00:00+00:00</updated>
            </entry>
                                <entry>
                <title><![CDATA[ Upgrade to PHP 8 with Homebrew on Mac ]]></title>

                <link rel="alternate" href="https://stitcher.io/blog/php-8-upgrade-mac"/>

                <id>https://www.stitcher.io/blog/php-8-upgrade-mac</id>

                <author>
                    <name><![CDATA[ Brent Roose ]]></name>
                </author>

                <summary type="html"><![CDATA[ <p><div class="sidenote">
    <p>
        Tired of managing servers?
        Check out <a href="https://gumroad.com/a/575280243" ping="https://analytics.stitcher.io/r" target="_blank" rel="noopener noreferrer">Serverless Visually Explained</a> by Matthieu Napoli and learn how to create scalable PHP applications on AWS.
    </p>
</div>
</p>
<h2 id="upgrading-with-homebrew"><a href="#upgrading-with-homebrew" class="heading-anchor">#</a> Upgrading with Homebrew</h2>
<p>Start by making sure brew is up-to-date:</p>
<pre><code class="language-bash hljs bash" data-lang="bash">brew update</code></pre>
<p>Next, upgrade PHP. You can either use the built-in php recipe, use tap <code>shivammathur/homebrew-php</code>. I'd recommend the second approach, since it allows you to easily install several PHP versions and switch between them.</p>
<h3 id="normal-upgrade"><a href="#normal-upgrade" class="heading-anchor">#</a> Normal upgrade</h3>
<pre><code class="language-bash hljs bash" data-lang="bash">brew upgrade php</code></pre>
<h3 id="upgrade-with-shivammathur/homebrew-php"><a href="#upgrade-with-shivammathur/homebrew-php" class="heading-anchor">#</a> Upgrade with <code>shivammathur/homebrew-php</code></h3>
<pre><code class="language-bash hljs bash" data-lang="bash">brew tap shivammathur/php
brew install shivammathur/php/php@8.0</code></pre>
<p>To switch between versions, use the following command:</p>
<pre><code class="language-bash hljs bash" data-lang="bash">brew link --overwrite --force php@8.0</code></pre>
<p>You can read more in the <a target="_blank" href="https://github.com/shivammathur/homebrew-php">repository</a>.</p>
<h3 id="next-steps"><a href="#next-steps" class="heading-anchor">#</a> Next steps</h3>
<p>Check the current version by running <code>php -v</code>:</p>
<pre><code class="language-bash hljs bash" data-lang="bash">php -v</code></pre>
<p>Restart Nginx or Apache:</p>
<pre><code class="language-bash hljs bash" data-lang="bash">sudo nginx -s reload</code></pre>
<pre><code class="language-bash hljs bash" data-lang="bash">sudo apachectl restart</code></pre>
<p>And make sure that your local web server also uses PHP 8 by visiting this script:</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-comment"># index.php, accessible to your web server</span>

<span class="hljs-highlight  prop">phpinfo</span>();</code></pre>
<p><em class="small center">The version should show <code>8.0.x</code>.</em></p>
<p>Note: if you're using Laravel Valet, please keep on reading,
you need some extra steps in order for the web server to properly work.</p>
<p><div class="ad-container">
    <script async type="text/javascript" src="//cdn.carbonads.com/carbon.js?serve=CK7ICK3W&placement=stitcherio" id="_carbonads_js"></script>
</div>
</p>
<h2 id="valet"><a href="#valet" class="heading-anchor">#</a> Valet</h2>
<p>If you're using Laravel Valet, you should do the following steps to upgrade it:</p>
<pre><code class="language-bash hljs bash" data-lang="bash">composer global update</code></pre>
<p>You can use <code>valet use</code> to switch between PHP versions:</p>
<pre><code class="language-bash hljs bash" data-lang="bash">valet use php@8.0
valet use php@7.4</code></pre>
<p>Note that if you're using an older Valet version (prior to v2.13.18), when switching from PHP 8 to PHP 7.4 there was a bug that didn't properly update the changes. This was fixed in Valet 2.13.18 so that it now automatically removes the valet socket after having run <code>valet use php@7.4</code>. If you need to do this manually, you can run:</p>
<pre><code class="language-properties hljs properties" data-lang="properties"><span class="hljs-attr">cd</span> <span class="hljs-string">~/.config/valet</span>
<span class="hljs-attr">rm</span> <span class="hljs-string">valet.sock</span>
<span class="hljs-attr">valet</span> <span class="hljs-string">restart</span></code></pre>
<h2 id="extensions"><a href="#extensions" class="heading-anchor">#</a> Extensions</h2>
<p>PHP extensions are installed using pecl. I personally use Imagick, Redis and Xdebug. They can be installed like so:</p>
<pre><code class="language-bash hljs bash" data-lang="bash">pecl install imagick
pecl install redis
pecl install xdebug</code></pre>
<p>You can run <code>pecl list</code> to see which extensions are installed:</p>
<pre><code class="language-bash hljs bash" data-lang="bash">pecl list

<span class="hljs-comment"># Installed packages, channel pecl.php.net:</span>
<span class="hljs-comment"># =========================================</span>
<span class="hljs-comment"># Package Version State</span>
<span class="hljs-comment"># imagick 3.4.4   stable</span>
<span class="hljs-comment"># redis   5.1.1   stable</span>
<span class="hljs-comment"># xdebug  2.8.0   stable</span></code></pre>
<p>You can search for other extensions using <code>pecl search</code>:</p>
<pre><code class="language-bash hljs bash" data-lang="bash">pecl search pdf

<span class="hljs-comment"># Retrieving data...0%</span>
<span class="hljs-comment"># ..</span>
<span class="hljs-comment"># Matched packages, channel pecl.php.net:</span>
<span class="hljs-comment"># =======================================</span>
<span class="hljs-comment"># Package Stable/(Latest) Local</span>
<span class="hljs-comment"># pdflib  4.1.2 (stable)        Creating PDF on the fly with the PDFlib library</span></code></pre>
<p>Make sure to restart your web server after installing new packages:</p>
<pre><code class="language-bash hljs bash" data-lang="bash">sudo nginx -s reload</code></pre>
<pre><code class="language-bash hljs bash" data-lang="bash">sudo apachectl restart</code></pre>
<p>If you're using Laravel Valet, you should restart it as well.</p>
<pre><code class="language-bash hljs bash" data-lang="bash">valet restart</code></pre>
<p>Make sure all extensions are correctly installed and loaded by checking both your PHP webserver and CLI installs:</p>
<pre><code class="language-bash hljs bash" data-lang="bash">php -i | grep redis</code></pre>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-highlight  prop">var_dump</span>(<span class="hljs-highlight  prop">extension_loaded</span>(<span class="hljs-string">'redis'</span>));</code></pre>
<p>If extensions aren't properly loaded, there are two easy fixes.</p>
<p>First, make sure the extensions are added in the correct ini file. You can run <code>php --ini</code> to know which file is loaded:</p>
<pre><code class="language-groovy hljs groovy" data-lang="groovy">Configuration File (php.ini) <span class="hljs-string">Path:</span> <span class="hljs-highlight  blue"><span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/etc/</span>php<span class="hljs-regexp">/7.4&lt;/</span>hljs&gt;
Loaded Configuration <span class="hljs-string">File:</span>         <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/etc/</span>php<span class="hljs-regexp">/7.4/</span>php.ini
Scan <span class="hljs-keyword">for</span> additional .ini files <span class="hljs-string">in:</span> <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/etc/</span>php<span class="hljs-regexp">/7.4/</span>conf.d
Additional .ini files <span class="hljs-string">parsed:</span>      <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/etc/</span>php<span class="hljs-regexp">/7.4/</span>conf.d/ext-opcache.ini,
<span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/etc/</span>php<span class="hljs-regexp">/7.4/</span>conf.d/php-memory-limits.ini</code></pre>
<p>Now check the ini file:</p>
<pre><code class="language-ini hljs ini" data-lang="ini"><span class="hljs-attr">extension</span>=<span class="hljs-string">"redis.so"</span>
<span class="hljs-attr">extension</span>=<span class="hljs-string">"imagick.so"</span>
<span class="hljs-attr">zend_extension</span>=<span class="hljs-string">"xdebug.so"</span></code></pre>
<p>Note that if you're testing installed extensions via the CLI, you don't need to restart nginx, apache or Valet when making changes to ini settings.</p>
<p>The second thing you can do, if you're updating from an older PHP version which also used pecl to install extension; is to reinstall every extension individually.</p>
<pre><code class="language-bash hljs bash" data-lang="bash">pecl uninstall imagick
pecl install imagick</code></pre>
<h2 id="last-step"><a href="#last-step" class="heading-anchor">#</a> Last step</h2>
<p>Finally you should test and upgrade your projects for <a href="/blog/new-in-php-8">PHP 8 compatibility</a>.</p>
 ]]></summary>

                <updated>2020-11-26T00:00:00+00:00</updated>
            </entry>
                                <entry>
                <title><![CDATA[ What&#039;s new in PHP 8 ]]></title>

                <link rel="alternate" href="https://stitcher.io/blog/new-in-php-8"/>

                <id>https://www.stitcher.io/blog/new-in-php-8</id>

                <author>
                    <name><![CDATA[ Brent Roose ]]></name>
                </author>

                <summary type="html"><![CDATA[ <p>PHP 8 is here! It was released on November 26, 2020. You can <a target="_blank" href="https://www.php.net/releases/8.0/en.php">download it here</a>. It's a new major version, which means that it will introduce some breaking changes, as well as lots of new features and performance improvements.</p>
<p>Because of the breaking changes, there's a higher chance you'll need to make some changes in your code to get it running on PHP 8. If you've kept up to date with the latest releases though, the upgrade shouldn't be too hard, since most breaking changes were deprecated before in the 7.* versions. And don't worry, all these deprecations are listed in this post.</p>
<p>Besides breaking changes, PHP 8 also brings a nice set of new features such as <a href="#jit-rfc">the JIT compiler</a>, <a href="#union-types-rfc">union types</a>, <a href="#attributes-rfc">attributes</a>, and more.</p>
<p><div class="sidenote">
    <p>
        Tired of managing servers?
        Check out <a href="https://gumroad.com/a/575280243" ping="https://analytics.stitcher.io/r" target="_blank" rel="noopener noreferrer">Serverless Visually Explained</a> by Matthieu Napoli and learn how to create scalable PHP applications on AWS.
    </p>
</div>
</p>
<h2 id="new-features"><a href="#new-features" class="heading-anchor">#</a> New features</h2>
<p>Let's start with all new features, it's quite a list!</p>
<hr />
<h3 id="union-types-rfc"><a href="#union-types-rfc" class="heading-anchor">#</a> Union types <small><a target="_blank" href="https://wiki.php.net/rfc/union_types_v2">RFC</a></small></h3>
<p>Given the dynamically typed nature of PHP, there are lots of cases where union types can be useful. Union types are a collection of two or more types which indicate that either one of those can be used.</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">foo</span><span class="hljs-params">(<span class="hljs-highlight  type">Foo|Bar</span> $input)</span>: <span class="hljs-highlight  type"><span class="hljs-title">int</span>|<span class="hljs-title">float</span></span></span>;</code></pre>
<p>Note that <code><span class="hljs-highlight  type">void</span></code> can never be part of a union type, since it indicates "no return value at all". Furthermore, <code>nullable</code> unions can be written using <code><span class="hljs-highlight  type">|null</span></code>, or by using the existing <code><span class="hljs-highlight  type">?</span></code> notation:</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">foo</span><span class="hljs-params">(<span class="hljs-highlight  type">Foo|null</span> $foo)</span>: <span class="hljs-title">void</span></span>;

<span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">bar</span><span class="hljs-params">(<span class="hljs-highlight  type">?Bar</span> $bar)</span>: <span class="hljs-title">void</span></span>;</code></pre>
<p><div class="ad-container">
    <script async type="text/javascript" src="//cdn.carbonads.com/carbon.js?serve=CK7ICK3W&placement=stitcherio" id="_carbonads_js"></script>
</div>
</p>
<h3 id="jit-rfc"><a href="#jit-rfc" class="heading-anchor">#</a> JIT <small><a target="_blank" href="https://wiki.php.net/rfc/jit">RFC</a></small></h3>
<p>The JIT — just in time — compiler promises significant performance improvements, albeit not always within the context of web requests. I've done my <a href="/blog/jit-in-real-life-web-applications">own benchmarks</a> on real-life web applications, and it seems like the JIT doesn't make that much of a difference, if any, on those kinds of PHP projects.</p>
<p>If you want to know more about what the JIT can do for PHP, you can read another post I wrote about it <a href="/blog/php-jit">here</a>.</p>
<hr />
<h3 id="the-nullsafe-operator-rfc"><a href="#the-nullsafe-operator-rfc" class="heading-anchor">#</a> The nullsafe operator <small><a target="_blank" href="https://wiki.php.net/rfc/nullsafe_operator">RFC</a></small></h3>
<p>If you're familiar with the <a href="/blog/shorthand-comparisons-in-php#null-coalescing-operator">null coalescing operator</a> you're already familiar with its shortcomings: it doesn't work on method calls. Instead you need intermediate checks, or rely on <code><span class="hljs-highlight  prop">optional</span></code> helpers provided by some frameworks:</p>
<pre><code class="language-php hljs php" data-lang="php">$startDate = $booking-&gt;<span class="hljs-highlight  prop">getStartDate</span>();

$dateAsString = $startDate ? $startDate-&gt;<span class="hljs-highlight  prop">asDateTimeString</span>() : <span class="hljs-keyword">null</span>;</code></pre>
<p>With the addition of the nullsafe operator, we can now have null coalescing-like behaviour on methods!</p>
<pre><code class="language-php hljs php" data-lang="php">$dateAsString = $booking-&gt;<span class="hljs-highlight  prop">getStartDate</span>()?-&gt;<span class="hljs-highlight  prop">asDateTimeString</span>();</code></pre>
<p>You can read all about the nullsafe operator <a href="/blog/php-8-nullsafe-operator">here</a>.</p>
<hr />
<h3 id="named-arguments-rfc"><a href="#named-arguments-rfc" class="heading-anchor">#</a> Named arguments <small><a target="_blank" href="https://wiki.php.net/rfc/named_params">RFC</a></small></h3>
<p><a href="/blog/php-8-named-arguments">Named arguments</a> allow you to pass in values to a function, by specifying the value name, so that you don't have to take their order into consideration, and you can also skip optional parameters!</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">foo</span><span class="hljs-params">(<span class="hljs-highlight  type">string</span> $a, <span class="hljs-highlight  type">string</span> $b, ?<span class="hljs-highlight  type">string</span> $c = null, ?<span class="hljs-highlight  type">string</span> $d = null)</span> 
</span>{ <span class="hljs-comment">/* … */</span> }

<span class="hljs-highlight  prop">foo</span>(
    <span class="hljs-highlight  prop">b</span>: <span class="hljs-string">'value b'</span>, 
    <span class="hljs-highlight  prop">a</span>: <span class="hljs-string">'value a'</span>, 
    <span class="hljs-highlight  prop">d</span>: <span class="hljs-string">'value d'</span>,
);</code></pre>
<p>You can read about them in-depth <a href="/blog/php-8-named-arguments">in this post</a>.</p>
<hr />
<h3 id="attributes-rfc"><a href="#attributes-rfc" class="heading-anchor">#</a> Attributes <small><a target="_blank" href="https://wiki.php.net/rfc/attributes_v2">RFC</a></small></h3>
<p><a href="/blog/attributes-in-php-8">Attributes</a>, commonly known as <em>annotations</em> in other languages, offers a way to add meta data to classes, without having to parse docblocks.</p>
<p>As for a quick look, here's an example of what attributes look like, from the RFC:</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-keyword">use</span> <span class="hljs-title">App</span>\<span class="hljs-title">Attributes</span>\<span class="hljs-title">ExampleAttribute</span>;

<span class="hljs-comment">#[<span class="hljs-highlight  type">ExampleAttribute</span>]</span>
<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Foo</span>
</span>{
    <span class="hljs-comment">#[<span class="hljs-highlight  type">ExampleAttribute</span>]</span>
    <span class="hljs-keyword">public</span> <span class="hljs-keyword">const</span> FOO = <span class="hljs-string">'foo'</span>;
 
    <span class="hljs-comment">#[<span class="hljs-highlight  type">ExampleAttribute</span>]</span>
    <span class="hljs-keyword">public</span> $x;
 
    <span class="hljs-comment">#[<span class="hljs-highlight  type">ExampleAttribute</span>]</span>
    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">foo</span><span class="hljs-params">(<span class="hljs-highlight  comment">#[</span><span class="hljs-highlight  type">ExampleAttribute</span><span class="hljs-highlight  comment">]</span> $bar)</span> </span>{ }
}</code></pre>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-comment">#[<span class="hljs-highlight  type">Attribute</span>]</span>
<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ExampleAttribute</span>
</span>{
    <span class="hljs-keyword">public</span> $value;
 
    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span><span class="hljs-params">($value)</span>
    </span>{
        <span class="hljs-keyword">$this</span>-&gt;value = $value;
    }
}</code></pre>
<p>Note that this base <code><span class="hljs-highlight  type">Attribute</span></code> used to be called <code><span class="hljs-highlight  type">PhpAttribute</span></code> in the original RFC, but was changed with <a target="_blank" href="https://wiki.php.net/rfc/attribute_amendments">another RFC</a> afterwards. If you want to take a deep dive in how attributes work, and how you can build your own; you can read about <a href="/blog/attributes-in-php-8">attributes in depth</a> on this blog.</p>
<p><div class="author">
    Noticed a tpyo? You can submit a
    <a href="https://github.com/brendt/stitcher.io" target="_blank" rel="noopener noreferrer">PR</a> to fix it.

    If you want to stay up to date about what's happening on this blog, you can follow me
    <a href="https://mobile.twitter.com/brendt_gd" target="_blank" rel="noopener noreferrer">on Twitter</a> or subscribe to my newsletter:

    <form action="https://mail.stitcher.io/subscribe/81fa83d0-4a0b-4eff-b897-f6ce51dfb7f0" method="post" class="newsletter-form">
        <label for="newsletter-email-15">Email</label>
        <input type="email" name="email" id="newsletter-email-15"/>
        <button type="submit" class="cta cta-small">Subscribe</button>
    </form>
</div>
</p>
<h3 id="match-expression-rfc"><a href="#match-expression-rfc" class="heading-anchor">#</a> Match expression <small><a target="_blank" href="https://wiki.php.net/rfc/match_expression_v2">RFC</a></small></h3>
<p>You could call it the big brother of the <code>switch</code> expression: <code>match</code> can return values, doesn't require <code>break</code> statements, can combine conditions, uses strict type comparisons and doesn't do any type coercion.</p>
<p>It looks like this:</p>
<pre><code class="language-php hljs php" data-lang="php">$result = <span class="hljs-highlight  keyword">match</span>($input) {
    <span class="hljs-number">0</span> =&gt; <span class="hljs-string">"hello"</span>,
    <span class="hljs-string">'1'</span>, <span class="hljs-string">'2'</span>, <span class="hljs-string">'3'</span> =&gt; <span class="hljs-string">"world"</span>,
};</code></pre>
<p>You can read up on the match expression in detail, <a href="/blog/php-8-match-or-switch">over here</a>.</p>
<hr />
<h3 id="constructor-property-promotion-rfc"><a href="#constructor-property-promotion-rfc" class="heading-anchor">#</a> Constructor property promotion <small><a target="_blank" href="https://wiki.php.net/rfc/constructor_promotion">RFC</a></small></h3>
<p>This RFC adds syntactic sugar to create value objects or data transfer objects. Instead of specifying class properties and a constructor for them, PHP can now combine them into one.</p>
<p>Instead of doing this:</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Money</span> 
</span>{
    <span class="hljs-keyword">public</span> <span class="hljs-highlight  type">Currency</span> <span class="hljs-highlight  prop">$currency</span>;
 
    <span class="hljs-keyword">public</span> <span class="hljs-highlight  type">int</span> <span class="hljs-highlight  prop">$amount</span>;
 
    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span><span class="hljs-params">(
        <span class="hljs-highlight  type">Currency</span> $currency,
        <span class="hljs-highlight  type">int</span> $amount,
    )</span> </span>{
        <span class="hljs-keyword">$this</span>-&gt;<span class="hljs-highlight  prop">currency</span> = $currency;
        <span class="hljs-keyword">$this</span>-&gt;<span class="hljs-highlight  prop">amount</span> = $amount;
    }
}</code></pre>
<p>You can now do this:</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Money</span> 
</span>{
    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span><span class="hljs-params">(
        <span class="hljs-highlight  keyword">public</span> <span class="hljs-highlight  type">Currency</span> $currency,
        <span class="hljs-highlight  keyword">public</span> <span class="hljs-highlight  type">int</span> $amount,
    )</span> </span>{}
}</code></pre>
<p>There's a lot more to tell about property promotion, you can read about them <a href="/blog/constructor-promotion-in-php-8">in this dedicated post</a>.</p>
<hr />
<h3 id="new-static-return-type-rfc"><a href="#new-static-return-type-rfc" class="heading-anchor">#</a> New <code><span class="hljs-highlight  type">static</span></code> return type <small><a target="_blank" href="https://wiki.php.net/rfc/static_return_type">RFC</a></small></h3>
<p>While it was already possible to return <code><span class="hljs-highlight  type">self</span></code>, <code><span class="hljs-highlight  type">static</span></code> wasn't a valid return type until PHP 8. Given PHP's dynamically typed nature, it's a feature that will be useful to many developers.</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Foo</span>
</span>{
    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test</span><span class="hljs-params">()</span>: <span class="hljs-title">static</span>
    </span>{
        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-keyword">static</span>();
    }
}</code></pre>
<hr />
<h3 id="new-mixed-type-rfc"><a href="#new-mixed-type-rfc" class="heading-anchor">#</a> New <code><span class="hljs-highlight  type">mixed</span></code> type <small><a target="_blank" href="https://wiki.php.net/rfc/mixed_type_v2">RFC</a></small></h3>
<p>Some might call it a necessary evil: the <code><span class="hljs-highlight  type">mixed</span></code> type causes many to have mixed feelings. There's a very good argument to make for it though: a missing type can mean lots of things in PHP:</p>
<ul>
<li>A function returns nothing or null</li>
<li>We're expecting one of several types</li>
<li>We're expecting a type that can't be type hinted in PHP</li>
</ul>
<p>Because of the reasons above, it's a good thing the <code><span class="hljs-highlight  type">mixed</span></code> type is added. <code><span class="hljs-highlight  type">mixed</span></code> itself means one of these types:</p>
<ul>
<li>
<code><span class="hljs-highlight  type">array</span></code>
</li>
<li>
<code><span class="hljs-highlight  type">bool</span></code>
</li>
<li>
<code><span class="hljs-highlight  type">callable</span></code>
</li>
<li>
<code><span class="hljs-highlight  type">int</span></code>
</li>
<li>
<code><span class="hljs-highlight  type">float</span></code>
</li>
<li>
<code><span class="hljs-highlight  type">null</span></code>
</li>
<li>
<code><span class="hljs-highlight  type">object</span></code>
</li>
<li>
<code><span class="hljs-highlight  type">resource</span></code>
</li>
<li>
<code><span class="hljs-highlight  type">string</span></code>
</li>
</ul>
<p>Note that <code><span class="hljs-highlight  type">mixed</span></code> can also be used as a parameter or property type, not just as a return type.</p>
<p>Also note that since <code><span class="hljs-highlight  type">mixed</span></code> already includes <code><span class="hljs-highlight  type">null</span></code>, it's not allowed to make it nullable. The following will trigger an error:</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-comment">// Fatal error: Mixed types cannot be nullable, null is already part of the mixed type.</span>
<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">bar</span><span class="hljs-params">()</span>: <span class="hljs-highlight  type striped">?<span class="hljs-title">mixed</span></span> </span>{}</code></pre>
<hr />
<h3 id="throw-expression-rfc"><a href="#throw-expression-rfc" class="heading-anchor">#</a> Throw expression <small><a target="_blank" href="https://wiki.php.net/rfc/throw_expression">RFC</a></small></h3>
<p>This RFC changes <code>throw</code> from being a statement to being an expression, which makes it possible to throw exception in many new places:</p>
<pre><code class="language-php hljs php" data-lang="php">$triggerError = <span class="hljs-highlight  keyword">fn</span> () =&gt; <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-highlight  type">MyError</span>();

$foo = $bar[<span class="hljs-string">'offset'</span>] ?? <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-highlight  type">OffsetDoesNotExist</span>(<span class="hljs-string">'offset'</span>);</code></pre>
<hr />
<h3 id="inheritance-with-private-methods-rfc"><a href="#inheritance-with-private-methods-rfc" class="heading-anchor">#</a> Inheritance with private methods <small><a target="_blank" href="https://wiki.php.net/rfc/inheritance_private_methods">RFC</a></small></h3>
<p>Previously, PHP used to apply the same inheritance checks on public, protected and private methods. In other words: private methods should follow the same method signature rules as protected and public methods. This doesn't make sense, since private methods won't be accessible by child classes.</p>
<p>This RFC changed that behaviour, so that these inheritance checks are not performed on private methods anymore. Furthermore, the use of <code><span class="hljs-highlight  keyword">final private function</span></code> also didn't make sense, so doing so will now trigger a warning:</p>
<pre><code class="language-oxygene hljs oxygene" data-lang="oxygene">Warning: <span class="hljs-keyword">Private</span> methods cannot be <span class="hljs-keyword">final</span> <span class="hljs-keyword">as</span> they are never overridden <span class="hljs-keyword">by</span> other classes</code></pre>
<hr />
<h3 id="weak-maps-rfc"><a href="#weak-maps-rfc" class="heading-anchor">#</a> Weak maps <small><a target="_blank" href="https://wiki.php.net/rfc/weak_maps">RFC</a></small></h3>
<p>Built upon the <a target="_blank" href="https://wiki.php.net/rfc/weakrefs">weakrefs RFC</a> that was added in PHP 7.4, a <code><span class="hljs-highlight  type">WeakMap</span></code> implementation is added in PHP 8. <code><span class="hljs-highlight  type">WeakMap</span></code> holds references to objects, which don't prevent those objects from being garbage collected.</p>
<p>Take the example of ORMs, they often implement caches which hold references to entity classes to improve the performance of relations between entities. These entity objects can not be garbage collected, as long as this cache has a reference to them, even if the cache is the <em>only</em> thing referencing them.</p>
<p>If this caching layer uses weak references and maps instead, PHP will garbage collect these objects when nothing else references them anymore. Especially in the case of ORMs, which can manage several hundreds, if not thousands of entities within a request; weak maps can offer a better, more resource friendly way of dealing with these objects.</p>
<p>Here's what weak maps look like, an example from the RFC:</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Foo</span> 
</span>{
    <span class="hljs-keyword">private</span> <span class="hljs-highlight  type">WeakMap</span> $cache;
 
    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getSomethingWithCaching</span><span class="hljs-params">(<span class="hljs-highlight  type">object</span> $obj)</span>: <span class="hljs-title">object</span>
    </span>{
        <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;cache[$obj]
           ??= <span class="hljs-keyword">$this</span>-&gt;<span class="hljs-highlight  prop">computeSomethingExpensive</span>($obj);
    }
}</code></pre>
<hr />
<h3 id="allowing-::class-on-objects-rfc"><a href="#allowing-::class-on-objects-rfc" class="heading-anchor">#</a> Allowing <code><span class="hljs-highlight  keyword">::class</span></code> on objects <small><a target="_blank" href="https://wiki.php.net/rfc/class_name_literal_on_object">RFC</a></small></h3>
<p>A small, yet useful, new feature: it's now possible to use <code><span class="hljs-highlight  keyword">::class</span></code> on objects, instead of having to use <code><span class="hljs-highlight  prop">get_class</span>()</code> on them. It works the same way as <code><span class="hljs-highlight  prop">get_class</span>()</code>.</p>
<pre><code class="language-txt">$foo = <span class="hljs-highlight  keyword">new</span> <span class="hljs-highlight  type">Foo</span>();

<span class="hljs-highlight  prop">var_dump</span>($foo::<span class="hljs-highlight  keyword">class</span>);</code></pre>
<hr />
<h3 id="non-capturing-catches-rfc"><a href="#non-capturing-catches-rfc" class="heading-anchor">#</a> Non-capturing catches <small><a target="_blank" href="https://wiki.php.net/rfc/non-capturing_catches">RFC</a></small></h3>
<p>Whenever you wanted to catch an exception before PHP 8, you had to store it in a variable, regardless whether you used that variable or not. With non-capturing catches, you can omit the variable, so instead of this:</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-keyword">try</span> {
    <span class="hljs-comment">// Something goes wrong</span>
} <span class="hljs-keyword">catch</span> (<span class="hljs-highlight  type">MySpecialException</span> $exception) {
    <span class="hljs-highlight  type">Log</span>::<span class="hljs-highlight  prop">error</span>(<span class="hljs-string">"Something went wrong"</span>);
}</code></pre>
<p>You can now do this:</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-keyword">try</span> {
    <span class="hljs-comment">// Something goes wrong</span>
} <span class="hljs-keyword">catch</span> (<span class="hljs-highlight  type">MySpecialException</span>) {
    <span class="hljs-highlight  type">Log</span>::<span class="hljs-highlight  prop">error</span>(<span class="hljs-string">"Something went wrong"</span>);
}</code></pre>
<p>Note that it's required to always specify the type, you're not allowed to have an empty <code><span class="hljs-highlight  keyword">catch</span></code>. If you want to catch all exceptions and errors, you can use <code><span class="hljs-highlight  type">Throwable</span></code> as the catching type.</p>
<hr />
<h3 id="trailing-comma-in-parameter-lists-rfc"><a href="#trailing-comma-in-parameter-lists-rfc" class="heading-anchor">#</a> Trailing comma in parameter lists <small><a target="_blank" href="https://wiki.php.net/rfc/trailing_comma_in_parameter_list">RFC</a></small></h3>
<p>Already possible when calling a function, trailing comma support was still lacking in parameter lists. It's now allowed in PHP 8, meaning you can do the following:</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(
    <span class="hljs-highlight  type">string</span> $parameterA,
    <span class="hljs-highlight  type">int</span> $parameterB,
    <span class="hljs-highlight  type">Foo</span> $objectfoo<span class="hljs-highlight  green">,</span>
)</span> </span>{
    <span class="hljs-comment">// …</span>
}</code></pre>
<p>As a sidenote: trailing commas are also supported in the <code>use</code> list of closures, this was an oversight and now added via a <a href="https://wiki.php.net/rfc/trailing_comma_in_closure_use_list">separate RFC</a>.</p>
<hr />
<h3 id="create-datetime-objects-from-interface"><a href="#create-datetime-objects-from-interface" class="heading-anchor">#</a> Create <code><span class="hljs-highlight  type">DateTime</span></code> objects from interface</h3>
<p>You can already create a <code><span class="hljs-highlight  type">DateTime</span></code> object from a <code><span class="hljs-highlight  type">DateTimeImmutable</span></code> object using <code><span class="hljs-highlight  type">DateTime</span>::<span class="hljs-highlight  prop">createFromImmutable</span>($immutableDateTime)</code>, but the other way around was tricky. By adding <code><span class="hljs-highlight  type">DateTime</span>::<span class="hljs-highlight  prop">createFromInterface</span>()</code> and <code><span class="hljs-highlight  type">DatetimeImmutable</span>::<span class="hljs-highlight  prop">createFromInterface</span>()</code> there's now a generalised way to convert <code><span class="hljs-highlight  type">DateTime</span></code> and <code><span class="hljs-highlight  type">DateTimeImmutable</span></code> objects to each other.</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-highlight  type">DateTime</span>::<span class="hljs-highlight  prop">createFromInterface</span>(<span class="hljs-highlight  type">DateTimeInterface</span> $other);

<span class="hljs-highlight  type">DateTimeImmutable</span>::<span class="hljs-highlight  prop">createFromInterface</span>(<span class="hljs-highlight  type">DateTimeInterface</span> $other);</code></pre>
<hr />
<h3 id="new-stringable-interface-rfc"><a href="#new-stringable-interface-rfc" class="heading-anchor">#</a> New <code><span class="hljs-highlight  type">Stringable</span></code> interface <small><a target="_blank" href="https://wiki.php.net/rfc/stringable">RFC</a></small></h3>
<p>The <code><span class="hljs-highlight  type">Stringable</span></code> interface can be used to type hint anything that implements <code><span class="hljs-highlight  prop">__toString</span>()</code>. Whenever a class implements <code><span class="hljs-highlight  prop">__toString</span>()</code>, it automatically implements the interface behind the scenes and there's no need to manually implement it.</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Foo</span>
</span>{
    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__toString</span><span class="hljs-params">()</span>: <span class="hljs-title">string</span>
    </span>{
        <span class="hljs-keyword">return</span> <span class="hljs-string">'foo'</span>;
    }
}

<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">bar</span><span class="hljs-params">(<span class="hljs-highlight  type">string|Stringable</span> $stringable)</span> </span>{ <span class="hljs-comment">/* … */</span> }

<span class="hljs-highlight  prop">bar</span>(<span class="hljs-keyword">new</span> <span class="hljs-highlight  type">Foo</span>());
<span class="hljs-highlight  prop">bar</span>(<span class="hljs-string">'abc'</span>);</code></pre>
<hr />
<h3 id="new-str_contains()-function-rfc"><a href="#new-str_contains()-function-rfc" class="heading-anchor">#</a> New <code><span class="hljs-highlight  prop">str_contains</span>()</code> function <small><a target="_blank" href="https://wiki.php.net/rfc/str_contains">RFC</a></small></h3>
<p>Some might say it's long overdue, but we finally don't have to rely on <code><span class="hljs-highlight  prop">strpos</span>()</code> anymore to know whether a string contains another string.</p>
<p>Instead of doing this:</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-keyword">if</span> (<span class="hljs-highlight  prop">strpos</span>(<span class="hljs-string">'string with lots of words'</span>, <span class="hljs-string">'words'</span>) !== <span class="hljs-keyword">false</span>) { <span class="hljs-comment">/* … */</span> }</code></pre>
<p>You can now do this</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-keyword">if</span> (<span class="hljs-highlight  prop">str_contains</span>(<span class="hljs-string">'string with lots of words'</span>, <span class="hljs-string">'words'</span>)) { <span class="hljs-comment">/* … */</span> }</code></pre>
<hr />
<h3 id="new-str_starts_with()-and-str_ends_with()-functions-rfc"><a href="#new-str_starts_with()-and-str_ends_with()-functions-rfc" class="heading-anchor">#</a> New <code><span class="hljs-highlight  prop">str_starts_with</span>()</code> and <code><span class="hljs-highlight  prop">str_ends_with</span>()</code> functions <small><a target="_blank" href="https://wiki.php.net/rfc/add_str_starts_with_and_ends_with_functions">RFC</a></small></h3>
<p>Two other ones long overdue, these two functions are now added in the core.</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-highlight  prop">str_starts_with</span>(<span class="hljs-string">'haystack'</span>, <span class="hljs-string">'hay'</span>); <span class="hljs-comment">// true</span>
<span class="hljs-highlight  prop">str_ends_with</span>(<span class="hljs-string">'haystack'</span>, <span class="hljs-string">'stack'</span>); <span class="hljs-comment">// true</span></code></pre>
<hr />
<h3 id="new-fdiv()-function-pr"><a href="#new-fdiv()-function-pr" class="heading-anchor">#</a> New <code><span class="hljs-highlight  prop">fdiv</span>()</code> function <small><a target="_blank" href="https://github.com/php/php-src/pull/4769">PR</a></small></h3>
<p>The new <code><span class="hljs-highlight  prop">fdiv</span>()</code> function does something similar as the <code><span class="hljs-highlight  prop">fmod</span>()</code> and <code><span class="hljs-highlight  prop">intdiv</span>()</code> functions, which allows for division by 0. Instead of errors you'll get <code><span class="hljs-highlight  type">INF</span></code>, <code><span class="hljs-highlight  type">-INF</span></code> or <code><span class="hljs-highlight  type">NAN</span></code>, depending on the case.</p>
<hr />
<h3 id="new-get_debug_type()-function-rfc"><a href="#new-get_debug_type()-function-rfc" class="heading-anchor">#</a> New <code><span class="hljs-highlight  prop">get_debug_type</span>()</code> function <small><a target="_blank" href="https://wiki.php.net/rfc/get_debug_type">RFC</a></small></h3>
<p><code><span class="hljs-highlight  prop">get_debug_type</span>()</code> returns the type of a variable. Sounds like something <code><span class="hljs-highlight  prop">gettype</span>()</code> would do? <code><span class="hljs-highlight  prop">get_debug_type</span>()</code> returns more useful output for arrays, strings, anonymous classes and objects.</p>
<p>For example, calling <code><span class="hljs-highlight  prop">gettype</span>()</code> on a class <code><span class="hljs-highlight  type">\Foo\Bar</span></code> would return <code>object</code>. Using <code><span class="hljs-highlight  prop">get_debug_type</span>()</code> will return the class name.</p>
<p>A full list of differences between <code><span class="hljs-highlight  prop">get_debug_type</span>()</code> and <code><span class="hljs-highlight  prop">gettype</span>()</code> can be found in the RFC.</p>
<hr />
<h3 id="new-get_resource_id()-function-pr"><a href="#new-get_resource_id()-function-pr" class="heading-anchor">#</a> New <code><span class="hljs-highlight  prop">get_resource_id</span>()</code> function <small><a target="_blank" href="https://github.com/php/php-src/pull/5427">PR</a></small></h3>
<p>Resources are special variables in PHP, referring to external resources. One example is a MySQL connection, another one a file handle.</p>
<p>Each one of those resources gets assigned an ID, though previously the only way to know that id was to cast the resource to <code>int</code>:</p>
<pre><code class="language-php hljs php" data-lang="php">$resourceId = (int) $resource;</code></pre>
<p>PHP 8 adds the <code><span class="hljs-highlight  prop">get_resource_id</span>()</code> functions, making this operation more obvious and type-safe:</p>
<pre><code class="language-php hljs php" data-lang="php">$resourceId = <span class="hljs-highlight  prop">get_resource_id</span>($resource);</code></pre>
<hr />
<h3 id="abstract-methods-in-traits-improvements-rfc"><a href="#abstract-methods-in-traits-improvements-rfc" class="heading-anchor">#</a> Abstract methods in traits improvements <small><a target="_blank" href="https://wiki.php.net/rfc/abstract_trait_method_validation">RFC</a></small></h3>
<p>Traits can specify abstract methods which must be implemented by the classes using them. There's a caveat though: before PHP 8 the signature of these method implementations weren't validated. The following was valid:</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-keyword">trait</span> <span class="hljs-highlight  type">Test</span> {
    <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test</span><span class="hljs-params">(<span class="hljs-highlight  type">int</span> $input)</span>: <span class="hljs-title">int</span></span>;
}

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UsesTrait</span>
</span>{
    <span class="hljs-keyword">use</span> <span class="hljs-highlight  type"><span class="hljs-title">Test</span></span>;

    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test</span><span class="hljs-params">($input)</span>
    </span>{
        <span class="hljs-keyword">return</span> $input;
    }
}</code></pre>
<p>PHP 8 will perform proper method signature validation when using a trait and implementing its abstract methods. This means you'll need to write this instead:</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UsesTrait</span>
</span>{
    <span class="hljs-keyword">use</span> <span class="hljs-highlight  type"><span class="hljs-title">Test</span></span>;

    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test</span><span class="hljs-params">(<span class="hljs-highlight  type">int</span> $input)</span>: <span class="hljs-title">int</span>
    </span>{
        <span class="hljs-keyword">return</span> $input;
    }
}</code></pre>
<hr />
<h3 id="object-implementation-of-token_get_all()-rfc"><a href="#object-implementation-of-token_get_all()-rfc" class="heading-anchor">#</a> Object implementation of <code><span class="hljs-highlight  prop">token_get_all</span>()</code> <small><a target="_blank" href="https://wiki.php.net/rfc/token_as_object">RFC</a></small></h3>
<p>The <code><span class="hljs-highlight  prop">token_get_all</span>()</code> function returns an array of values. This RFC adds a <code><span class="hljs-highlight  type">PhpToken</span></code> class with a <code><span class="hljs-highlight  type">PhpToken</span>::<span class="hljs-highlight  prop">tokenize</span>()</code> method. This implementation works with objects instead of plain values. It consumes less memory and is easier to read.</p>
<hr />
<h3 id="variable-syntax-tweaks-rfc"><a href="#variable-syntax-tweaks-rfc" class="heading-anchor">#</a> Variable syntax tweaks <small><a target="_blank" href="https://wiki.php.net/rfc/variable_syntax_tweaks">RFC</a></small></h3>
<p>From the RFC: "the Uniform Variable Syntax RFC resolved a number of inconsistencies in PHP's variable syntax. This RFC intends to address a small handful of cases that were overlooked."</p>
<hr />
<h3 id="type-annotations-for-internal-functions-externals"><a href="#type-annotations-for-internal-functions-externals" class="heading-anchor">#</a> Type annotations for internal functions <small><a target="_blank" href="https://externals.io/message/106522">EXTERNALS</a></small></h3>
<p>Lots of people <a target="_blank" href="https://github.com/php/php-src/pulls?q=is%3Apr+label%3AStubs+is%3Aclosed">pitched in</a> to add proper type annotations to all internal functions. This was a long standing issue, and finally solvable with all the changes made to PHP in previous versions. This means that internal functions and methods will have complete type information in reflection.</p>
<hr />
<h3 id="ext-json-always-available-rfc"><a href="#ext-json-always-available-rfc" class="heading-anchor">#</a> <code>ext-json</code> always available <small><a target="_blank" href="https://wiki.php.net/rfc/always_enable_json">RFC</a></small></h3>
<p>Previously it was possible to compile PHP without the JSON extension enabled, this is not possible anymore. Since JSON is so widely used, it's best developers can always rely on it being there, instead of having to ensure the extension exist first.</p>
<h2 id="breaking-changes"><a href="#breaking-changes" class="heading-anchor">#</a> Breaking changes</h2>
<p>As mentioned before: this is a major update and thus there will be breaking changes. The best thing to do is take a look at the full list of breaking changes over at the <a target="_blank" href="https://github.com/php/php-src/blob/PHP-8.0/UPGRADING#L20">UPGRADING</a> document.</p>
<p>Many of these breaking changes have been deprecated in previous 7.* versions though, so if you've been staying up-to-date over the years, it shouldn't be all that hard to upgrade to PHP 8.</p>
<p><div class="sidenote">
    <p>
        Tired of managing servers?
        Check out <a href="https://gumroad.com/a/575280243" ping="https://analytics.stitcher.io/r" target="_blank" rel="noopener noreferrer">Serverless Visually Explained</a> by Matthieu Napoli and learn how to create scalable PHP applications on AWS.
    </p>
</div>
</p>
<h3 id="consistent-type-errors-rfc"><a href="#consistent-type-errors-rfc" class="heading-anchor">#</a> Consistent type errors <small><a target="_blank" href="https://wiki.php.net/rfc/consistent_type_errors">RFC</a></small></h3>
<p>User-defined functions in PHP will already throw <code><span class="hljs-highlight  type">TypeError</span></code>, but internal functions did not, they rather emitted warnings and returned <code><span class="hljs-highlight  type">null</span></code>. As of PHP 8 the behaviour of internal functions have been made consistent.</p>
<hr />
<h3 id="reclassified-engine-warnings-rfc"><a href="#reclassified-engine-warnings-rfc" class="heading-anchor">#</a> Reclassified engine warnings <small><a target="_blank" href="https://wiki.php.net/rfc/engine_warnings">RFC</a></small></h3>
<p>Lots of errors that previously only triggered warnings or notices, have been converted to proper errors. The following warnings were changed.</p>
<ul>
<li>Undefined variable: <code><span class="hljs-highlight  type">Error</span></code> exception instead of notice</li>
<li>Undefined array index: warning instead of notice</li>
<li>Division by zero: <code><span class="hljs-highlight  type">DivisionByZeroError</span></code> exception instead of warning</li>
<li>Attempt to increment/decrement property '%s' of non-object: <code><span class="hljs-highlight  type">Error</span></code> exception instead of warning</li>
<li>Attempt to modify property '%s' of non-object: <code><span class="hljs-highlight  type">Error</span></code> exception instead of warning</li>
<li>Attempt to assign property '%s' of non-object: <code><span class="hljs-highlight  type">Error</span></code> exception instead of warning</li>
<li>Creating default object from empty value: <code><span class="hljs-highlight  type">Error</span></code> exception instead of warning</li>
<li>Trying to get property '%s' of non-object: warning instead of notice</li>
<li>Undefined property: %s::$%s: warning instead of notice</li>
<li>Cannot add element to the array as the next element is already occupied: <code><span class="hljs-highlight  type">Error</span></code> exception instead of warning</li>
<li>Cannot unset offset in a non-array variable: <code><span class="hljs-highlight  type">Error</span></code> exception instead of warning</li>
<li>Cannot use a scalar value as an array: <code><span class="hljs-highlight  type">Error</span></code> exception instead of warning</li>
<li>Only arrays and <code><span class="hljs-highlight  type">Traversables</span></code> can be unpacked: <code><span class="hljs-highlight  type">TypeError</span></code> exception instead of warning</li>
<li>Invalid argument supplied for foreach(): <code><span class="hljs-highlight  type">TypeError</span></code> exception instead of warning</li>
<li>Illegal offset type: <code><span class="hljs-highlight  type">TypeError</span></code> exception instead of warning</li>
<li>Illegal offset type in isset or empty: <code><span class="hljs-highlight  type">TypeError</span></code> exception instead of warning</li>
<li>Illegal offset type in unset: <code><span class="hljs-highlight  type">TypeError</span></code> exception instead of warning</li>
<li>Array to string conversion: warning instead of notice</li>
<li>Resource ID#%d used as offset, casting to integer (%d): warning instead of notice</li>
<li>String offset cast occurred: warning instead of notice</li>
<li>Uninitialized string offset: %d: warning instead of notice</li>
<li>Cannot assign an empty string to a string offset: <code><span class="hljs-highlight  type">Error</span></code> exception instead of warning</li>
<li>Supplied resource is not a valid stream resource: <code><span class="hljs-highlight  type">TypeError</span></code> exception instead of warning</li>
</ul>
<hr />
<h3 id="the-@-operator-no-longer-silences-fatal-errors"><a href="#the-@-operator-no-longer-silences-fatal-errors" class="heading-anchor">#</a> The @ operator no longer silences fatal errors</h3>
<p>It's possible that this change might reveal errors that again were hidden before PHP 8. Make sure to set <code><span class="hljs-highlight  keyword">display_errors</span>=<span class="hljs-highlight  prop">Off</span></code> on your production servers!</p>
<hr />
<h3 id="default-error-reporting-level"><a href="#default-error-reporting-level" class="heading-anchor">#</a> Default error reporting level</h3>
<p>It's now <code><span class="hljs-highlight  type">E_ALL</span></code> instead of everything but <code><span class="hljs-highlight  type">E_NOTICE</span></code> and <code><span class="hljs-highlight  type">E_DEPRECATED</span></code>. This means that many errors might pop up which were previously silently ignored, though probably already existent before PHP 8.</p>
<hr />
<h3 id="default-pdo-error-mode-rfc"><a href="#default-pdo-error-mode-rfc" class="heading-anchor">#</a> Default PDO error mode <small><a target="_blank" href="https://wiki.php.net/rfc/pdo_default_errmode">RFC</a></small></h3>
<p>From the RFC: <em>The current default error mode for PDO is silent. This means that when an SQL error occurs, no errors or warnings may be emitted and no exceptions thrown unless the developer implements their own explicit error handling.</em></p>
<p>This RFC changes the default error will change to <code><span class="hljs-highlight  type">PDO</span>::<span class="hljs-highlight  type">ERRMODE_EXCEPTION</span></code> in PHP 8.</p>
<hr />
<h3 id="concatenation-precedence-rfc"><a href="#concatenation-precedence-rfc" class="heading-anchor">#</a> Concatenation precedence <small><a target="_blank" href="https://wiki.php.net/rfc/concatenation_precedence">RFC</a></small></h3>
<p>While already deprecated in PHP 7.4, this change is now taken into effect. If you'd write something like this:</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-keyword">echo</span> <span class="hljs-string">"sum: "</span> . $a + $b;</code></pre>
<p>PHP would previously interpret it like this:</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-keyword">echo</span> (<span class="hljs-string">"sum: "</span> . $a) + $b;</code></pre>
<p>PHP 8 will make it so that it's interpreted like this:</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-keyword">echo</span> <span class="hljs-string">"sum: "</span> . ($a + $b);</code></pre>
<hr />
<h3 id="stricter-type-checks-for-arithmetic-and-bitwise-operators-rfc"><a href="#stricter-type-checks-for-arithmetic-and-bitwise-operators-rfc" class="heading-anchor">#</a> Stricter type checks for arithmetic and bitwise operators <small><a target="_blank" href="https://wiki.php.net/rfc/arithmetic_operator_type_checks">RFC</a></small></h3>
<p><hljs type>Before PHP 8, it was possible to apply arithmetic or bitwise operators on arrays, resources or objects. This isn't possible anymore, and will throw a <code>TypeError</code>:</hljs></p>
<pre><code class="language-php hljs php" data-lang="php">[] <span class="hljs-highlight  error">%</span> [<span class="hljs-number">42</span>];
$object <span class="hljs-highlight  error">+</span> <span class="hljs-number">4</span>;</code></pre>
<hr />
<h3 id="namespaced-names-being-a-single-token-rfc"><a href="#namespaced-names-being-a-single-token-rfc" class="heading-anchor">#</a> Namespaced names being a single token <small><a target="_blank" href="https://wiki.php.net/rfc/namespaced_names_as_token">RFC</a></small></h3>
<p>PHP used to interpret each part of a namespace (separated by a backslash <code>\</code>) as a sequence of tokens. This RFC changed that behaviour, meaning reserved names can now be used in namespaces.</p>
<hr />
<h3 id="saner-numeric-strings-rfc"><a href="#saner-numeric-strings-rfc" class="heading-anchor">#</a> Saner numeric strings <small><a target="_blank" href="https://wiki.php.net/rfc/saner-numeric-strings">RFC</a></small></h3>
<p>PHP's type system tries to do a lot of smart things when it encounters numbers in strings. This RFC makes that behaviour more consistent and clear.</p>
<hr />
<h3 id="saner-string-to-number-comparisons-rfc"><a href="#saner-string-to-number-comparisons-rfc" class="heading-anchor">#</a> Saner string to number comparisons <small><a target="_blank" href="https://wiki.php.net/rfc/string_to_number_comparison">RFC</a></small></h3>
<p>This RFC fixes the very strange case in PHP where <code>0 == "foo"</code> results in <code>true</code>. There are some other edge cases like that one, and this RFC fixes them.</p>
<hr />
<h3 id="reflection-changes"><a href="#reflection-changes" class="heading-anchor">#</a> Reflection changes</h3>
<p>A few reflection methods have been deprecated:</p>
<ul>
<li>
<code><span class="hljs-highlight  type">ReflectionFunction</span>::<span class="hljs-highlight  prop">isDisabled</span>()</code>
</li>
<li>
<code><span class="hljs-highlight  type">ReflectionParameter</span>::<span class="hljs-highlight  prop">getClass</span>()</code>
</li>
<li>
<code><span class="hljs-highlight  type">ReflectionParameter</span>::<span class="hljs-highlight  prop">isCallable</span>()</code>
</li>
</ul>
<p>You should now use <code><span class="hljs-highlight  type">ReflectionType</span></code> to get information about a parameter's type:</p>
<pre><code class="language-php hljs php" data-lang="php">$reflectionParameter-&gt;<span class="hljs-highlight  prop">getType</span>()-&gt;<span class="hljs-highlight  prop">allowsNull</span>();</code></pre>
<p>If the type is a single type, <code><span class="hljs-highlight  type">ReflectionParameter</span>::<span class="hljs-highlight  prop">getType</span>()</code> returns an instance of <code><span class="hljs-highlight  type">ReflectionNamedType</span></code>, which you can get its name from and whether it's built-in:</p>
<pre><code class="language-php hljs php" data-lang="php">$reflectionParameter-&gt;<span class="hljs-highlight  prop">getType</span>()-&gt;<span class="hljs-highlight  prop">getName</span>();
$reflectionParameter-&gt;<span class="hljs-highlight  prop">getType</span>()-&gt;<span class="hljs-highlight  prop">isBuiltin</span>();</code></pre>
<p>If the type is a union type however, you'll get an instance of <code><span class="hljs-highlight  type">ReflectionUnionType</span></code>, which can give you an array of <code><span class="hljs-highlight  type">ReflectionNamedType</span></code> like so:</p>
<pre><code class="language-php hljs php" data-lang="php">$reflectionParameter-&gt;<span class="hljs-highlight  prop">getType</span>()-&gt;<span class="hljs-highlight  prop">getTypes</span>();</code></pre>
<p>Checking whether a type is a union or not can be done with an <code><span class="hljs-highlight  keyword">instanceof</span></code> check:</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-keyword">if</span> ($reflectionParameter-&gt;<span class="hljs-highlight  prop">getType</span>() <span class="hljs-keyword">instanceof</span> <span class="hljs-highlight  type">ReflectionNamedType</span>) { 
    <span class="hljs-comment">// It's a single type</span>
}

<span class="hljs-keyword">if</span> ($reflectionParameter-&gt;<span class="hljs-highlight  prop">getType</span>() <span class="hljs-keyword">instanceof</span> <span class="hljs-highlight  type">ReflectionUnionType</span>) {
    <span class="hljs-comment">// It's a union type</span>
}</code></pre>
<p>Next up, three method signatures of reflection classes have been changed:</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-highlight  type">ReflectionClass</span>::<span class="hljs-highlight  prop">newInstance</span>($args);
<span class="hljs-highlight  type">ReflectionFunction</span>::<span class="hljs-highlight  prop">invoke</span>($args);
<span class="hljs-highlight  type">ReflectionMethod</span>::<span class="hljs-highlight  prop">invoke</span>($object, $args);</code></pre>
<p>Have now become:</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-highlight  type">ReflectionClass</span>::<span class="hljs-highlight  prop">newInstance</span>(...$args);
<span class="hljs-highlight  type">ReflectionFunction</span>::<span class="hljs-highlight  prop">invoke</span>(...$args);
<span class="hljs-highlight  type">ReflectionMethod</span>::<span class="hljs-highlight  prop">invoke</span>($object, ...$args);</code></pre>
<p>The upgrading guide specifies that if you extend these classes, and still want to support both PHP 7 and PHP 8, the following signatures are allowed:</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-highlight  type">ReflectionClass</span>::<span class="hljs-highlight  prop">newInstance</span>($arg = <span class="hljs-keyword">null</span>, ...$args);
<span class="hljs-highlight  type">ReflectionFunction</span>::<span class="hljs-highlight  prop">invoke</span>($arg = <span class="hljs-keyword">null</span>, ...$args);
<span class="hljs-highlight  type">ReflectionMethod</span>::<span class="hljs-highlight  prop">invoke</span>($object, $arg = <span class="hljs-keyword">null</span>, ...$args);</code></pre>
<hr />
<p><div class="sidenote">
    <p>
        Tired of managing servers?
        Check out <a href="https://gumroad.com/a/575280243" ping="https://analytics.stitcher.io/r" target="_blank" rel="noopener noreferrer">Serverless Visually Explained</a> by Matthieu Napoli and learn how to create scalable PHP applications on AWS.
    </p>
</div>
</p>
<hr />
<h3 id="stable-sorting-rfc"><a href="#stable-sorting-rfc" class="heading-anchor">#</a> Stable sorting <small><a target="_blank" href="https://wiki.php.net/rfc/stable_sorting">RFC</a></small></h3>
<p>Before PHP 8, sorting algorithms were unstable. This means that the order of equal elements wasn't guaranteed. PHP 8 changes the behaviour of all sorting functions to stable sorting.</p>
<hr />
<h3 id="fatal-error-for-incompatible-method-signatures-rfc"><a href="#fatal-error-for-incompatible-method-signatures-rfc" class="heading-anchor">#</a> Fatal error for incompatible method signatures <small><a target="_blank" href="https://wiki.php.net/rfc/lsp_errors">RFC</a></small></h3>
<p>From the RFC: <em>Inheritance errors due to incompatible method signatures currently either throw a fatal error or a warning depending on the cause of the error and the inheritance hierarchy.</em></p>
<hr />
<h3 id="other-deprecations-and-changes"><a href="#other-deprecations-and-changes" class="heading-anchor">#</a> Other deprecations and changes</h3>
<p>During the PHP 7.* development, several deprecations were added that are now finalised in PHP 8.</p>
<ul>
<li>Deprecations in <a target="_blank" href="https://wiki.php.net/rfc/deprecations_php_7_2">PHP 7.2</a>
</li>
<li>Deprecations in <a target="_blank" href="https://wiki.php.net/rfc/deprecations_php_7_3">PHP 7.3</a>
</li>
<li>Deprecations in <a target="_blank" href="https://wiki.php.net/rfc/deprecations_php_7_4">PHP 7.4</a>
</li>
<li>Locale-independent <a target="_blank" href="https://wiki.php.net/rfc/locale_independent_float_to_string">float to string cast</a>
</li>
</ul>
<hr />
<p><div class="author">
    Noticed a tpyo? You can submit a
    <a href="https://github.com/brendt/stitcher.io" target="_blank" rel="noopener noreferrer">PR</a> to fix it.

    If you want to stay up to date about what's happening on this blog, you can follow me
    <a href="https://mobile.twitter.com/brendt_gd" target="_blank" rel="noopener noreferrer">on Twitter</a> or subscribe to my newsletter:

    <form action="https://mail.stitcher.io/subscribe/81fa83d0-4a0b-4eff-b897-f6ce51dfb7f0" method="post" class="newsletter-form">
        <label for="newsletter-email-18">Email</label>
        <input type="email" name="email" id="newsletter-email-18"/>
        <button type="submit" class="cta cta-small">Subscribe</button>
    </form>
</div>
</p>
 ]]></summary>

                <updated>2020-11-26T00:00:00+00:00</updated>
            </entry>
                                <entry>
                <title><![CDATA[ PHP 8: the null safe operator ]]></title>

                <link rel="alternate" href="https://stitcher.io/blog/php-8-nullsafe-operator"/>

                <id>https://www.stitcher.io/blog/php-8-nullsafe-operator</id>

                <author>
                    <name><![CDATA[ Brent Roose ]]></name>
                </author>

                <summary type="html"><![CDATA[ <p>If you've used the <a href="/blog/shorthand-comparisons-in-php#null-coalescing-operator">null coalescing operator</a> in the past, you probably also noticed its shortcomings: null coalescing doesn't work on method calls. Instead you need intermediate checks, or rely on <code><span class="hljs-highlight  prop">optional</span></code> helpers provided by some frameworks:</p>
<pre><code class="language-php hljs php" data-lang="php">$startDate = $booking-&gt;<span class="hljs-highlight  prop">getStartDate</span>();

$dateAsString = $startDate ? $startDate-&gt;<span class="hljs-highlight  prop">asDateTimeString</span>() : <span class="hljs-keyword">null</span>;</code></pre>
<p>The nullsafe operator provides functionality similar to null coalescing, but also supports method calls. Instead of writing this:</p>
<pre><code class="language-php hljs php" data-lang="php">$country =  <span class="hljs-keyword">null</span>;
 
<span class="hljs-keyword">if</span> ($session !== <span class="hljs-keyword">null</span>) {
    $user = $session-&gt;<span class="hljs-highlight  prop">user</span>;
 
    <span class="hljs-keyword">if</span> ($user !== <span class="hljs-keyword">null</span>) {
        $address = $user-&gt;<span class="hljs-highlight  prop">getAddress</span>();
 
        <span class="hljs-keyword">if</span> ($address !== <span class="hljs-keyword">null</span>) {
            $country = $address-&gt;<span class="hljs-highlight  prop">country</span>;
        }
    }
}</code></pre>
<p>PHP 8 allows you to write this:</p>
<pre><code class="language-php hljs php" data-lang="php">$country = $session?-&gt;<span class="hljs-highlight  prop">user</span>?-&gt;<span class="hljs-highlight  prop">getAddress</span>()?-&gt;<span class="hljs-highlight  prop">country</span>;</code></pre>
<p>Let's take a look at what this new operator can and cannot do!</p>
<h2 id="nullsafe-operator-in-depth"><a href="#nullsafe-operator-in-depth" class="heading-anchor">#</a> Nullsafe operator in depth</h2>
<p>Let's start by addressing the most important question: what exactly is the difference between the null coalescing operator and the nullsafe operator?</p>
<p>Let's take a look at this example:</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Order</span>
</span>{
    <span class="hljs-keyword">public</span> ?<span class="hljs-highlight  type">Invoice</span> <span class="hljs-highlight  prop">$invoice</span> = <span class="hljs-keyword">null</span>;
}

$order = <span class="hljs-keyword">new</span> <span class="hljs-highlight  type">Order</span>();</code></pre>
<p>Here we have an <code><span class="hljs-highlight  type">Order</span></code> object which has an optional relation to an <code><span class="hljs-highlight  type">Invoice</span></code> object. Now imagine we'd want to get the invoice's number (if the invoice isn't null). You could do this both with the null coalescing operator and the nullsafe operator:</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-highlight  prop">var_dump</span>($order-&gt;<span class="hljs-highlight  prop">invoice</span>?-&gt;<span class="hljs-highlight  prop">number</span>);
<span class="hljs-highlight  prop">var_dump</span>($order-&gt;<span class="hljs-highlight  prop">invoice</span>-&gt;<span class="hljs-highlight  prop">number</span> ?? <span class="hljs-keyword">null</span>);</code></pre>
<p>So what's the difference? While you could use both operators to achieve the same result in this example, they also have specific edge cases only one of them can handle. For example, you can use the null coalescing operator in combination with array keys, while the nullsafe operator can't handle them:</p>
<pre><code class="language-php hljs php" data-lang="php">$array = [];

<span class="hljs-highlight  prop">var_dump</span>($array[<span class="hljs-string">'key'</span>]-&gt;<span class="hljs-highlight  prop">foo</span> ?? <span class="hljs-keyword">null</span>);</code></pre>
<pre><code class="language-smali hljs smali" data-lang="smali"><span class="hljs-highlight  prop">var_dump</span>($array<span class="hljs-highlight  striped">['key']?-&gt;</span><span class="hljs-highlight  prop">foo</span>);

<span class="hljs-highlight  red full">Warning: Undefined<span class="hljs-built_in"> array </span>key <span class="hljs-string">"key"</span></span></code></pre>
<p>The nullsafe operator, on the other hand, can work with method calls, while the null coalescing operator can't. Imagine an <code><span class="hljs-highlight  type">Invoice</span></code> object like so:</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Invoice</span>
</span>{
    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getDate</span><span class="hljs-params">()</span>: ?<span class="hljs-title">DateTime</span> </span>{ <span class="hljs-comment">/* … */</span> }
    
    <span class="hljs-comment">// …</span>
}

$invoice = <span class="hljs-keyword">new</span> <span class="hljs-highlight  type">Invoice</span>();</code></pre>
<p>You could use the nullsafe operator to call <code><span class="hljs-highlight  type">format</span></code> on the invoice's date, even when it's <code><span class="hljs-highlight  keyword">null</span></code>:</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-highlight  prop">var_dump</span>($invoice-&gt;<span class="hljs-highlight  prop">getDate</span>()?-&gt;<span class="hljs-highlight  prop">format</span>(<span class="hljs-string">'Y-m-d'</span>));

<span class="hljs-comment">// null</span></code></pre>
<p>While the null coalescing operator would crash:</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-highlight  prop">var_dump</span>($invoice-&gt;<span class="hljs-highlight  prop">getDate</span>()-&gt;<span class="hljs-highlight  prop">format</span>(<span class="hljs-string">'Y-m-d'</span>) ?? <span class="hljs-keyword">null</span>);

<span class="hljs-highlight  text red full">Fatal error: Uncaught Error: Call to a member <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">format</span><span class="hljs-params">()</span> <span class="hljs-title">on</span> <span class="hljs-title">null</span></span></code></pre>
<p><div class="sidenote">
    <p>
        Tired of managing servers?
        Check out <a href="https://gumroad.com/a/575280243" ping="https://analytics.stitcher.io/r" target="_blank" rel="noopener noreferrer">Serverless Visually Explained</a> by Matthieu Napoli and learn how to create scalable PHP applications on AWS.
    </p>
</div>
</p>
<h3 id="short-circuiting"><a href="#short-circuiting" class="heading-anchor">#</a> Short circuiting</h3>
<p>Sometimes you could use either the null coalescing or nullsafe operator, and other times you'd need to use a specific one. The difference is that the nullsafe operator uses a form of "short circuiting": writing <code>?-></code> will cause PHP to look at whats on the lefthand side of this operator, if it's <code><span class="hljs-highlight  keyword">null</span></code> then the righthand side will simply be discarded. The null coalescing operator is actually an <code><span class="hljs-highlight  keyword">isset</span></code> call in disguise on its lefthand operand, which doesn't support short circuiting.</p>
<p>Short circuiting also means that when writing something like this:</p>
<pre><code class="language-php hljs php" data-lang="php">$foo?-&gt;<span class="hljs-highlight  prop">bar</span>(<span class="hljs-highlight  prop">expensive_function</span>());</code></pre>
<p><code><span class="hljs-highlight  prop">expensive_function</span></code> would only be executed if <code>$foo</code> is actually not <code><span class="hljs-highlight  keyword">null</span></code>.</p>
<h3 id="nested-nullsafe-operators"><a href="#nested-nullsafe-operators" class="heading-anchor">#</a> Nested nullsafe operators</h3>
<p>It's possible to nest several nullsafe operator calls like so:</p>
<pre><code class="language-php hljs php" data-lang="php">$foo?-&gt;<span class="hljs-highlight  prop">bar</span>?-&gt;<span class="hljs-highlight  prop">baz</span>()?-&gt;<span class="hljs-highlight  prop">boo</span>?-&gt;<span class="hljs-highlight  prop">baa</span>();</code></pre>
<h3 id="only-for-reading-data"><a href="#only-for-reading-data" class="heading-anchor">#</a> Only for reading data</h3>
<p>You cannot use the nullsafe operator to write data to objects:</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-highlight  striped">$offer?-&gt;<span class="hljs-highlight  prop">invoice</span>?-&gt;<span class="hljs-highlight  prop">date</span> = <span class="hljs-keyword">new</span> <span class="hljs-highlight  type">DateTime</span>();</span> </code></pre>
<p><div class="author">
    Noticed a tpyo? You can submit a
    <a href="https://github.com/brendt/stitcher.io" target="_blank" rel="noopener noreferrer">PR</a> to fix it.

    If you want to stay up to date about what's happening on this blog, you can follow me
    <a href="https://mobile.twitter.com/brendt_gd" target="_blank" rel="noopener noreferrer">on Twitter</a> or subscribe to my newsletter:

    <form action="https://mail.stitcher.io/subscribe/81fa83d0-4a0b-4eff-b897-f6ce51dfb7f0" method="post" class="newsletter-form">
        <label for="newsletter-email-20">Email</label>
        <input type="email" name="email" id="newsletter-email-20"/>
        <button type="submit" class="cta cta-small">Subscribe</button>
    </form>
</div>
</p>
<p>The nullsafe operator is definitely a missing piece of the puzzle finally added in PHP. Given its dynamic nature, it feels good to have a smooth way of dealing with <code><span class="hljs-highlight  keyword">null</span></code>. The difference and overlap between the nullsafe operator and null coalescing operator feels a bit confusing at first, but I'm sure we'll get used to it.</p>
 ]]></summary>

                <updated>2020-11-17T00:00:00+00:00</updated>
            </entry>
                                <entry>
                <title><![CDATA[ PHP 8: How to setup the JIT ]]></title>

                <link rel="alternate" href="https://stitcher.io/blog/php-8-jit-setup"/>

                <id>https://www.stitcher.io/blog/php-8-jit-setup</id>

                <author>
                    <name><![CDATA[ Brent Roose ]]></name>
                </author>

                <summary type="html"><![CDATA[ <p><a href="/blog/new-in-php-8">PHP 8</a> adds a <a href="/blog/php-jit">JIT</a> compiler to PHP's core which has the potential to speed up performance dramatically. There are some sidenotes to be made about the actual impact on real-life web applications, which is why I ran <a href="/blog/jit-in-real-life-web-applications">some benchmarks</a> on how the JIT performs (I've listed all relevant references in the footnotes as well).</p>
<p>I wanted to dedicate a blog post on how to setup the JIT as well, since there's a few things to talk about.</p>
<p><div class="ad-container">
    <script async type="text/javascript" src="//cdn.carbonads.com/carbon.js?serve=CK7ICK3W&placement=stitcherio" id="_carbonads_js"></script>
</div>
</p>
<p>Honestly, setting up the JIT is one of the most confusing ways of configuring a PHP extension I've ever seen. Luckily there are some configuration shorthands available so that it's more easy to set up. Still it's good to know about the JIT config in depth, so here goes.</p>
<p>First of all, the JIT will only work if opcache is enabled, this is the default for most PHP installations, but you should make sure that <code><span class="hljs-highlight  prop">opcache.enable</span></code> is set to 1 in your<code>php.ini</code> file. Enabling the JIT itself is done by specifying <code><span class="hljs-highlight  prop">opcache.jit_buffer_size</span></code> in <code>php.ini</code>.</p>
<p>Note that if you're running PHP via the commandline, you can also pass these options via the <code>-d</code> flag, instead of adding them to <code>php.ini</code>:</p>
<pre><code class="language-php hljs php" data-lang="php">php -dopcache.enable=<span class="hljs-number">1</span> -dopcache.jit_buffer_size=<span class="hljs-number">100</span>M</code></pre>
<p>If this directive is excluded, the default value is set to 0, and the JIT won't run. If you're testing the JIT in a CLI script, you'll need to use <code><span class="hljs-highlight  prop">opcache.enable_cli</span></code> instead to enable opcache:</p>
<pre><code class="language-php hljs php" data-lang="php">php -dopcache.enable_cli=<span class="hljs-number">1</span> -dopcache.jit_buffer_size=<span class="hljs-number">100</span>M</code></pre>
<p>The difference between <code><span class="hljs-highlight  prop">opcache.enable</span></code> and <code><span class="hljs-highlight  prop">opcache.enable_cli</span></code> is that the first one should be used if you're running, for example, the built-in PHP server. If you're actually running a CLI script, you'll need <code><span class="hljs-highlight  prop">opcache.enable_cli</span></code>.</p>
<p>Before continuing, let's ensure the JIT actually works, create a PHP script that's accessible via the browser or the CLI (depending on where you're testing the JIT), and look at the output of <code><span class="hljs-highlight  prop">opcache_get_status</span>()</code>:</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-highlight  prop">var_dump</span>(<span class="hljs-highlight  prop">opcache_get_status</span>()[<span class="hljs-string">'jit'</span>]);</code></pre>
<p>The output should be something like this:</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-keyword">array</span>:<span class="hljs-number">7</span> [
  <span class="hljs-string">"enabled"</span> =&gt; <span class="hljs-keyword">true</span>
  <span class="hljs-string">"on"</span> =&gt; <span class="hljs-keyword">true</span>
  <span class="hljs-string">"kind"</span> =&gt; <span class="hljs-number">5</span>
  <span class="hljs-string">"opt_level"</span> =&gt; <span class="hljs-number">4</span>
  <span class="hljs-string">"opt_flags"</span> =&gt; <span class="hljs-number">6</span>
  <span class="hljs-string">"buffer_size"</span> =&gt; <span class="hljs-number">4080</span>
  <span class="hljs-string">"buffer_free"</span> =&gt; <span class="hljs-number">0</span>
]</code></pre>
<p>If <code>enabled</code> and <code>on</code> are true, you're good to go!</p>
<p>Next, there's several ways to configure the JIT (and this is where we'll get into the configuration mess). You can configure when the JIT should run, how much it should try to optimise, etc. All of these options are configured using a single (!) config entry: <code><span class="hljs-highlight  prop">opcache.jit</span></code>. It could look something like this:</p>
<pre><code class="language-ini hljs ini" data-lang="ini"><span class="hljs-highlight  prop">opcache.enable</span>=1 
<span class="hljs-highlight  prop">opcache.jit</span>=1255</code></pre>
<p>Now, what does that number mean? The <a target="_blank" href="https://wiki.php.net/rfc/jit">RFC</a> lists the meaning of each of them. Mind you: this is not a bit mask, each number simply represents another configuration option. The RFC lists the following options:</p>
<h4 id="o-—-optimization-level"><a href="#o-—-optimization-level" class="heading-anchor">#</a> O — Optimization level</h4>
<table>
    <tr><td>0</td> <td>don't JIT</td></tr>
    <tr><td>1</td> <td>minimal JIT (call standard VM handlers)</td></tr>
    <tr><td>2</td> <td>selective VM handler inlining</td></tr>
    <tr><td>3</td> <td>optimized JIT based on static type inference of individual function</td></tr>
    <tr><td>4</td> <td>optimized JIT based on static type inference and call tree</td></tr>
    <tr><td>5</td> <td>optimized JIT based on static type inference and inner procedure analyses</td></tr>
</table>
<h4 id="t-—-jit-trigger"><a href="#t-—-jit-trigger" class="heading-anchor">#</a> T — JIT trigger</h4>
<table>
    <tr><td>0</td> <td>JIT all functions on first script load</td></tr>
    <tr><td>1</td> <td>JIT function on first execution</td></tr>
    <tr><td>2</td> <td>Profile on first request and compile hot functions on second request</td></tr>
    <tr><td>3</td> <td>Profile on the fly and compile hot functions</td></tr>
    <tr><td>4</td> <td>Compile functions with @jit tag in doc-comments</td></tr>
    <tr><td>5</td> <td>Tracing JIT</td></tr>
</table>
<h4 id="r-—-register-allocation"><a href="#r-—-register-allocation" class="heading-anchor">#</a> R — register allocation</h4>
<table>
    <tr><td>0</td> <td>don't perform register allocation</td></tr>
    <tr><td>1</td> <td>use local liner-scan register allocator</td></tr>
    <tr><td>2</td> <td>use global liner-scan register allocator</td></tr>
</table>
<h4 id="c-—-cpu-specific-optimization-flags"><a href="#c-—-cpu-specific-optimization-flags" class="heading-anchor">#</a> C — CPU specific optimization flags</h4>
<table>
    <tr><td>0</td> <td>none</td></tr>
    <tr><td>1</td> <td>enable AVX instruction generation</td></tr>
</table>
<p>One <em>small</em> gotcha: the RFC lists these options in reverse order, so the first digit represents the <code>C</code> value, the second the <code>R</code>, and so on. Why there simply weren't four configuration entries added is beyond my comprehension, probably to make configuring the JIT faster… right?</p>
<p><div class="author">
    Noticed a tpyo? You can submit a
    <a href="https://github.com/brendt/stitcher.io" target="_blank" rel="noopener noreferrer">PR</a> to fix it.

    If you want to stay up to date about what's happening on this blog, you can follow me
    <a href="https://mobile.twitter.com/brendt_gd" target="_blank" rel="noopener noreferrer">on Twitter</a> or subscribe to my newsletter:

    <form action="https://mail.stitcher.io/subscribe/81fa83d0-4a0b-4eff-b897-f6ce51dfb7f0" method="post" class="newsletter-form">
        <label for="newsletter-email-21">Email</label>
        <input type="email" name="email" id="newsletter-email-21"/>
        <button type="submit" class="cta cta-small">Subscribe</button>
    </form>
</div>
</p>
<p>Anyways, internals propose <code>1255</code> as the best default, it will do maximum jitting, use the tracing JIT, use a global liner-scan register allocator — whatever that might be — and enables AVX instruction generation.</p>
<p>So your ini settings (or <code>-d</code> flags) should have these values:</p>
<pre><code class="language-ini hljs ini" data-lang="ini"><span class="hljs-highlight  prop">opcache.enable</span>=1 
<span class="hljs-highlight  prop">opcache.jit_buffer_size</span>=100M
<span class="hljs-highlight  prop">opcache.jit</span>=1255</code></pre>
<p>Keep in mind that <code><span class="hljs-highlight  prop">opcache.jit</span></code> is optional by the way. The JIT will use a default value if that property is omitted.</p>
<p>Which default, you ask? That would be <code><span class="hljs-highlight  prop">opcache.jit</span>=tracing</code>.</p>
<p>Hang on, that's not the strange bitmask-like structure we saw earlier? That's right: after the original RFC passed, internals recognised that the bitmask-like options weren't all that user-friendly, so they added two aliases which are translated to the bitmask under the hood. There's <code><span class="hljs-highlight  prop">opcache.jit</span>=tracing</code> and <code><span class="hljs-highlight  prop">opcache.jit</span>=function</code>.</p>
<p>The difference between the two is that the function JIT will only try to optimise code within the scope of a single function, while the tracing JIT can look at the whole stack trace to identify and optimise hot code. Internals recommends to use the tracing JIT, because it'll probably almost always give the best results. You can read about those results in the <a href="/blog/jit-in-real-life-web-applications">benchmarks</a> I've done.</p>
<p>So the only option you actually need to set to enable the JIT with its optimal configuration is <code><span class="hljs-highlight  prop">opcache.jit_buffer_size</span></code>, but if you want to be explicit, listing <code><span class="hljs-highlight  prop">opcache.jit</span></code> wouldn't be such a bad idea:</p>
<pre><code class="language-ini hljs ini" data-lang="ini"><span class="hljs-highlight  prop">opcache.enable</span>=1 
<span class="hljs-highlight  prop">opcache.jit_buffer_size</span>=100M
<span class="hljs-highlight  prop">opcache.jit</span>=tracing</code></pre>
<p><div class="sidenote">
    <p>
        Tired of managing servers?
        Check out <a href="https://gumroad.com/a/575280243" ping="https://analytics.stitcher.io/r" target="_blank" rel="noopener noreferrer">Serverless Visually Explained</a> by Matthieu Napoli and learn how to create scalable PHP applications on AWS.
    </p>
</div>
</p>
 ]]></summary>

                <updated>2020-10-29T00:00:00+00:00</updated>
            </entry>
                                <entry>
                <title><![CDATA[ Front Line PHP ]]></title>

                <link rel="alternate" href="https://stitcher.io/blog/front-line-php"/>

                <id>https://www.stitcher.io/blog/front-line-php</id>

                <author>
                    <name><![CDATA[ Brent Roose ]]></name>
                </author>

                <summary type="html"><![CDATA[ <p>I've been blogging for three years and a half: I've written about PHP, the web, programming in general, and here and there something completely off topic. When I started this project I never imagined it would be received so well by so many. But here we are: thousands of people visit my blog every month, with a total of over 2 million pageviews in the span of three years. I realise those numbers are dwarfed by many other websites, still to me it feels like a great achievement.</p>
<p>The last year and a half I've been focussing on more specific topics: the "<a href="/blog/new-in-php-8">What's new in PHP</a>" series has been really popular, and the <a href="/blog/attributes-in-php-8">in</a>-<a href="/blog/jit-in-real-life-web-applications">depth</a> <a href="/blog/constructor-promotion-in-php-8">PHP</a> <a href="/blog/php-8-named-arguments">feature</a> <a href="/blog/php-8-match-or-switch">posts</a> have sparked many great discussions and conversations. With those PHP-related topics, I always envisioned them to be part of a greater whole and not separate posts. I've been trying to tell the story of modern PHP for a while now, and I'm trying to make it as focussed and of the highest quality as possible.</p>
<p>So that's why I'm introducing the next chapter, or better said: a bundle of chapters. I'm working on a book that teaches you modern PHP, its best practices and the community surrounding it — it's called "<a target="_blank" href="https://front-line-php.com/">Front Line PHP</a>". Some parts of it will be based on what I've written throughout the years on this blog, but large parts will be brand new. I'll cover the language itself, patterns and principles, frameworks, and most importantly: the mindset of a professional web developer. I'm really looking forward being able to share everything I want as a unified whole.</p>
<p>Like my <a target="_blank" href="https://laravel-beyond-crud.com/">previous book</a>, I'm working together with <a target="_blank" href="https://spatie.be/">Spatie</a> — the company I work at — to ensure it'll be the greatest product possible. You can expect Front Line PHP to launch in December 2020, right around the time PHP 8 arrives. It'll be accompanied by a <em>free</em> video series, teaching you all about PHP 8 in practice.</p>
<p>I'm really looking forward to sharing all of this with you, so make sure you <a target="_blank" href="https://front-line-php.com/">subscribe to the dedicated newsletter</a> to receive all relevant updates. If you want to know a little more, head over to the <a target="_blank" href="https://front-line-php.com/">Front Line PHP website</a>, which will receive regular updates over the coming weeks. I hope you're as excited as I am. If you have any questions or remarks, you're of course free to reach out to me via <a target="_blank" href="https://twitter.com/brendt_gd">Twitter</a> or <a href="mailto:brendt@stitcher.io">e-mail</a>.</p>
<p>Thanks!</p>
 ]]></summary>

                <updated>2020-10-05T00:00:00+00:00</updated>
            </entry>
                                <entry>
                <title><![CDATA[ What a good PR looks like ]]></title>

                <link rel="alternate" href="https://stitcher.io/blog/what-a-good-pr-looks-like"/>

                <id>https://www.stitcher.io/blog/what-a-good-pr-looks-like</id>

                <author>
                    <name><![CDATA[ Brent Roose ]]></name>
                </author>

                <summary type="html"><![CDATA[ <p>It's <a target="_blank" href="https://hacktoberfest.digitalocean.com/">Hacktoberfest</a>, your chance to contribute to open source and win a t-shirt while at it! Being an open source maintainer <a target="_blank" href="https://github.com/brendt">myself</a>, I find it a great initiative, but it comes with responsibility as well. Many people try to be smart and send low-effort, borderline-spam PRs, essentially <a target="_blank" href="https://joel.net/how-one-guy-ruined-hacktoberfest2020-drama">ruining</a> a maintainer's day.</p>
<p>So to help maintainers <em>and</em> contributors in creating quality open source, here are a few tips!</p>
<h2 id="start-by-looking-at-existing-issues-and-prs"><a href="#start-by-looking-at-existing-issues-and-prs" class="heading-anchor">#</a> Start by looking at existing issues and PRs</h2>
<p>Even though most PRs are well meant, it's important to first look around the repo for existing issues or PRs addressing the same problem. Someone else might already be working on a similar PR or there might be issues preventing the PR from being made. If you want to help out, start by participating in the discussions already happening, instead of working on your own.</p>
<h2 id="discuss-first"><a href="#discuss-first" class="heading-anchor">#</a> Discuss first</h2>
<p>If nothing has been said about your feature, it might be a good idea to discuss it first, instead of going ahead and potentially changing hundreds of lines of code. I'll be the one who has to maintain your PR for the foreseeable future, so it's best to first discuss it with me! I can probably give you some tips about the code base, as well as tell you about our expectations regarding implementation.</p>
<p>You can choose to open an issue first, or submit a draft PR with a minimal implementation, a proof of concept. I actually really like those draft PRs: it visualises what you want to change, but also indicates that you realise there's more work to do.</p>
<p><div class="author">
    Noticed a tpyo? You can submit a
    <a href="https://github.com/brendt/stitcher.io" target="_blank" rel="noopener noreferrer">PR</a> to fix it.

    If you want to stay up to date about what's happening on this blog, you can follow me
    <a href="https://mobile.twitter.com/brendt_gd" target="_blank" rel="noopener noreferrer">on Twitter</a> or subscribe to my newsletter:

    <form action="https://mail.stitcher.io/subscribe/81fa83d0-4a0b-4eff-b897-f6ce51dfb7f0" method="post" class="newsletter-form">
        <label for="newsletter-email-23">Email</label>
        <input type="email" name="email" id="newsletter-email-23"/>
        <button type="submit" class="cta cta-small">Subscribe</button>
    </form>
</div>
</p>
<h2 id="follow-the-style-guide"><a href="#follow-the-style-guide" class="heading-anchor">#</a> Follow the style guide</h2>
<p>Speaking of expectations, check whether the repository you're committing to has any code style guide or linter set up. <strong>Follow those rules</strong>. Don't submit a PR that deliberately uses other styling rules. You're submitting code to another codebase, and that style guide has to be followed.</p>
<p>A note to maintainers: you can help out here by using GitHub actions to automatically run your linters on PRs.</p>
<p><div class="ad-container">
    <script async type="text/javascript" src="//cdn.carbonads.com/carbon.js?serve=CK7ICK3W&placement=stitcherio" id="_carbonads_js"></script>
</div>
</p>
<h2 id="document-your-pr"><a href="#document-your-pr" class="heading-anchor">#</a> Document your PR</h2>
<p>I'm going to review your code, so I'd like it to be as clear as possible. This starts by writing <a href="/blog/a-programmers-cognitive-load">clean code</a>: using proper variable names, maybe even add a doc block here and there; but it's equally important to explain your thought process as well. You could use review comments to clarify specific parts of the code, or you could add some general comments in the PR.</p>
<h2 id="clean-commits"><a href="#clean-commits" class="heading-anchor">#</a> Clean commits</h2>
<p>Please try to avoid <code>"wip"</code> commit messages, please? You don't have to write a book for every commit, and I realise that you might not want to think about them while in the zone; but something like <code>"Refactor XX to YY"</code> is already infinitely better than <code>"wip"</code>. If you really want a good commit message, try to have your commits only do one thing, and try to explain <em>why</em> this commit is necessary.</p>
<p><div class="sidenote">
    <p>
        Tired of managing servers?
        Check out <a href="https://gumroad.com/a/575280243" ping="https://analytics.stitcher.io/r" target="_blank" rel="noopener noreferrer">Serverless Visually Explained</a> by Matthieu Napoli and learn how to create scalable PHP applications on AWS.
    </p>
</div>
</p>
<h2 id="only-relevant-changes"><a href="#only-relevant-changes" class="heading-anchor">#</a> Only relevant changes</h2>
<p>Only submit changes that are relevant within the scope of the PR. You might be tempted to fix another thing or two while at it — and you're allowed to — but keep those changes in a separate PR.</p>
<p>You can always base a new branch on your PR branch if necessary, and mention in the second PR that it depends on the first one to be merged. I'm happy to merge them for you, in the right order.</p>
<h2 id="be-patient"><a href="#be-patient" class="heading-anchor">#</a> Be patient</h2>
<p>It might take a while for maintainers to merge your PR. I even confess to have lost track of a few PRs over the past years. A friendly "bump" after a few days is always appreciated, but it still might take some time. Remember that most OSS maintainers are doing this on a voluntary basis, so don't be mad when a PR takes a little longer to merge.</p>
<h2 id="be-friendly"><a href="#be-friendly" class="heading-anchor">#</a> Be friendly</h2>
<p>This goes for both maintainers and contributors: don't be a jerk. Sometimes a PR gets declined, sometimes a maintainers looses their patience. Stop and breath, realise it's not the end of the world and move on. Be friendly and respectful.</p>
<h2 id="don't-wait-too-long-to-tag"><a href="#don't-wait-too-long-to-tag" class="heading-anchor">#</a> Don't wait too long to tag</h2>
<p>This one is for the maintainers: one of the most frustrating things is a PR getting accepted, and than having to wait another month for a release to be tagged. You shouldn't be afraid of high version numbers, that's what semver is for. Tag the release as soon as possible, and please don't wait another week!</p>
<hr />
<p>Do you have any more tips? Let them know via <a target="_blank" href="https://twitter.com/brendt_gd">Twitter</a> or <a href="mailto:brendt@stitcher.io">email</a>. Here's already another good read by my Colleague Sebastian, on how to write <a target="_blank" href="https://sebastiandedeyne.com/a-good-issue/">a good issue</a>.</p>
 ]]></summary>

                <updated>2020-10-02T00:00:00+00:00</updated>
            </entry>
                                <entry>
                <title><![CDATA[ Which colour scheme is better? ]]></title>

                <link rel="alternate" href="https://stitcher.io/blog/why-light-themes-are-better-according-to-science"/>

                <id>https://www.stitcher.io/blog/why-light-themes-are-better-according-to-science</id>

                <author>
                    <name><![CDATA[ Brent Roose ]]></name>
                </author>

                <summary type="html"><![CDATA[ <p>As a programmer I think I should always critically look at my own toolset and try to optimise it, regardless of my own subjective preference. It's by doing so that I've come to the conclusion that light colour schemes are better than dark ones, and today I want to share those thoughts with you.</p>
<p>Before looking at theory, grab a pair of sunglasses if you have any laying around. With both eyes open, cover only <em>one</em> eye with one of the sunglass glasses. Make it so you're looking through your sunglasses with one eye, and use the other one like you're used to.</p>
<p>With that setup in place, have fun watching this video in 3D!</p>
<iframe width="560" height="400" src="https://www.youtube.com/embed/IZdWlXjhMo4" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>
<p>Did you see the 3D effect? It might not work as well for parts of the video and some of you might not notice the 3D effect at all. That's fine, this post isn't about 3D, but it <em>is</em> about the reason why you can watch that video in 3D with only a pair of sunglasses: the Pulfrich effect.</p>
<div class="sidenote">    
<h2>The Pulfrich effect</h2>
<p>The Pulfrich effect is a psychophysical percept wherein lateral motion of an object in the field of view is interpreted by the visual cortex as having a depth component, due to a relative difference in signal timings between the two eyes.</p>
</div>
<p>All sources are listed in the footnotes by the way, you'll find them at the end of this post.</p>
<p>To clarify, the 3D effect in the video is indeed your brain tricking you; it thinks there's depth in a moving flat image because there's a slight difference in timing between your left and right eye.
What's interesting though is what causes that timing difference. Can you guess? It's because you covered one eye with sunglasses, making the image darker. It turns out that dark images take longer to process than light ones.</p>
<div class="sidenote">  
<p>The Pulfrich effect […] yields about a 15 ms delay for a factor of ten difference in average retinal illuminance</p>
</div>
<p>By only covering one eye with sunglasses, you add a few milliseconds of delay to that one. The exact delay will depend on the brightness of the screen and the darkness of the sunglasses, which might explain why some people see the 3D effect better than others. The timing difference between your eyes causes your brain to interpret that image as having depth, hence 3D.</p>
<p><div class="ad-container">
    <script async type="text/javascript" src="//cdn.carbonads.com/carbon.js?serve=CK7ICK3W&placement=stitcherio" id="_carbonads_js"></script>
</div>
</p>
<p>Now on to programming. If you're using a dark colour scheme, you're deliberately adding extra delay, so says the Pulfirch effect.
Sure the difference seems negligible, it's only a few milliseconds. Actually, it's a few milliseconds <em>every</em> time you "rescan" your screen; that's between 10 or 50 times a second, depending on what research you want to believe.
Still you probably won't notice any real-time difference, but over time this adds up, and the extra effort needed by your eyes can become to feel exhausting.</p>
<p>Besides the Pulfrich effect, there are other reasons that make light colour schemes superior. First of there's what human eyes are used to, what they are built for. Most of us are awake during the day and asleep at night. The human eye is better adapted to interpreting light scenes with dark points of focus, instead of the other way around.</p>
<p>On the other hand there's the case of astigmatism, which is caused by an imperfection of your corneas or lenses. It's estimated that between 30% and 60% of adults in Europe and Asia have it (I actually have it myself, which is why I wear glasses). For people with astigmatism, a bright display with dark text is easier to read, because the iris closes a little more given the additional light; which decreases the impact of the defect in your cornea or lens.</p>
<p>As a sidenote: if you often experience headaches after a day of programming, you might want to test for astigmatism. Glasses make a world of difference</p>
<p>Lastly, there have been extensive studies about the readability of computer screens, one example is a study by Etienne Grandjean, called "Ergonomic Aspects of Visual Display Terminals". You can't read it online; if you manage to find it in a library you should check out pages 137-142. Its conclusion, like several other studies is that it's indeed easier to read dark text on a light background, then the other way around.</p>
<p>Often when I share these arguments with someone who clings to the dark side, they tell me light colour schemes hurt their eyes because they are too bright; you might be thinking the same right now. I've got two answers for you.</p>
<p>First: you don't need to use a white <code>#fff</code> background with black <code>#000</code> text. There's lots of light colour schemes that don't go to the extreme ends. The important thing is that there's enough contrast between fore- and background, and that the background is lighter than the foreground.
Second: you can always adjust the brightness of your screen. You don't need to turn it up to a 100%! You'd only do that if the text is otherwise unreadable, and guess when that happens? If you'd use a dark scheme!</p>
<p><div class="author">
    Noticed a tpyo? You can submit a
    <a href="https://github.com/brendt/stitcher.io" target="_blank" rel="noopener noreferrer">PR</a> to fix it.

    If you want to stay up to date about what's happening on this blog, you can follow me
    <a href="https://mobile.twitter.com/brendt_gd" target="_blank" rel="noopener noreferrer">on Twitter</a> or subscribe to my newsletter:

    <form action="https://mail.stitcher.io/subscribe/81fa83d0-4a0b-4eff-b897-f6ce51dfb7f0" method="post" class="newsletter-form">
        <label for="newsletter-email-25">Email</label>
        <input type="email" name="email" id="newsletter-email-25"/>
        <button type="submit" class="cta cta-small">Subscribe</button>
    </form>
</div>
</p>
<p>I don't want to end with theory though. Over the past three years, I've put light themes to the test: I've challenged myself and dozens of others to switch to a light theme for <strong>one week</strong>. I wanna do the same with you: try it for one week, and let me know whether you're switching back to a dark theme or not. Based on my past experiments I can tell you that only a few people decide to switch back. The majority stays with a light scheme because, guess what, it's actually better.</p>
<p>Now I reckon there <em>are</em> people who can't use a light colour scheme because of an eye illness. There are legitimate cases when dark colour schemes <em>are</em> better for some people's health, the exceptions to the rule.</p>
<p>So try it out, and let me know your findings via <a target="_blank" href="https://twitter.com/brendt_gd">Twitter</a> or <a href="mailto:brendt@stitcher.io">e-mail</a>!</p>
<p>PS: if you're using PhpStorm or any other JetBrain IDE, you can check these two light colour schemes:</p>
<ul>
<li>
<a target="_blank" href="https://github.com/brendt/phpstorm-light-lite-theme">Light Lite</a>
</li>
<li>
<a target="_blank" href="https://github.com/brendt/phpstorm-photon-theme">Photon Light</a>
</li>
</ul>
 ]]></summary>

                <updated>2020-09-26T00:00:00+00:00</updated>
            </entry>
                                <entry>
                <title><![CDATA[ The case for transpiled generics in PHP ]]></title>

                <link rel="alternate" href="https://stitcher.io/blog/the-case-for-transpiled-generics"/>

                <id>https://www.stitcher.io/blog/the-case-for-transpiled-generics</id>

                <author>
                    <name><![CDATA[ Brent Roose ]]></name>
                </author>

                <summary type="html"><![CDATA[ <div class="author footnotes">
<p>This is a mail I sent to PHP's internals, these are my thoughts, and you can follow the internals discussion <a href="https://externals.io/message/111875">here</a>, or share your own thoughts <a href="https://www.reddit.com/r/PHP/comments/iuhtgd/ive_proposed_an_approach_to_generics_on_internals/?">on Reddit</a>.</p>
</div>
<p>Hello internals</p>
<p>Today I'd like to hear your thoughts on what might be a controversial topic, though I think it's worth having this discussion. I want to make the case for adding generic syntax, without actually enforcing any additional type checks at runtime. Please hear me out.</p>
<p>We've been discussing generics for years now [1][2], all without any result. Nikita's latest attempt [3] stalled because, from what I gathered and amongst other things, doing generic type checks at runtime has a significant impact on performance.</p>
<p>On the other hand, static analysers have been making their rise for a few years now. Granted: not the whole community might like this kind of type strictness, and PHP doesn't force them to; but still projects like PhpStorm acknowledge their significance — they will add built-in support for both psalm and PHPStan later this year [4]. Rasmus Lerdorf also showed interest in the idea of improving PHP's static analysis capabilities two years ago [5].</p>
<p>That all to say that there's a significant part of the PHP community who's interested in embracing the benefits of static analysis.</p>
<p>If we look outside of our PHP bubble, we can see the same thing happening in JavaScript: the core benefit that TypeScript adds is its robust static analysis. Sure those developers need an extra compilation step to transpile their code to plain old JavaScript, but it seems that they are… fine with that?</p>
<p>I'd like to discuss a similar idea for PHP. If runtime generics aren't possible because of performance issues, why not explore the other option: adding generic syntax that is ignored by the interpreter, but can be used by static analysis tools — third party of built-into PHP, that's another discussion. I realise this thought goes against the "PHP mindset" we've been programming with for more than 20 years, but we shouldn't ignore what's happening in the PHP- and wider programming community: static analysis is relevant, whether you want to use it or not, and a stricter type system is preferred by many.</p>
<p>Now I know there are alternatives we can use today. Static analysers already support generics, using doc blocks. I'm not trying to argue that it's impossible to achieve the same results with the toolset we have, but rather that there's room for improvement from the developer's point of view. History has shown that such convenience additions to PHP have been a difficult pill to swallow for some, but on the other hand those kind of changes <em>have</em> been happening more and more often anyway: property promotion, short closures, named arguments, attributes, yes even types themselves: you can write the same working PHP program without any of those features, and yet they have been proven so useful and wanted over the last years.</p>
<p>As a sidenote: the idea of transpiling is already present in PHP. Looking at constructor property promotion: a purely syntactical feature, which is transformed to simpler PHP code at runtime. Nikita called this principle "desugaring" in the constructor property promotion RFC [6].</p>
<p>So here's my case for transpiled generics summarized:</p>
<ul>
<li>There's no significant runtime performance impact</li>
<li>The PHP community is already embracing static analysis</li>
<li>Transpiling has been proved to be a viable workflow, thanks to TypeScript</li>
<li>As with all things-PHP: it's opt-in. You don't have to use the syntax if you don't want to and you won't experience any downsides</li>
</ul>
<p>So with all that being said, I'm looking forward to hearing your thoughts.</p>
<p>Kind regards<br>
Brent</p>
<ul>
<li>[1] <a href="https://wiki.php.net/rfc/generics">https://wiki.php.net/rfc/generics</a>
</li>
<li>[2] <a href="https://wiki.php.net/rfc/generic-arrays">https://wiki.php.net/rfc/generic-arrays</a>
</li>
<li>[3] <a href="https://github.com/PHPGenerics/php-generics-rfc/issues/45">https://github.com/PHPGenerics/php-generics-rfc/issues/45</a>
</li>
<li>[4] <a href="https://blog.jetbrains.com/phpstorm/2020/07/phpstan-and-psalm-support-coming-to-phpstorm/">https://blog.jetbrains.com/phpstorm/2020/07/phpstan-and-psalm-support-coming-to-phpstorm/</a>
</li>
<li>[5] <a href="https://externals.io/message/101477#101592">https://externals.io/message/101477#101592</a>
</li>
<li>[6] <a href="https://wiki.php.net/rfc/constructor_promotion#desugaring">https://wiki.php.net/rfc/constructor_promotion#desugaring</a>
</li>
</ul>
 ]]></summary>

                <updated>2020-09-17T00:00:00+00:00</updated>
            </entry>
                                <entry>
                <title><![CDATA[ Don&#039;t get stuck ]]></title>

                <link rel="alternate" href="https://stitcher.io/blog/dont-get-stuck"/>

                <id>https://www.stitcher.io/blog/dont-get-stuck</id>

                <author>
                    <name><![CDATA[ Brent Roose ]]></name>
                </author>

                <summary type="html"><![CDATA[ <p><em>Note: this post is about a previous job, not my current one.</em></p>
<p>Both managers were looking at me in disbelief, they seemed to be stunned for a few seconds. I just told them I'd decided to resign. One of them quickly recovered, smiled, and told me he regretted my decision. Though he also realised it's expected in our sector: people usually don't spend more than a few years at the same company.</p>
<p>I didn't want to chit-chat much longer so I nodded, apologised (I'm not sure why), and told them I'd be checking out the paperwork with the office manager later that week. I left the room, went back to my desk.</p>
<p>I received a mail from the other manager over the weekend, the one who didn't say much during our conversation. He wrote he was perplexed, didn't see this coming, and regretted the decision tremendously. He told me if there was anything he could do to keep me, I should tell him.</p>
<p><div class="ad-container">
    <script async type="text/javascript" src="//cdn.carbonads.com/carbon.js?serve=CK7ICK3W&placement=stitcherio" id="_carbonads_js"></script>
</div>
</p>
<p>My decision to leave was final though. It wasn't a financial one, in fact I was just about to get a significant raise and more responsibilities. It also wasn't a relational one, I really appreciated all of my colleagues back then; I'd even call some of them good friends.</p>
<p>I decided to leave because I got stuck, there wasn't any room to grow anymore. The perspective of being a developer who's 5 years behind of modern day practices made me miserable.</p>
<p>Even though I'd been advocating within the company to make significant changes, both on a technical and management level; it didn't seem achievable. We were still struggling to deliver the quality we promised our clients, we were using out of date technologies, I went home almost every day feeling down and depressed.</p>
<p>I wasn't the only one, by the way. During the 3 years I worked for this company, 8 people left and around the same amount were hired. Every time this happened it was described as "the normal flow" a web development company has to deal with, just like our manager told me during my resignation.</p>
<p>I've since realised that this manager was wrong: it's not normal to switch jobs every 5 years, to have several people come and go every year. It's only normal when your company fails to invest in them the way it should. And that, it turns out, is very common indeed.</p>
<hr />
<p>I don't regret having worked for that company: I did learn valuable lessons there. It's ok to be at a place where there's little or no room for growth, as long as it's not too long. Watch out, and critically assess your situation from time to time; you might get stuck without even knowing it.</p>
<p>My advice? Either try to change your position and responsibilities within the company or, if that doesn't work, change jobs. I realise that's easy to write, like I also realise it's not as easy as it sounds. I noticed being stuck after two years and it took me another whole year to find a place where I believed there was enough room to grow.</p>
<p>Whatever turns your path will take, knowing you want to go somewhere and not stand idle is the most important first step.</p>
<p><div class="sidenote">
    <p>
        Thanks for reading! This post is part of my "Dev Diaries" series where I write about my own and personal experiences as a developer. Would you like to read some more?
    </p>

    <ul>
        <li><a href="/blog/dont-get-stuck">Don't get stuck</a></li>
        <li><a href="/blog/dont-write-your-own-framework">Don't write your own framework</a></li>
        <li><a href="/blog/when-i-lost-a-few-hundred-leads">When I lost a few hundred leads</a></li>
        <li><a href="/blog/how-to-be-right-on-the-internet">How to be right on the internet</a></li>
    </ul>

    <p>

        If you want to stay up to date about what's happening on this blog, you can follow me
        <a href="https://mobile.twitter.com/brendt_gd" target="_blank" rel="noopener noreferrer">on Twitter</a> or subscribe to my newsletter:
    </p>

    <form action="https://mail.stitcher.io/subscribe/81fa83d0-4a0b-4eff-b897-f6ce51dfb7f0" method="post" class="newsletter-form">
        <label for="email">Email</label>
        <input type="email" name="email"/>
        <button type="submit" class="cta cta-small">Subscribe</button>
    </form>
</div>
</p>
 ]]></summary>

                <updated>2020-08-29T00:00:00+00:00</updated>
            </entry>
                                <entry>
                <title><![CDATA[ Annotations ]]></title>

                <link rel="alternate" href="https://stitcher.io/blog/annotations"/>

                <id>https://www.stitcher.io/blog/annotations</id>

                <author>
                    <name><![CDATA[ Brent Roose ]]></name>
                </author>

                <summary type="html"><![CDATA[ <div class="image-noborder"></div>
<p><img src="/resources/img/comics/annotations.png" srcset="/resources/img/comics/annotations-1251x632.png 1251w, /resources/img/comics/annotations-625x315.png 625w, /resources/img/comics/annotations-1399x707.png 1399w, /resources/img/comics/annotations-1083x547.png 1083w, /resources/img/comics/annotations-884x446.png 884w" sizes="" alt=""><a target="_blank" href="/resources/img/comics/annotations.png">Show large image</a></img></p>
 ]]></summary>

                <updated>2020-08-28T00:00:00+00:00</updated>
            </entry>
                                <entry>
                <title><![CDATA[ Laravel Beyond CRUD is here! ]]></title>

                <link rel="alternate" href="https://stitcher.io/blog/laravel-beyond-crud-is-here"/>

                <id>https://www.stitcher.io/blog/laravel-beyond-crud-is-here</id>

                <author>
                    <name><![CDATA[ Brent Roose ]]></name>
                </author>

                <summary type="html"><![CDATA[ <p>It's been over a year in the making and I happy to say it's here: the Laravel Beyond CRUD book and video course are now <a target="_blank" href="https://laravel-beyond-crud.com/">available</a>. Regular followers already know what it is about, but I happily repeat it in case you're new.</p>
<hr />
<p>I've been writing and maintaining several larger-than-average web applications for years now. Projects that take a team of developers to work on them for at least a year, oftentimes longer. In their cases, the well-known, default Laravel approach to building CRUD applications doesn't scale all that well. These projects become large, difficult to navigate and maintain.</p>
<p>So over the past few years I've looked at several architectures which would help me and our team improve the maintainability of these projects, as well as help make the development process easier, both for us and our clients. These are architectures and patterns like Domain Driven Design, Hexagonal Architectures, and Event Sourcing, amongst others.</p>
<p>Because most of our projects are large but not ginormous, these architectures as a whole are almost always overkill. So instead we took the best parts from all of them, and combined them in a pragmatic approach.</p>
<p>In this book, I'll write about the knowledge we gained over the years in designing these projects. I will take a close look at the Laravel way and what did and didn't work for us. This book is for you if you're dealing with those kinds of larger projects, and want practical and pragmatic solutions in managing them. I will talk about theory, patterns, and principles, though everything will be in context of a real-life web application.</p>
<p>In this book I'll give you concrete solutions to real life problems, but its actual goal is to teach you a mindset. I want to share the process we went through, so that you can apply it to your problems, and come up with the solutions that work best for you.</p>
<p>My colleague <a target="_blank" href="https://twitter.com/freekmurze">Freek</a> phrased it like this:</p>
<blockquote>
<p>Don't dogmatically keep following rules you agreed on in the past, but keep challenging them.</p>
</blockquote>
<hr />
<p>Besides the book, I've also created an additional video course: some episodes take written theory and visualise it, others will dive deep into code in ways a book couldn't do.</p>
<p>I believe this course will help you in designing and managing large applications, no matter what background you're coming from. The beauty of it — if I can say so myself — is that all patterns and principles described can be taken out of the context I personally work in, and applied to many other kinds of projects, even outside of Laravel.</p>
<p>So if your interest is piqued, you can take a look over here: <a target="_blank" href="https://laravel-beyond-crud.com/">https://laravel-beyond-crud.com/</a>!</p>
<p>PS: both the book and video course are a living product: the book might get small revisions over time, and I'm already working on a couple of new videos that will be added to the course over the next few weeks. So keep your eye out for even more content to come!</p>
 ]]></summary>

                <updated>2020-08-26T00:00:00+00:00</updated>
            </entry>
                                <entry>
                <title><![CDATA[ Differences ]]></title>

                <link rel="alternate" href="https://stitcher.io/blog/differences"/>

                <id>https://www.stitcher.io/blog/differences</id>

                <author>
                    <name><![CDATA[ Brent Roose ]]></name>
                </author>

                <summary type="html"><![CDATA[ <div class="image-noborder"></div>
<p><img src="/resources/img/comics/differences.png" srcset="/resources/img/comics/differences-1920x692.png 1920w, /resources/img/comics/differences-1214x437.png 1214w, /resources/img/comics/differences-1487x535.png 1487w, /resources/img/comics/differences-1717x618.png 1717w, /resources/img/comics/differences-858x309.png 858w" sizes="" alt=""><a target="_blank" href="/resources/img/comics/differences.png">Show large image</a></img></p>
 ]]></summary>

                <updated>2020-08-21T00:00:00+00:00</updated>
            </entry>
                                <entry>
                <title><![CDATA[ My journey into event sourcing ]]></title>

                <link rel="alternate" href="https://stitcher.io/blog/my-journey-into-event-sourcing"/>

                <id>https://www.stitcher.io/blog/my-journey-into-event-sourcing</id>

                <author>
                    <name><![CDATA[ Brent Roose ]]></name>
                </author>

                <summary type="html"><![CDATA[ <p>In this post I want to share four talks that have guided me into the world of event driven development, and by extent into event sourcing.</p>
<p>I wanted to share these talks here on my blog, because I figured some of you might be interested in them, and this way I can revisit them in the future.</p>
<hr />
<p>Starting with Martin Fowler, who explains the basics of event driven development, the pros and cons, as well as the different patterns that can be applied on top of EDD, one of them event sourcing.</p>
<p>
    <iframe width="560" height="400" 
        src="https://www.youtube.com/embed/STKCRSUsyP0" 
        frameborder="0" 
        allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" 
        allowfullscreen>
    </iframe>
</p>
<hr />
<p>Next Greg Young, one of the founding fathers of event sourcing and CQRS. What's most interesting in this talk is the misconceptions Greg talks about. The one that stood out to me most, is that event sourcing isn't a top-level architecture, it's a pattern that should be applied in parts of your projects where relevant. A great insight, one that has guided us throughout <a href="/blog/combining-event-sourcing-and-stateful-systems">our latest project</a>.</p>
<p>
    <iframe width="560" height="400" 
        src="https://www.youtube.com/embed/LDW0QWie21s" 
        frameborder="0" 
        allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" 
        allowfullscreen>
    </iframe>
</p>
<p><div class="ad-container">
    <script async type="text/javascript" src="//cdn.carbonads.com/carbon.js?serve=CK7ICK3W&placement=stitcherio" id="_carbonads_js"></script>
</div>
</p>
<hr />
<p>Next up an old talk be Eric Evans. I know the video and sound quality is crap, but the way he talks about splitting large systems in small pieces is awesome.</p>
<p>The greatest insight for me is how he explains the concept of micro services within the context of one large system. Eric explains concrete ways of dealing with such a split system, which directly ties in the point made by Greg Young earlier: event sourcing should only be applied in parts of your system. Eric gives us concrete strategies of doing that.</p>
<p>
    <iframe width="560" height="400" 
        src="https://www.youtube.com/embed/OTF2Y6TLTG0" 
        frameborder="0" 
        allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" 
        allowfullscreen>
    </iframe>
</p>
<hr />
<p>Finally, putting everything into practice with code: Freek shows a hands-on integration of event sourcing into a Laravel projects, the framework I also work with daily.</p>
<p>
    <iframe width="560" height="400" 
        src="https://www.youtube.com/embed/9tbxl_I1EGE" 
        frameborder="0" 
        allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" 
        allowfullscreen>
    </iframe>
</p>
<hr />
<p><div class="author">
    Noticed a tpyo? You can submit a
    <a href="https://github.com/brendt/stitcher.io" target="_blank" rel="noopener noreferrer">PR</a> to fix it.

    If you want to stay up to date about what's happening on this blog, you can follow me
    <a href="https://mobile.twitter.com/brendt_gd" target="_blank" rel="noopener noreferrer">on Twitter</a> or subscribe to my newsletter:

    <form action="https://mail.stitcher.io/subscribe/81fa83d0-4a0b-4eff-b897-f6ce51dfb7f0" method="post" class="newsletter-form">
        <label for="newsletter-email-27">Email</label>
        <input type="email" name="email" id="newsletter-email-27"/>
        <button type="submit" class="cta cta-small">Subscribe</button>
    </form>
</div>
</p>
 ]]></summary>

                <updated>2020-07-25T00:00:00+00:00</updated>
            </entry>
                                <entry>
                <title><![CDATA[ PHP 8: named arguments ]]></title>

                <link rel="alternate" href="https://stitcher.io/blog/php-8-named-arguments"/>

                <id>https://www.stitcher.io/blog/php-8-named-arguments</id>

                <author>
                    <name><![CDATA[ Brent Roose ]]></name>
                </author>

                <summary type="html"><![CDATA[ <p>It was a <a href="/blog/why-we-need-named-params-in-php">close call</a>, but named arguments — also called named parameters — are supported in <a href="/blog/new-in-php-8">PHP 8</a>! In this post I'll discuss their ins and outs, but let me show you first what they look like with a few examples in the wild:</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-highlight  prop">setcookie</span>(
    <span class="hljs-highlight  prop">name</span>: <span class="hljs-string">'test'</span>,
    <span class="hljs-highlight  prop">expires</span>: <span class="hljs-highlight  prop">time</span>() + <span class="hljs-number">60</span> * <span class="hljs-number">60</span> * <span class="hljs-number">2</span>,
);</code></pre>
<p><em class="center small">Named arguments used on a built-in PHP function</em></p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CustomerData</span>
</span>{
    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span><span class="hljs-params">(
        <span class="hljs-highlight  keyword">public</span> <span class="hljs-highlight  type">string</span> <span class="hljs-highlight  prop">$name</span>,
        <span class="hljs-highlight  keyword">public</span> <span class="hljs-highlight  type">string</span> <span class="hljs-highlight  prop">$email</span>,
        <span class="hljs-highlight  keyword">public</span> <span class="hljs-highlight  type">int</span> <span class="hljs-highlight  prop">$age</span>,
    )</span> </span>{}
}

$data = <span class="hljs-keyword">new</span> <span class="hljs-highlight  type">CustomerData</span>(
    <span class="hljs-highlight  prop">name</span>: $input[<span class="hljs-string">'name'</span>],
    <span class="hljs-highlight  prop">email</span>: $input[<span class="hljs-string">'email'</span>],
    <span class="hljs-highlight  prop">age</span>: $input[<span class="hljs-string">'age'</span>],
);</code></pre>
<p><em class="center small">A DTO making use of <a href="/blog/constructor-promotion-in-php-8">promoted properties</a>, as well as named arguments</em></p>
<pre><code class="language-php hljs php" data-lang="php">$data = <span class="hljs-keyword">new</span> <span class="hljs-highlight  type">CustomerData</span>(...$customerRequest-&gt;<span class="hljs-highlight  prop">validated</span>());</code></pre>
<p><em class="center small">Named arguments also support array spreading</em></p>
<p>You might have guessed it from the examples: named arguments allow you to pass input data into a function, based on their argument name instead of the argument order.</p>
<p>I would argue named arguments are a great feature that will have a significant impact on my day-to-day programming life.
You're probably wondering about the details though: what if you pass a wrong name, what's up with that array spreading syntax? Well, let's look at all those questions in-depth.</p>
<p><div class="ad-container">
    <script async type="text/javascript" src="//cdn.carbonads.com/carbon.js?serve=CK7ICK3W&placement=stitcherio" id="_carbonads_js"></script>
</div>
</p>
<h2 id="why-named-arguments?"><a href="#why-named-arguments?" class="heading-anchor">#</a> Why named arguments?</h2>
<p>Let's say this feature was a highly debated one, and there were some <a href="/blog/why-we-need-named-params-in-php">counter arguments</a> to not adding them. However, I'd say their benefit far outweigh the fear of backwards compatibility problems or bloated APIs. The way I see it, they will allow us to write cleaner and more flexible code.</p>
<p>For one, named arguments allow you to skip default values. Take a look again at the cookie example:</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-highlight  prop">setcookie</span>(
    <span class="hljs-highlight  prop">name</span>: <span class="hljs-string">'test'</span>,
    <span class="hljs-highlight  prop">expires</span>: <span class="hljs-highlight  prop">time</span>() + <span class="hljs-number">60</span> * <span class="hljs-number">60</span> * <span class="hljs-number">2</span>,
);</code></pre>
<p>Its method signature is actually the following:</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-highlight  prop">setcookie</span> ( 
    <span class="hljs-highlight  type">string</span> $name, 
    <span class="hljs-highlight  type">string</span> $value = <span class="hljs-string">""</span>, 
    <span class="hljs-highlight  type">int</span> $expires = <span class="hljs-number">0</span>, 
    <span class="hljs-highlight  type">string</span> $path = <span class="hljs-string">""</span>, 
    <span class="hljs-highlight  type">string</span> $domain = <span class="hljs-string">""</span>, 
    <span class="hljs-highlight  type">bool</span> $secure = <span class="hljs-keyword">false</span>, 
    <span class="hljs-highlight  type">bool</span> $httponly = <span class="hljs-keyword">false</span>,
) : <span class="hljs-highlight  type">bool</span></code></pre>
<p>In the example I showed, we didn't need to set the a cookie <code>$value</code>, but we did need to set an expiration time. Named arguments made this method call a little more concise:</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-highlight  prop">setcookie</span>(
    <span class="hljs-string">'test'</span>,
    <span class="hljs-string">''</span>,
    <span class="hljs-highlight  prop">time</span>() + <span class="hljs-number">60</span> * <span class="hljs-number">60</span> * <span class="hljs-number">2</span>,
);</code></pre>
<p><em class="center small"><code>setcookie</code> without named arguments</em></p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-highlight  prop">setcookie</span>(
    <span class="hljs-highlight  prop">name</span>: <span class="hljs-string">'test'</span>,
    <span class="hljs-highlight  prop">expires</span>: <span class="hljs-highlight  prop">time</span>() + <span class="hljs-number">60</span> * <span class="hljs-number">60</span> * <span class="hljs-number">2</span>,
);</code></pre>
<p><em class="center small"><code>setcookie</code> with named arguments</em></p>
<p>Besides skipping arguments with default values, there's also the benefit of having clarity about which variable does what; something that's especially useful in functions with large method signatures. Now we could say that lots of arguments are usually a code smell; we still have to deal with them no matter what, so it's better to have a sane way of doing so, than nothing at all.</p>
<p><div class="author">
    Noticed a tpyo? You can submit a
    <a href="https://github.com/brendt/stitcher.io" target="_blank" rel="noopener noreferrer">PR</a> to fix it.

    If you want to stay up to date about what's happening on this blog, you can follow me
    <a href="https://mobile.twitter.com/brendt_gd" target="_blank" rel="noopener noreferrer">on Twitter</a> or subscribe to my newsletter:

    <form action="https://mail.stitcher.io/subscribe/81fa83d0-4a0b-4eff-b897-f6ce51dfb7f0" method="post" class="newsletter-form">
        <label for="newsletter-email-28">Email</label>
        <input type="email" name="email" id="newsletter-email-28"/>
        <button type="submit" class="cta cta-small">Subscribe</button>
    </form>
</div>
</p>
<h2 id="named-arguments-in-depth"><a href="#named-arguments-in-depth" class="heading-anchor">#</a> Named arguments in depth</h2>
<p>With the basics out of the way, let's look at what named arguments can and can't do.</p>
<p>First of all, named arguments can be combined with unnamed — also called ordered — arguments. In that case the ordered arguments must always come first.</p>
<p>Take our DTO example from before:</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CustomerData</span>
</span>{
    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span><span class="hljs-params">(
        <span class="hljs-highlight  keyword">public</span> <span class="hljs-highlight  type">string</span> <span class="hljs-highlight  prop">$name</span>,
        <span class="hljs-highlight  keyword">public</span> <span class="hljs-highlight  type">string</span> <span class="hljs-highlight  prop">$email</span>,
        <span class="hljs-highlight  keyword">public</span> <span class="hljs-highlight  type">int</span> <span class="hljs-highlight  prop">$age</span>,
    )</span> </span>{}
}</code></pre>
<p>You could construct it like so:</p>
<pre><code class="language-php hljs php" data-lang="php">$data = <span class="hljs-keyword">new</span> <span class="hljs-highlight  type">CustomerData</span>(
    $input[<span class="hljs-string">'name'</span>],
    <span class="hljs-highlight  prop">age</span>: $input[<span class="hljs-string">'age'</span>],
    <span class="hljs-highlight  prop">email</span>: $input[<span class="hljs-string">'email'</span>],
);</code></pre>
<p>However, having an ordered argument after a named one would throw an error:</p>
<pre><code class="language-php hljs php" data-lang="php">$data = <span class="hljs-keyword">new</span> <span class="hljs-highlight  type">CustomerData</span>(
    <span class="hljs-highlight  prop">age</span>: $input[<span class="hljs-string">'age'</span>],
    <span class="hljs-highlight  striped">$input[<span class="hljs-string">'name'</span>],</span>
    <span class="hljs-highlight  prop">email</span>: $input[<span class="hljs-string">'email'</span>],
);</code></pre>
<hr />
<p>Next, it's possible to use array spreading in combination with named arguments:</p>
<pre><code class="language-php hljs php" data-lang="php">$input = [
    <span class="hljs-string">'age'</span> =&gt; <span class="hljs-number">25</span>,
    <span class="hljs-string">'name'</span> =&gt; <span class="hljs-string">'Brent'</span>,
    <span class="hljs-string">'email'</span> =&gt; <span class="hljs-string">'brent@stitcher.io'</span>,
];

$data = <span class="hljs-keyword">new</span> <span class="hljs-highlight  type">CustomerData</span>(...$input);</code></pre>
<p><em>If</em>, however, there are missing required entries in the array, or if there's a key that's not listed as a named argument, an error will be thrown:</p>
<pre><code class="language-php hljs php" data-lang="php">$input = [
    <span class="hljs-string">'age'</span> =&gt; <span class="hljs-number">25</span>,
    <span class="hljs-string">'name'</span> =&gt; <span class="hljs-string">'Brent'</span>,
    <span class="hljs-string">'email'</span> =&gt; <span class="hljs-string">'brent@stitcher.io'</span>,
    <span class="hljs-highlight  striped"><span class="hljs-string">'unknownProperty'</span> =&gt; <span class="hljs-string">'This is not allowed'</span></span>,
];

$data = <span class="hljs-keyword">new</span> <span class="hljs-highlight  type">CustomerData</span>(<span class="hljs-highlight  striped">...$input</span>);</code></pre>
<p>It <em>is</em> possible to combine named and ordered arguments in an input array, but only if the ordered arguments follow the same rule as before: they must come first!</p>
<pre><code class="language-php hljs php" data-lang="php">$input = [
    <span class="hljs-string">'Brent'</span>,
    <span class="hljs-string">'age'</span> =&gt; <span class="hljs-number">25</span>,
    <span class="hljs-string">'email'</span> =&gt; <span class="hljs-string">'brent@stitcher.io'</span>,
];

$data = <span class="hljs-keyword">new</span> <span class="hljs-highlight  type">CustomerData</span>(...$input);</code></pre>
<hr />
<p><div class="sidenote">
    <p>
        Tired of managing servers?
        Check out <a href="https://gumroad.com/a/575280243" ping="https://analytics.stitcher.io/r" target="_blank" rel="noopener noreferrer">Serverless Visually Explained</a> by Matthieu Napoli and learn how to create scalable PHP applications on AWS.
    </p>
</div>
</p>
<hr />
<p>If you're using variadic functions, named arguments will be passed with their key name into the variadic arguments array. Take the following example:</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CustomerData</span>
</span>{
    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">new</span><span class="hljs-params">(...$args)</span>: <span class="hljs-title">self</span>
    </span>{
        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-keyword">self</span>(...$args);
    }

    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span><span class="hljs-params">(
        <span class="hljs-highlight  keyword">public</span> <span class="hljs-highlight  type">string</span> <span class="hljs-highlight  prop">$name</span>,
        <span class="hljs-highlight  keyword">public</span> <span class="hljs-highlight  type">string</span> <span class="hljs-highlight  prop">$email</span>,
        <span class="hljs-highlight  keyword">public</span> <span class="hljs-highlight  type">int</span> <span class="hljs-highlight  prop">$age</span>,
    )</span> </span>{}
}

$data = <span class="hljs-highlight  type">CustomerData</span>::<span class="hljs-highlight  prop"><span class="hljs-keyword">new</span></span>(
    <span class="hljs-highlight  prop">email</span>: <span class="hljs-string">'brent@stitcher.io'</span>,
    <span class="hljs-highlight  prop">age</span>: <span class="hljs-number">25</span>,
    <span class="hljs-highlight  prop">name</span>: <span class="hljs-string">'Brent'</span>,
);</code></pre>
<p>In this case, <code>$args</code> in <code><span class="hljs-highlight  type">CustomerData</span>::<span class="hljs-highlight  prop">new</span></code> will contain the following data:</p>
<pre><code class="language-php hljs php" data-lang="php">[
    <span class="hljs-string">'age'</span> =&gt; <span class="hljs-number">25</span>,
    <span class="hljs-string">'email'</span> =&gt; <span class="hljs-string">'brent@stitcher.io'</span>,
    <span class="hljs-string">'name'</span> =&gt; <span class="hljs-string">'Brent'</span>,
]</code></pre>
<hr />
<p><a href="/blog/attributes-in-php-8">Attributes</a> — also known as annotations — also support named arguments:</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ProductSubscriber</span>
</span>{
    <span class="hljs-comment">#[<span class="hljs-highlight  type">ListensTo</span>(<span class="hljs-highlight  prop">event</span>: <span class="hljs-highlight  type">ProductCreated</span><span class="hljs-highlight  keyword">::class</span>)]</span>
    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">onProductCreated</span><span class="hljs-params">(<span class="hljs-highlight  type">ProductCreated</span> $event)</span> </span>{ <span class="hljs-comment">/* … */</span> }
}</code></pre>
<hr />
<p>It's not possible to have a variable as the argument name:</p>
<pre><code class="language-php hljs php" data-lang="php">$field = <span class="hljs-string">'age'</span>;

$data = <span class="hljs-highlight  type">CustomerData</span>::<span class="hljs-highlight  prop"><span class="hljs-keyword">new</span></span>(
    <span class="hljs-highlight  striped">$field</span>: <span class="hljs-number">25</span>,
);</code></pre>
<hr />
<p>And finally, named arguments will deal in a pragmatic way with name changes during inheritance. Take this example:</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">EventListener</span> </span>{
    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">on</span><span class="hljs-params">($event, $handler)</span></span>;
}

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyListener</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">EventListener</span>
</span>{
    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">on</span><span class="hljs-params">($myEvent, $myHandler)</span>
    </span>{
        <span class="hljs-comment">// …</span>
    }
}</code></pre>
<p>PHP will silently allow changing the name of <code>$event</code> to <code>$myEvent</code>, and <code>$handler</code> to <code>$myHandler</code>; <em>but</em> if you decide to use named arguments using the parent's name, it will result in a runtime error:</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">register</span><span class="hljs-params">(EventListener $listener)</span>
</span>{
    $listener-&gt;<span class="hljs-highlight  prop">on</span>(
        <span class="hljs-highlight  striped prop">event</span>: <span class="hljs-keyword">$this</span>-&gt;<span class="hljs-highlight  prop">event</span>,
        <span class="hljs-highlight  striped prop">handler</span>: <span class="hljs-keyword">$this</span>-&gt;<span class="hljs-highlight  prop">handler</span>, 
    );
}</code></pre>
<p><em class="small center">Runtime error in case <code>$listener</code> is an instance of <code><span class="hljs-highlight  type">MyListener</span></code></em></p>
<p>This pragmatic approach was chosen to prevent a major breaking change when all inherited arguments would have to keep the same name. Seems like a good solution to me.</p>
<hr />
<p>That's most there is to tell about named arguments. If you want to know a little more backstory behind some design decisions, I'd encourage you to read <a href="https://wiki.php.net/rfc/named_params">the RFC</a>.</p>
<p>Are you looking forward to using named arguments? Let me know via <a target="_blank" href="https://twitter.com/brendt_gd">Twitter</a> or via <a href="mailto:brendt@stitcher.io">e-mail</a>!</p>
 ]]></summary>

                <updated>2020-07-23T00:00:00+00:00</updated>
            </entry>
                                <entry>
                <title><![CDATA[ PHP 8: before and after ]]></title>

                <link rel="alternate" href="https://stitcher.io/blog/php-8-before-and-after"/>

                <id>https://www.stitcher.io/blog/php-8-before-and-after</id>

                <author>
                    <name><![CDATA[ Brent Roose ]]></name>
                </author>

                <summary type="html"><![CDATA[ <p>It's only a few months before <a href="/blog/new-in-php-8">PHP 8</a> will be released, and honestly there are so many good features. In this post I want to share the real-life impact that PHP 8 will have on my own code.</p>
<p><div class="ad-container">
    <script async type="text/javascript" src="//cdn.carbonads.com/carbon.js?serve=CK7ICK3W&placement=stitcherio" id="_carbonads_js"></script>
</div>
</p>
<h2 id="events-subscribers-with-attributes"><a href="#events-subscribers-with-attributes" class="heading-anchor">#</a> Events subscribers with attributes</h2>
<p>I'm going to try not to abuse <a href="/blog/attributes-in-php-8">attributes</a>, but I think configuring event listeners is an example of an annotation I'll be using extensively.</p>
<p>You might know that I've been working on <a href="/blog/combining-event-sourcing-and-stateful-systems">event sourced systems</a> lately, and I can tell you: there's lots of event configuration to do. Take this simple projector, for example:</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-comment">// Before</span>

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CartsProjector</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Projector</span>
</span>{
    <span class="hljs-keyword">use</span> <span class="hljs-title">ProjectsEvents</span>;

    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">array</span> $handlesEvents = [
        <span class="hljs-highlight  type">CartStartedEvent</span>::class =&gt; <span class="hljs-string">'onCartStarted'</span>,
        <span class="hljs-highlight  type">CartItemAddedEvent</span>::class =&gt; <span class="hljs-string">'onCartItemAdded'</span>,
        <span class="hljs-highlight  type">CartItemRemovedEvent</span>::class =&gt; <span class="hljs-string">'onCartItemRemoved'</span>,
        <span class="hljs-highlight  type">CartExpiredEvent</span>::class =&gt; <span class="hljs-string">'onCartExpired'</span>,
        <span class="hljs-highlight  type">CartCheckedOutEvent</span>::class =&gt; <span class="hljs-string">'onCartCheckedOut'</span>,
        <span class="hljs-highlight  type">CouponAddedToCartItemEvent</span>::class =&gt; <span class="hljs-string">'onCouponAddedToCartItem'</span>,
    ];

    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">onCartStarted</span><span class="hljs-params">(<span class="hljs-highlight  type">CartStartedEvent</span> $event)</span>: <span class="hljs-title">void</span>
    </span>{ <span class="hljs-comment">/* … */</span> }

    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">onCartItemAdded</span><span class="hljs-params">(<span class="hljs-highlight  type">CartItemAddedEvent</span> $event)</span>: <span class="hljs-title">void</span>
    </span>{ <span class="hljs-comment">/* … */</span> }

    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">onCartItemRemoved</span><span class="hljs-params">(<span class="hljs-highlight  type">CartItemRemovedEvent</span> $event)</span>: <span class="hljs-title">void</span>
    </span>{ <span class="hljs-comment">/* … */</span> }

    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">onCartCheckedOut</span><span class="hljs-params">(<span class="hljs-highlight  type">CartCheckedOutEvent</span> $event)</span>: <span class="hljs-title">void</span>
    </span>{ <span class="hljs-comment">/* … */</span> }

    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">onCartExpired</span><span class="hljs-params">(<span class="hljs-highlight  type">CartExpiredEvent</span> $event)</span>: <span class="hljs-title">void</span>
    </span>{ <span class="hljs-comment">/* … */</span> }

    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">onCouponAddedToCartItem</span><span class="hljs-params">(<span class="hljs-highlight  type">CouponAddedToCartItemEvent</span> $event)</span>: <span class="hljs-title">void</span>
    </span>{ <span class="hljs-comment">/* … */</span> }
}</code></pre>
<p><em class="center small">PHP 7.4</em></p>
<p>There are two benefits attributes will give me:</p>
<ul>
<li>Event listener configuration and handlers are put together, I don't have to scroll to the top of the file to know whether a listener is configured correctly.</li>
<li>I don't have to bother anymore writing and managing method names as strings: your IDE can't autocomplete them, there's no static analysis on typos and method renaming doesn't work.</li>
</ul>
<p>Luckily, PHP 8 solves these problems:</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CartsProjector</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Projector</span>
</span>{
    <span class="hljs-keyword">use</span> <span class="hljs-title">ProjectsEvents</span>;

    <span class="hljs-comment">#[<span class="hljs-highlight  type">SubscribesTo</span>(<span class="hljs-highlight  type">CartStartedEvent</span><span class="hljs-highlight  keyword">::class</span>)]</span>
    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">onCartStarted</span><span class="hljs-params">(<span class="hljs-highlight  type">CartStartedEvent</span> $event)</span>: <span class="hljs-title">void</span>
    </span>{ <span class="hljs-comment">/* … */</span> }

    <span class="hljs-comment">#[<span class="hljs-highlight  type">SubscribesTo</span>(<span class="hljs-highlight  type">CartItemAddedEvent</span><span class="hljs-highlight  keyword">::class</span>)]</span>
    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">onCartItemAdded</span><span class="hljs-params">(<span class="hljs-highlight  type">CartItemAddedEvent</span> $event)</span>: <span class="hljs-title">void</span>
    </span>{ <span class="hljs-comment">/* … */</span> }

    <span class="hljs-comment">#[<span class="hljs-highlight  type">SubscribesTo</span>(<span class="hljs-highlight  type">CartItemRemovedEvent</span><span class="hljs-highlight  keyword">::class</span>)]</span>
    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">onCartItemRemoved</span><span class="hljs-params">(<span class="hljs-highlight  type">CartItemRemovedEvent</span> $event)</span>: <span class="hljs-title">void</span>
    </span>{ <span class="hljs-comment">/* … */</span> }

    <span class="hljs-comment">#[<span class="hljs-highlight  type">SubscribesTo</span>(<span class="hljs-highlight  type">CartCheckedOutEvent</span><span class="hljs-highlight  keyword">::class</span>)]</span>
    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">onCartCheckedOut</span><span class="hljs-params">(<span class="hljs-highlight  type">CartCheckedOutEvent</span> $event)</span>: <span class="hljs-title">void</span>
    </span>{ <span class="hljs-comment">/* … */</span> }

    <span class="hljs-comment">#[<span class="hljs-highlight  type">SubscribesTo</span>(<span class="hljs-highlight  type">CartExpiredEvent</span><span class="hljs-highlight  keyword">::class</span>)]</span>
    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">onCartExpired</span><span class="hljs-params">(<span class="hljs-highlight  type">CartExpiredEvent</span> $event)</span>: <span class="hljs-title">void</span>
    </span>{ <span class="hljs-comment">/* … */</span> }

    <span class="hljs-comment">#[<span class="hljs-highlight  type">SubscribesTo</span>(<span class="hljs-highlight  type">CouponAddedToCartItemEvent</span><span class="hljs-highlight  keyword">::class</span>)]</span>
    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">onCouponAddedToCartItem</span><span class="hljs-params">(<span class="hljs-highlight  type">CouponAddedToCartItemEvent</span> $event)</span>: <span class="hljs-title">void</span>
    </span>{ <span class="hljs-comment">/* … */</span> }
}</code></pre>
<p><em class="center small">PHP 8</em></p>
<h2 id="static-instead-of-doc-blocks"><a href="#static-instead-of-doc-blocks" class="heading-anchor">#</a> Static instead of doc blocks</h2>
<p>A smaller one, but this one will have a day-by-day impact. I often find myself still needing doc blocks because of two things: static return types and generics. The latter one can't be solved yet, but luckily the first one will in PHP 8!</p>
<p>When I'd write this in PHP 7.4:</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-comment">/**
 * <span class="hljs-doctag">@return</span> <span class="hljs-highlight  type">static</span>
 */</span>
<span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">new</span><span class="hljs-params">()</span>
</span>{
    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-keyword">static</span>();
}</code></pre>
<p><em class="center small">PHP 7.4</em></p>
<p>I'll now be able to write:</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">new</span><span class="hljs-params">()</span>: <span class="hljs-highlight  type"><span class="hljs-title">static</span></span>
</span>{
    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-keyword">static</span>();
}</code></pre>
<p><em class="center small">PHP 8</em></p>
<p><div class="sidenote">
    <p>
        Tired of managing servers?
        Check out <a href="https://gumroad.com/a/575280243" ping="https://analytics.stitcher.io/r" target="_blank" rel="noopener noreferrer">Serverless Visually Explained</a> by Matthieu Napoli and learn how to create scalable PHP applications on AWS.
    </p>
</div>
</p>
<h2 id="dto's,-property-promotion-and-named-arguments"><a href="#dto's,-property-promotion-and-named-arguments" class="heading-anchor">#</a> DTO's, property promotion and named arguments</h2>
<p>If you read my blog, you know I wrote quite a bit about the use of PHP's type system combined with <a href="/blog/laravel-beyond-crud-02-working-with-data">data transfer objects</a>. Naturally, I use lots of DTOs in my own code, so you can imagine how happy I am, being able to rewrite this:</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CustomerData</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">DataTransferObject</span>
</span>{
    <span class="hljs-keyword">public</span> <span class="hljs-highlight  type">string</span> <span class="hljs-highlight  prop">$name</span>;

    <span class="hljs-keyword">public</span> <span class="hljs-highlight  type">string</span> <span class="hljs-highlight  prop">$email</span>;

    <span class="hljs-keyword">public</span> <span class="hljs-highlight  type">int</span> <span class="hljs-highlight  prop">$age</span>;
    
    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fromRequest</span><span class="hljs-params">(
        <span class="hljs-highlight  type">CustomerRequest</span> $request
    )</span>: <span class="hljs-title">self</span> </span>{
        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-keyword">self</span>([
            <span class="hljs-string">'name'</span> =&gt; $request-&gt;<span class="hljs-highlight  prop">get</span>(<span class="hljs-string">'name'</span>),
            <span class="hljs-string">'email'</span> =&gt; $request-&gt;<span class="hljs-highlight  prop">get</span>(<span class="hljs-string">'email'</span>),
            <span class="hljs-string">'age'</span> =&gt; $request-&gt;<span class="hljs-highlight  prop">get</span>(<span class="hljs-string">'age'</span>),
        ]);
    }
}

$data = <span class="hljs-highlight  type">CustomerData</span>::<span class="hljs-highlight  prop">fromRequest</span>($customerRequest);</code></pre>
<p><em class="center small">PHP 7.4</em></p>
<p>As this:</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CustomerData</span>
</span>{
    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span><span class="hljs-params">(
        <span class="hljs-highlight  keyword">public</span> <span class="hljs-highlight  type">string</span> <span class="hljs-highlight  prop">$name</span>,
        <span class="hljs-highlight  keyword">public</span> <span class="hljs-highlight  type">string</span> <span class="hljs-highlight  prop">$email</span>,
        <span class="hljs-highlight  keyword">public</span> <span class="hljs-highlight  type">int</span> <span class="hljs-highlight  prop">$age</span>,
    )</span> </span>{}
}

$data = <span class="hljs-keyword">new</span> <span class="hljs-highlight  type">CustomerData</span>(...$customerRequest-&gt;<span class="hljs-highlight  prop">validated</span>());</code></pre>
<p><em class="center small">PHP 8</em></p>
<p>Note the use of both <a href="/blog/constructor-promotion-in-php-8">constructor property promotion</a>, as well as named arguments. Yes, they can be passed using named arrays and the spread operator!</p>
<h2 id="enums-and-the-match-expression"><a href="#enums-and-the-match-expression" class="heading-anchor">#</a> Enums and the match expression</h2>
<p>Do you sometimes find yourself using an enum with some methods on it, that will give a different result based on the enum value?</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-comment">/**
 * <span class="hljs-doctag">@method</span> static self PENDING()
 * <span class="hljs-doctag">@method</span> static self PAID()
 */</span>
<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">InvoiceState</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Enum</span>
</span>{
    <span class="hljs-keyword">private</span> <span class="hljs-keyword">const</span> PENDING = <span class="hljs-string">'pending'</span>;
    <span class="hljs-keyword">private</span> <span class="hljs-keyword">const</span> PAID = <span class="hljs-string">'paid'</span>;

    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getColour</span><span class="hljs-params">()</span>: <span class="hljs-title">string</span>
    </span>{
        <span class="hljs-keyword">return</span> [
            <span class="hljs-keyword">self</span>::PENDING =&gt; <span class="hljs-string">'orange'</span>,
            <span class="hljs-keyword">self</span>::PAID =&gt; <span class="hljs-string">'green'</span>,
        ][<span class="hljs-keyword">$this</span>-&gt;<span class="hljs-highlight  prop">value</span>] ?? <span class="hljs-string">'gray'</span>;   
    }
}</code></pre>
<p><em class="center small">PHP 7.4</em></p>
<p>I would argue that for more complex conditions, you're better off using <a href="/blog/laravel-beyond-crud-05-states">the state pattern</a>, yet there are cases where an enum does suffice. This weird array syntax already is a shorthand for a more verbose conditional:</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-comment">/**
 * <span class="hljs-doctag">@method</span> static self PENDING()
 * <span class="hljs-doctag">@method</span> static self PAID()
 */</span>
<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">InvoiceState</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Enum</span>
</span>{
    <span class="hljs-keyword">private</span> <span class="hljs-keyword">const</span> PENDING = <span class="hljs-string">'pending'</span>;
    <span class="hljs-keyword">private</span> <span class="hljs-keyword">const</span> PAID = <span class="hljs-string">'paid'</span>;

    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getColour</span><span class="hljs-params">()</span>: <span class="hljs-title">string</span>
    </span>{
        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">$this</span>-&gt;<span class="hljs-highlight  prop">value</span> === <span class="hljs-keyword">self</span>::PENDING) {
            <span class="hljs-keyword">return</span> <span class="hljs-string">'orange'</span>;
        }
    
        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">$this</span>-&gt;<span class="hljs-highlight  prop">value</span> === <span class="hljs-keyword">self</span>::PAID) {
            <span class="hljs-keyword">return</span> <span class="hljs-string">'green'</span>
        }

        <span class="hljs-keyword">return</span> <span class="hljs-string">'gray'</span>;
    }
}</code></pre>
<p><em class="center small">PHP 7.4 — alternative</em></p>
<p>But with PHP 8, we can use the <a href="/blog/php-8-match-or-switch"><code><span class="hljs-highlight  keyword">match</span></code> expression</a> instead!</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-comment">/**
 * <span class="hljs-doctag">@method</span> static self PENDING()
 * <span class="hljs-doctag">@method</span> static self PAID()
 */</span>
<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">InvoiceState</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Enum</span>
</span>{
    <span class="hljs-keyword">private</span> <span class="hljs-keyword">const</span> PENDING = <span class="hljs-string">'pending'</span>;
    <span class="hljs-keyword">private</span> <span class="hljs-keyword">const</span> PAID = <span class="hljs-string">'paid'</span>;

    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getColour</span><span class="hljs-params">()</span>: <span class="hljs-title">string</span>
    </span>{
        <span class="hljs-keyword">return</span> <span class="hljs-highlight  keyword">match</span> (<span class="hljs-keyword">$this</span>-&gt;value) {
            <span class="hljs-keyword">self</span>::PENDING =&gt; <span class="hljs-string">'orange'</span>,
            <span class="hljs-keyword">self</span>::PAID =&gt; <span class="hljs-string">'green'</span>,
            <span class="hljs-highlight  keyword"><span class="hljs-keyword">default</span></span> =&gt; <span class="hljs-string">'gray'</span>,
        };
    }
}</code></pre>
<p><em class="center small">PHP 8</em></p>
<p><div class="author">
    Noticed a tpyo? You can submit a
    <a href="https://github.com/brendt/stitcher.io" target="_blank" rel="noopener noreferrer">PR</a> to fix it.

    If you want to stay up to date about what's happening on this blog, you can follow me
    <a href="https://mobile.twitter.com/brendt_gd" target="_blank" rel="noopener noreferrer">on Twitter</a> or subscribe to my newsletter:

    <form action="https://mail.stitcher.io/subscribe/81fa83d0-4a0b-4eff-b897-f6ce51dfb7f0" method="post" class="newsletter-form">
        <label for="newsletter-email-31">Email</label>
        <input type="email" name="email" id="newsletter-email-31"/>
        <button type="submit" class="cta cta-small">Subscribe</button>
    </form>
</div>
</p>
<h2 id="union-types-instead-of-doc-blocks"><a href="#union-types-instead-of-doc-blocks" class="heading-anchor">#</a> Union types instead of doc blocks</h2>
<p>When I mentioned the <code><span class="hljs-highlight  type">static</span></code> return type before, I forgot another use case where docblock type hints were required: union types. At least, they were required before, because PHP 8 supports them natively!</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-comment">/**
 * <span class="hljs-doctag">@param</span> <span class="hljs-highlight  type">string|int</span> $input
 *
 * <span class="hljs-doctag">@return</span> <span class="hljs-highlight  type">string</span> 
 */</span>
<span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">sanitize</span><span class="hljs-params">($input)</span>: <span class="hljs-title">string</span></span>;</code></pre>
<p><em class="center small">PHP 7.4</em></p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">sanitize</span><span class="hljs-params">(<span class="hljs-highlight  type">string|int</span> $input)</span>: <span class="hljs-title">string</span></span>;</code></pre>
<p><em class="center small">PHP 8</em></p>
<h2 id="throw-expressions"><a href="#throw-expressions" class="heading-anchor">#</a> Throw expressions</h2>
<p>Before PHP 8, you couldn't use <code><span class="hljs-highlight  keyword">throw</span></code> in an expression, meaning you'd have to do explicit checks like so:</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">(<span class="hljs-highlight  type">array</span> $input)</span>: <span class="hljs-title">void</span>
</span>{
    <span class="hljs-keyword">if</span> (! <span class="hljs-keyword">isset</span>($input[<span class="hljs-string">'bar'</span>])) {
        <span class="hljs-keyword">throw</span> <span class="hljs-highlight  type">BarIsMissing</span>::<span class="hljs-highlight  prop"><span class="hljs-keyword">new</span></span>();
    }
    
    $bar = $input[<span class="hljs-string">'bar'</span>];

    <span class="hljs-comment">// …</span>
}</code></pre>
<p><em class="center small">PHP 7.4</em></p>
<p>In PHP 8, <code><span class="hljs-highlight  keyword">throw</span></code> has become an expression, meaning you can use it like so:</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">(<span class="hljs-highlight  type">array</span> $input)</span>: <span class="hljs-title">void</span>
</span>{
    $bar = $input[<span class="hljs-string">'bar'</span>] ?? <span class="hljs-keyword">throw</span> <span class="hljs-highlight  type">BarIsMissing</span>::<span class="hljs-highlight  prop"><span class="hljs-keyword">new</span></span>();

    <span class="hljs-comment">// …</span>
}</code></pre>
<p><em class="center small">PHP 8</em></p>
<h2 id="the-nullsafe-operator"><a href="#the-nullsafe-operator" class="heading-anchor">#</a> The nullsafe operator</h2>
<p>If you're familiar with the <a href="/blog/shorthand-comparisons-in-php#null-coalescing-operator">null coalescing operator</a> you're already familiar with its shortcomings: it doesn't work on method calls. Instead you need intermediate checks, or rely on <code><span class="hljs-highlight  prop">optional</span></code> helpers provided by some frameworks:</p>
<pre><code class="language-php hljs php" data-lang="php">$startDate = $booking-&gt;<span class="hljs-highlight  prop">getStartDate</span>();

$dateAsString = $startDate ? $startDate-&gt;<span class="hljs-highlight  prop">asDateTimeString</span>() : <span class="hljs-keyword">null</span>;</code></pre>
<p><em class="center small">PHP 7.4</em></p>
<p>With the addition of the nullsafe operator, we can now have null coalescing-like behaviour on methods!</p>
<pre><code class="language-php hljs php" data-lang="php">$dateAsString = $booking-&gt;<span class="hljs-highlight  prop">getStartDate</span>()?-&gt;<span class="hljs-highlight  prop">asDateTimeString</span>();</code></pre>
<p><em class="center small">PHP 8</em></p>
<p><div class="sidenote">
    <p>
        Tired of managing servers?
        Check out <a href="https://gumroad.com/a/575280243" ping="https://analytics.stitcher.io/r" target="_blank" rel="noopener noreferrer">Serverless Visually Explained</a> by Matthieu Napoli and learn how to create scalable PHP applications on AWS.
    </p>
</div>
</p>
<p>What's your favourite <a href="/blog/new-in-php-8">PHP 8 feature</a>? Let me know via <a target="_blank" href="https://twitter.com/brendt_gd">Twitter</a> or via <a href="mailto:brendt@stitcher.io">e-mail</a>!</p>
 ]]></summary>

                <updated>2020-07-20T00:00:00+00:00</updated>
            </entry>
                                <entry>
                <title><![CDATA[ Shorthand comparisons in PHP ]]></title>

                <link rel="alternate" href="https://stitcher.io/blog/shorthand-comparisons-in-php"/>

                <id>https://www.stitcher.io/blog/shorthand-comparisons-in-php</id>

                <author>
                    <name><![CDATA[ Brent Roose ]]></name>
                </author>

                <summary type="html"><![CDATA[ <p>You probably already know some comparison operators in PHP.
Things like the ternary <code>?:</code>, the null coalescing <code>??</code> and the spaceship <code><=></code> operators.
But do you really know how they work?
Understanding these operators makes you use them more, resulting in a cleaner codebase.</p>
<p>Before looking at each operator in depth, here's a summary of what each of them does:</p>
<ul>
<li>The <a href="#ternary-operator">ternary operator</a> is used to shorten if/else structures</li>
<li>The <a href="#null-coalescing-operator">null coalescing operator</a> is used to provide default values instead of null</li>
<li>The <a href="#spaceship-operator">spaceship operator</a> is used to compare two values</li>
</ul>
<p><div class="ad-container">
    <script async type="text/javascript" src="//cdn.carbonads.com/carbon.js?serve=CK7ICK3W&placement=stitcherio" id="_carbonads_js"></script>
</div>
</p>
<h2 id="ternary-operator"><a href="#ternary-operator" class="heading-anchor">#</a> Ternary operator</h2>
<p>The ternary operator is a shorthand for the <code>if {} else {}</code> structure. Instead of writing this:</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-keyword">if</span> ($condition) {
    $result = <span class="hljs-string">'foo'</span> 
} <span class="hljs-keyword">else</span> {
    $result = <span class="hljs-string">'bar'</span>
}</code></pre>
<p>You can write this:</p>
<pre><code class="language-php hljs php" data-lang="php">$result = $condition ? <span class="hljs-string">'foo'</span> : <span class="hljs-string">'bar'</span>;</code></pre>
<p>If this <code>$condition</code> evaluates to <code>true</code>, the lefthand operand will be assigned to <code>$result</code>.
If the condition evaluates to <code>false</code>, the righthand will be used.</p>
<p>Interesting fact: the name <em>ternary operator</em> actually means "an operator which acts on three operands".
An <em>operand</em> is the term used to denote the parts needed by an expression.
The ternary operator is the only operator in PHP which requires three operands:
the condition, the <code>true</code> and the <code>false</code> result. Similarly, there are also binary and unary operators.
You can read more about it <a target="_blank" href="http://php.net/manual/en/language.operators.php">here</a>.</p>
<p>Back to ternary operators: do you know which expressions evaluate to <code>true</code>, and which don't?
Take a look at the <code>boolean</code> column of <a target="_blank" href="http://php.net/manual/en/types.comparisons.php">this table</a>.</p>
<p>The ternary operator will use its lefthand operand when the condition evaluates to <code>true</code>.
This could be a string, an integer, a boolean etc.
The righthand operand will be used for so called "falsy values".</p>
<p>Examples would be <code>0</code> or <code>'0'</code>, an empty array or string, <code>null</code>, an undefined or unassigned variable, and of course <code>false</code> itself.
All these values will make the ternary operator use its righthand operand.</p>
<p><div class="author">
    Noticed a tpyo? You can submit a
    <a href="https://github.com/brendt/stitcher.io" target="_blank" rel="noopener noreferrer">PR</a> to fix it.

    If you want to stay up to date about what's happening on this blog, you can follow me
    <a href="https://mobile.twitter.com/brendt_gd" target="_blank" rel="noopener noreferrer">on Twitter</a> or subscribe to my newsletter:

    <form action="https://mail.stitcher.io/subscribe/81fa83d0-4a0b-4eff-b897-f6ce51dfb7f0" method="post" class="newsletter-form">
        <label for="newsletter-email-33">Email</label>
        <input type="email" name="email" id="newsletter-email-33"/>
        <button type="submit" class="cta cta-small">Subscribe</button>
    </form>
</div>
</p>
<h3 id="shorthand-ternary-operator"><a href="#shorthand-ternary-operator" class="heading-anchor">#</a> Shorthand ternary operator</h3>
<p>Since PHP 5.3, it's possible to leave out the lefthand operand, allowing for even shorter expressions:</p>
<pre><code class="language-php hljs php" data-lang="php">$result = $initial ?: <span class="hljs-string">'default'</span>;</code></pre>
<p>In this case, the value of <code>$result</code> will be the value of <code>$initial</code>, unless <code>$initial</code> evaluates to <code>false</code>,
in which case the string <code>'default'</code> is used.</p>
<p>You could write this expression the same way using the normal ternary operator:</p>
<pre><code class="language-php hljs php" data-lang="php">$result = $condition ? $condition : <span class="hljs-string">'default'</span>;</code></pre>
<p>Ironically, by leaving out the second operand of the ternary operator, it actually becomes a <strong>binary operator</strong>.</p>
<h3 id="chaining-ternary-operators"><a href="#chaining-ternary-operators" class="heading-anchor">#</a> Chaining ternary operators</h3>
<p>The following, even though it seems logical; doesn't work in PHP:</p>
<pre><code class="language-php hljs php" data-lang="php">$result = $firstCondition
    ? <span class="hljs-string">'truth'</span>
    : $elseCondition
        ? <span class="hljs-string">'elseTrue'</span>
        : <span class="hljs-string">'elseFalse'</span>;</code></pre>
<p>The reason because is that the ternary operator in PHP is left-associative, and thus parsed in a very strange way.
The above example would always evaluate the <code>$elseCondition</code> part first, so even when <code>$firstCondition</code> would be <code>true</code>, you'd never see its output.</p>
<p>I believe the right thing to do is to avoid nested ternary operators alltogether.
You can read more about this strange behaviour
in this <a target="_blank" href="https://stackoverflow.com/questions/20559150/ternary-operator-left-associativity/38231137#38231137">Stack Overflow answer</a>.</p>
<p>Furthermore, as PHP 7.4, the use of chained ternaries without brackets is <a href="/blog/new-in-php-74#left-associative-ternary-operator-deprecation-rfc">deprecated</a>.</p>
<p><div class="sidenote">
    <p>
        Tired of managing servers?
        Check out <a href="https://gumroad.com/a/575280243" ping="https://analytics.stitcher.io/r" target="_blank" rel="noopener noreferrer">Serverless Visually Explained</a> by Matthieu Napoli and learn how to create scalable PHP applications on AWS.
    </p>
</div>
</p>
<h2 id="null-coalescing-operator"><a href="#null-coalescing-operator" class="heading-anchor">#</a> Null coalescing operator</h2>
<p>Did you take a look at <a target="_blank" href="http://php.net/manual/en/types.comparisons.php">the types comparison table</a> earlier?
The null coalescing operator is available since PHP 7.0.
It similar to the ternary operator, but will behave like <code>isset</code> on the lefthand operand instead of just using its boolean value.
This makes this operator especially useful for arrays and assigning defaults when a variable is not set.</p>
<pre><code class="language-php hljs php" data-lang="php">$undefined ?? <span class="hljs-string">'fallback'</span>; <span class="hljs-comment">// 'fallback'</span>

$unassigned;
$unassigned ?? <span class="hljs-string">'fallback'</span>; <span class="hljs-comment">// 'fallback'</span>

$assigned = <span class="hljs-string">'foo'</span>;
$assigned ?? <span class="hljs-string">'fallback'</span>; <span class="hljs-comment">// 'foo'</span>

<span class="hljs-string">''</span> ?? <span class="hljs-string">'fallback'</span>; <span class="hljs-comment">// ''</span>
<span class="hljs-string">'foo'</span> ?? <span class="hljs-string">'fallback'</span>; <span class="hljs-comment">// 'foo'</span>
<span class="hljs-string">'0'</span> ?? <span class="hljs-string">'fallback'</span>; <span class="hljs-comment">// '0'</span>
<span class="hljs-number">0</span> ?? <span class="hljs-string">'fallback'</span>; <span class="hljs-comment">// 0</span>
<span class="hljs-keyword">false</span> ?? <span class="hljs-string">'fallback'</span>; <span class="hljs-comment">// false</span></code></pre>
<p>The null coalescing operator takes two operands, making it a <em>binary</em> operator.
"Coalescing" by the way, means "coming together to form one mass or whole".
It will take two operands, and decide which of those to use based on the value of the lefthand operand.</p>
<h3 id="null-coalescing-on-arrays"><a href="#null-coalescing-on-arrays" class="heading-anchor">#</a> Null coalescing on arrays</h3>
<p>This operator is especially useful in combination with arrays, because of its acts like <code>isset</code>.
This means you can quickly check for the existance of keys, even nested keys, without writing verbose expressions.</p>
<pre><code class="language-php hljs php" data-lang="php">$input = [
    <span class="hljs-string">'key'</span> =&gt; <span class="hljs-string">'key'</span>,
    <span class="hljs-string">'nested'</span> =&gt; [
        <span class="hljs-string">'key'</span> =&gt; <span class="hljs-keyword">true</span>
    ]
];

$input[<span class="hljs-string">'key'</span>] ?? <span class="hljs-string">'fallback'</span>; <span class="hljs-comment">// 'key'</span>
$input[<span class="hljs-string">'nested'</span>][<span class="hljs-string">'key'</span>] ?? <span class="hljs-string">'fallback'</span>; <span class="hljs-comment">// true</span>
$input[<span class="hljs-string">'undefined'</span>] ?? <span class="hljs-string">'fallback'</span>; <span class="hljs-comment">// 'fallback'</span>
$input[<span class="hljs-string">'nested'</span>][<span class="hljs-string">'undefined'</span>] ?? <span class="hljs-string">'fallback'</span>; <span class="hljs-comment">// 'fallback'</span>

<span class="hljs-keyword">null</span> ?? <span class="hljs-string">'fallback'</span>; <span class="hljs-comment">// 'fallback'</span></code></pre>
<p>The first example could also be written using a ternary operator:</p>
<pre><code class="language-php hljs php" data-lang="php">$output = <span class="hljs-keyword">isset</span>($input[<span class="hljs-string">'key'</span>]) ? $input[<span class="hljs-string">'key'</span>] : <span class="hljs-string">'fallback'</span>;</code></pre>
<p>Note that it's impossible to use the shorthand ternary operator when checking the existance of array keys.
It will either trigger an error or return a boolean, instead of the real lefthand operand's value.</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-comment">// Returns `true` instead of the value of `$input['key']`</span>
$output = <span class="hljs-keyword">isset</span>($input[<span class="hljs-string">'key'</span>]) ?: <span class="hljs-string">'fallback'</span> 

<span class="hljs-comment">// The following will trigger an 'undefined index' notice </span>
<span class="hljs-comment">// when $output is no array or has no 'key'.</span>
<span class="hljs-comment">//</span>
<span class="hljs-comment">// It will trigger an 'undefined variable' notice </span>
<span class="hljs-comment">// when $output doesn't exist.</span>
$output = $input[<span class="hljs-string">'key'</span>] ?: <span class="hljs-string">'fallback'</span>;</code></pre>
<h3 id="null-coalesce-chaining"><a href="#null-coalesce-chaining" class="heading-anchor">#</a> Null coalesce chaining</h3>
<p>The null coalescing operator can easily be chained:</p>
<pre><code class="language-php hljs php" data-lang="php">$input = [
    <span class="hljs-string">'key'</span> =&gt; <span class="hljs-string">'key'</span>,
];

$input[<span class="hljs-string">'undefined'</span>] ?? $input[<span class="hljs-string">'key'</span>] ?? <span class="hljs-string">'fallback'</span>; <span class="hljs-comment">// 'key'</span></code></pre>
<h3 id="nested-coalescing"><a href="#nested-coalescing" class="heading-anchor">#</a> Nested coalescing</h3>
<p>It's possible to use the null coalescing operator on nested object properties, even when a property in the chain is <code>null</code>.</p>
<pre><code class="language-php hljs php" data-lang="php">$a = (<span class="hljs-highlight  type">object</span>) [
    <span class="hljs-string">'prop'</span> =&gt; <span class="hljs-keyword">null</span>,
];

<span class="hljs-highlight  prop">var_dump</span>($a-&gt;<span class="hljs-highlight  prop">prop</span>-&gt;<span class="hljs-highlight  prop">b</span> ?? <span class="hljs-string">'empty'</span>);

<span class="hljs-comment">// 'empty'</span></code></pre>
<h3 id="null-coalescing-assignment-operator"><a href="#null-coalescing-assignment-operator" class="heading-anchor">#</a> Null coalescing assignment operator</h3>
<p>In PHP 7,4, we can expect an even shorter syntax called the <a href="https://wiki.php.net/rfc/null_coalesce_equal_operator">"null coalescing assignment operator"</a>.</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-comment">// This operator will be available in PHP 7.4</span>

<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">(array $parameters = [])</span> </span>{
    $parameters[<span class="hljs-string">'property'</span>] ??= <span class="hljs-string">'default'</span>;
}</code></pre>
<p>In this example, <code>$parameters['property']</code> will be set to <code>'default'</code>, unless it is set in the array passed to the function.
This would be equivalent to the following, using the current null coalescing operator:</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">(array $parameters = [])</span> </span>{
    $parameters[<span class="hljs-string">'property'</span>] = $parameters[<span class="hljs-string">'property'</span>] ?? <span class="hljs-string">'default'</span>;
}</code></pre>
<h2 id="spaceship-operator"><a href="#spaceship-operator" class="heading-anchor">#</a> Spaceship operator</h2>
<p>The spaceship operator, while having quite a peculiar name, can be very useful.
It's an operator used for comparison.
It will always return one of three values: <code>0</code>, <code>-1</code> or <code>1</code>.</p>
<p><code>0</code> will be returned when both operands are equals,
<code>1</code> when the left operand is larger, and <code>-1</code> when the right operand is larger.
Let's take a look at a simple example:</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-number">1</span> &lt;=&gt; <span class="hljs-number">2</span>; <span class="hljs-comment">// Will return -1, as 2 is larger than 1.</span></code></pre>
<p>This simple example isn't all that exiting, right?
However, the spaceship operator can compare a lot more than simple values!</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-comment">// It can compare strings,</span>
<span class="hljs-string">'a'</span> &lt;=&gt; <span class="hljs-string">'z'</span>; <span class="hljs-comment">// -1</span>

<span class="hljs-comment">// and arrays,</span>
[<span class="hljs-number">2</span>, <span class="hljs-number">1</span>] &lt;=&gt; [<span class="hljs-number">2</span>, <span class="hljs-number">1</span>]; <span class="hljs-comment">// 0</span>

<span class="hljs-comment">// nested arrays,</span>
[[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>], [<span class="hljs-number">2</span>, <span class="hljs-number">2</span>]] &lt;=&gt; [[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>], [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>]]; <span class="hljs-comment">// 1</span>

<span class="hljs-comment">// and even casing.</span>
<span class="hljs-string">'Z'</span> &lt;=&gt; <span class="hljs-string">'z'</span>; <span class="hljs-comment">// -1</span></code></pre>
<p>Strangely enough, when comparing letter casing, the lowercase letter is considered the highest.
There's a simple explanation though.
String comparison is done by comparing character per character.
As soon as a character differs, their ASCII value is compared.
Because lowercase letters come after uppercase ones in the ASCII table, they have a higher value.</p>
<h3 id="comparing-objects"><a href="#comparing-objects" class="heading-anchor">#</a> Comparing objects</h3>
<p>The spaceship operator can almost compare anything, even objects.
The way objects are compared is based on the kind of object.
Built-in PHP classes can define their own comparison,
while userland objects are compared based on their attributes and values.</p>
<p>When would you want to compare objects you ask?
Well, there's actually a very obvious example: dates.</p>
<pre><code class="language-php hljs php" data-lang="php">$dateA = DateTime::createFromFormat(<span class="hljs-string">'Y-m-d'</span>, <span class="hljs-string">'2000-02-01'</span>);

$dateB = DateTime::createFromFormat(<span class="hljs-string">'Y-m-d'</span>, <span class="hljs-string">'2000-01-01'</span>);

$dateA &lt;=&gt; $dateB; <span class="hljs-comment">// Returns 1</span></code></pre>
<p>Of course, comparing dates is just one example, but a very useful one nevertheless.</p>
<h3 id="sort-functions"><a href="#sort-functions" class="heading-anchor">#</a> Sort functions</h3>
<p>One great use for this operator, is to sort arrays.
There are quite <a target="_blank" href="http://php.net/manual/en/array.sorting.php">a few ways</a> to sort an array in PHP,
and some of these methods allow a user defined sort function.
This function has to compare two elements, and return <code>1</code>, <code>0</code>, or <code>-1</code> based on their position.</p>
<p>An excellent use case for the spaceship operator!</p>
<pre><code class="language-php hljs php" data-lang="php">$array = [<span class="hljs-number">5</span>, <span class="hljs-number">1</span>, <span class="hljs-number">6</span>, <span class="hljs-number">3</span>];

usort($array, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">($a, $b)</span> </span>{
    <span class="hljs-keyword">return</span> $a &lt;=&gt; $b;
});

<span class="hljs-comment">// $array = [1, 3, 5, 6];</span></code></pre>
<p>To sort descending, you can simply invert the comparison result:</p>
<pre><code class="language-php hljs php" data-lang="php">usort($array, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">($a, $b)</span> </span>{
    <span class="hljs-keyword">return</span> -($a &lt;=&gt; $b);
});

<span class="hljs-comment">// $array = [6, 5, 3, 1];</span></code></pre>
<p>Hi there, thanks for reading! I hope this blog post helped you!
If you'd like to contact me, you can do so on <a target="_blank" href="https://twitter.com/brendt_gd">Twitter</a> or via <a href="mailto:brendt@stitcher.io">e-mail</a>.
I always love to chat!</p>
 ]]></summary>

                <updated>2020-07-14T00:00:00+00:00</updated>
            </entry>
                                <entry>
                <title><![CDATA[ Why we need named arguments in PHP ]]></title>

                <link rel="alternate" href="https://stitcher.io/blog/why-we-need-named-params-in-php"/>

                <id>https://www.stitcher.io/blog/why-we-need-named-params-in-php</id>

                <author>
                    <name><![CDATA[ Brent Roose ]]></name>
                </author>

                <summary type="html"><![CDATA[ <p>There's a new RFC in town for <a href="/blog/new-in-php-8">PHP 8</a>, and its name is the <a target="_blank" href="https://wiki.php.net/rfc/named_params">named arguments RFC</a>.</p>
<p>If you're eligible to vote, or know someone who can: I want to ask you to take five minutes to read this, and to be clear up front: I want you to vote yes.</p>
<p>Here's why from the point of view of a userland developer, both for client projects <em>and</em> <a target="_blank" href="https://spatie.be/open-source">open source</a>.</p>
<p><div class="ad-container">
    <script async type="text/javascript" src="//cdn.carbonads.com/carbon.js?serve=CK7ICK3W&placement=stitcherio" id="_carbonads_js"></script>
</div>
</p>
<h2 id="as-an-oss-maintainer"><a href="#as-an-oss-maintainer" class="heading-anchor">#</a> As an OSS maintainer</h2>
<p>The main argument against named arguments — the PHP 8 puns continue — is that they would make maintaining open source software a pain: changing the name of an argument would become a breaking change.</p>
<p>Here's what that means. Imagine an open source package which has this function as part of its public API:</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">toMediaCollection</span><span class="hljs-params">(<span class="hljs-highlight  type">string</span> $collection, <span class="hljs-highlight  type">string</span> $disk = null)</span></span>;</code></pre>
<p>Named parameters would allow to call this function like so:</p>
<pre><code class="language-php hljs php" data-lang="php">$pendingMedia
    -&gt;<span class="hljs-highlight  prop">toMediaCollection</span>(<span class="hljs-highlight  prop">collection</span>: <span class="hljs-string">'downloads'</span>, <span class="hljs-highlight  prop">disk</span>: <span class="hljs-string">'s3'</span>);</code></pre>
<p>If, for some reason, the open source maintainer would want to change the name of the <code>$collection</code> or <code>$disk</code> variables, they would have to tag a major release, because named arguments would make that a breaking change.</p>
<p>Now, let me tell you something from my point of view as an open source maintainer: this rarely happens.</p>
<p>As a matter of fact, I can only think of a handful occurrences. And the only reason we decided to do renames on those occurrences, was because we were already working on a new major version and we figured we might as well improve the naming a little bit while we were at it.</p>
<p><div class="author">
    Noticed a tpyo? You can submit a
    <a href="https://github.com/brendt/stitcher.io" target="_blank" rel="noopener noreferrer">PR</a> to fix it.

    If you want to stay up to date about what's happening on this blog, you can follow me
    <a href="https://mobile.twitter.com/brendt_gd" target="_blank" rel="noopener noreferrer">on Twitter</a> or subscribe to my newsletter:

    <form action="https://mail.stitcher.io/subscribe/81fa83d0-4a0b-4eff-b897-f6ce51dfb7f0" method="post" class="newsletter-form">
        <label for="newsletter-email-35">Email</label>
        <input type="email" name="email" id="newsletter-email-35"/>
        <button type="submit" class="cta cta-small">Subscribe</button>
    </form>
</div>
</p>
<p>I'm not the only one with that opinion by the way, Nicolas Grekas is amongst the people voting yes, and he knows a thing or two about OSS development. Oh and here's <a target="_blank" href="https://twitter.com/themsaid/status/1281819955231690753?s=20">Mohamed Said</a>, one of the core maintainers of Laravel:</p>
<blockquote>
<p>I've been working at Laravel for 4 years now and I rarely find us wanting to change argument names in a refactor. We either add or remove arguments, but I'd say we never had to change names.</p>
</blockquote>
<p>Actually that's an interesting thought: argument lists already <em>are</em> prone to breaking backwards compatibility: changing the order of arguments already is a breaking change! And we're dealing with that just fine now, aren't we?</p>
<p>Now even <em>if</em> you, as an open source maintainer, don't want to take the responsibility of making sure argument names don't change between major releases, here's what you do: tell your users you won't actively support named arguments, and using them is at their own risk. Just put this in the README:</p>
<pre><code class="language-ada hljs ada" data-lang="ada">**Heads up**: this <span class="hljs-keyword">package</span> <span class="hljs-title">doesn't actively support named arguments. </span>
This means that argument names might change <span class="hljs-keyword">in</span> minor <span class="hljs-keyword">and</span> patch releases. 
You can <span class="hljs-keyword">use</span> them, but <span class="hljs-keyword">at</span> your own risk.</code></pre>
<p>Don't deny all PHP developers this flexibility, because you're afraid of a slight chance it might break something somewhere in the far far future. Don't be afraid.</p>
<h2 id="as-a-programmer-doing-client-work"><a href="#as-a-programmer-doing-client-work" class="heading-anchor">#</a> As a programmer doing client work</h2>
<p>Another argument is that this RFC would encourage bad API design. It would encourage people to write large method definitions, which in turn often indicates a code smell.</p>
<p>I as well can come up with lots of examples that aren't a good fit for named parameters. But that doesn't mean there are no use cases for them at all! Have you heard of <a href="/blog/laravel-beyond-crud-02-working-with-data">data transfer objects</a> or value objects before? If you're following this blog, chances are you have.</p>
<p>I'm not going to copy my writing on them in this post, but I can summarise the main thought behind them: treat data as a first class citizen of your application, model them with objects. For example: an address has a street, number, postal code, city, country, sometimes even more than that. That data should be represented by a strongly typed object in PHP, and not passed between contexts as an array full of random stuff, its constructor would look like this:</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Address</span>
</span>{
    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span><span class="hljs-params">(
        <span class="hljs-highlight  type">string</span> $street,
        <span class="hljs-highlight  type">string</span> $number,
        <span class="hljs-highlight  type">string</span> $postal,
        <span class="hljs-highlight  type">string</span> $city,
        <span class="hljs-highlight  type">string</span> $country,
    )</span> </span>{ <span class="hljs-comment">/* … */</span> }
}</code></pre>
<p>DTOs and VOs are valid cases where these kinds of large constructors are allowed, it's no code smell at all. I had a quick look at <a href="/blog/a-project-at-spatie">an old project</a> of ours, at the time of tracking its stats, it already had 63 DTO classes, and the project was far from finished at that point!</p>
<p>Large constructors happen, and named parameters would not only add more clarity, but also offer the flexibility of changing the parameter order after the fact, without having to worry about fixing the order at all.</p>
<p>Take our <code>Address</code> object, for example. Let's say we need to support number suffixes. We can add that argument without having to worry about the order that other places called it:</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Address</span>
</span>{
    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span><span class="hljs-params">(
        <span class="hljs-highlight  type">string</span> $street,
        <span class="hljs-highlight  type">string</span> $number,
        <span class="hljs-highlight  green"><span class="hljs-highlight  type">string</span> $numberSuffix,</span>
        <span class="hljs-highlight  type">string</span> $postal,
        <span class="hljs-highlight  type">string</span> $city,
        <span class="hljs-highlight  type">string</span> $country,
    )</span> </span>{ <span class="hljs-comment">/* … */</span> }
}</code></pre>
<p>Sure the calling site still need to add it, but at least you don't have to worry about micro managing the parameter order anymore.</p>
<p>But what if users decide to use ordered arguments instead? You'd need some way to ensure named arguments are used in these cases. The answer is surprisingly dull: establish conventions with your team, and optionally enforce them with tools like phpcs.</p>
<p>Yes, ideally, we'd want the language to prevent us from any possible misstep; but that simply isn't a realistic expectation. To me, that still isn't an argument for voting against this RFC. I've been working with teams of developers for years now, and project conventions need to be established anyway. They work just fine.</p>
<h2 id="dealing-with-php's-own-legacy"><a href="#dealing-with-php's-own-legacy" class="heading-anchor">#</a> Dealing with PHP's own legacy</h2>
<p>Pop quiz! How to set a cookie without a value, which expires two hours from now?</p>
<p>Did you look up the docs or consult your IDE?</p>
<p>That's fine, it's a confusing function after all. Named arguments can offer a little more clarity though. Compare the two following notations:</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-highlight  prop">setcookie</span>(
    <span class="hljs-string">'test'</span>, 
    <span class="hljs-string">''</span>, 
    <span class="hljs-highlight  prop">time</span>() + <span class="hljs-number">60</span> * <span class="hljs-number">60</span> * <span class="hljs-number">2</span>
);</code></pre>
<p>Or:</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-highlight  prop">setcookie</span>(
    <span class="hljs-highlight  prop">name</span>: <span class="hljs-string">'test'</span>,
    <span class="hljs-highlight  prop">expires</span>: <span class="hljs-highlight  prop">time</span>() + <span class="hljs-number">60</span> * <span class="hljs-number">60</span> * <span class="hljs-number">2</span>,
);</code></pre>
<p>I know which I would pick, everyone benefits from named arguments in this case. And since chances are slim that PHP's internal functions will change anytime soon, it's another very good reason to add them.</p>
<h2 id="looking-at-other-languages"><a href="#looking-at-other-languages" class="heading-anchor">#</a> Looking at other languages</h2>
<p>Lastly, let's face the simple facts: several other languages — many also focused on web development — already support named arguments. Some deal with them in slightly different ways, but the base concept is known to many other programmers, and it's a good thing.</p>
<p>Here are a few examples:</p>
<ul>
<li>
<a target="_blank" href="https://treyhunner.com/2018/04/keyword-arguments-in-python/">Python</a>
</li>
<li>
<a target="_blank" href="https://thoughtbot.com/blog/ruby-2-keyword-arguments">Ruby</a>
</li>
<li>
<a target="_blank" href="https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/named-and-optional-arguments">C#</a>
</li>
<li>
<a target="_blank" href="https://useyourloaf.com/blog/swift-named-parameters/">Swift</a>
</li>
<li>
<a target="_blank" href="https://kotlinlang.org/docs/reference/functions.html#named-arguments">Kotlin</a>
</li>
</ul>
<p>So let's not spread fear about harder-to-maintain code, or open source software that will become a nightmare to maintain. Named arguments are a known feature in the larger software community, and have proven their worth. No need for hypothetical problems, we will manage.</p>
<hr />
<p>By the way the vote will pass at this point! You can read about <a href="/blog/php-8-named-arguments">named arguments in depth</a> on this blog!</p>
 ]]></summary>

                <updated>2020-07-11T00:00:00+00:00</updated>
            </entry>
                                <entry>
                <title><![CDATA[ Laravel beyond CRUD: the next chapter ]]></title>

                <link rel="alternate" href="https://stitcher.io/blog/laravel-beyond-crud"/>

                <id>https://www.stitcher.io/blog/laravel-beyond-crud</id>

                <author>
                    <name><![CDATA[ Brent Roose ]]></name>
                </author>

                <summary type="html"><![CDATA[ <p>It's been almost a year since I released the first post in a series called "Laravel beyond CRUD'. Its goal to teach about how we've been building large application with complex business rules, in Laravel.</p>
<p>It's clear that many of you enjoyed that series: it got over 150,000 views, and I still get several messages a week with followup questions.</p>
<p>We — my colleagues and I — decided to take it a step further: I'm reworking the blog series into a book, as well as making a video course out of it.</p>
<p>There's a sample project built from the ground up with these principles, there's a beautifully designed ebook by my colleague <a target="_blank" href="https://sebastiandedeyne.com/">Seb</a>, there are brand new chapters never released before, and a video course hosted by me, bringing all it into practice. My colleagues <a target="_blank" href="https://freek.dev/">Freek</a> and <a target="_blank" href="https://twitter.com/willemvbockstal">Willem</a> took care of <a target="_blank" href="https://laravel-beyond-crud.com/">the website</a>, and also help designing and edit the course from start to end.</p>
<p>So, what's next? We're still finishing the course, but you can already subscribe to <a target="_blank" href="https://laravel-beyond-crud.com/">the newsletter</a> to stay up to date! If you don't like newsletters, you can <a target="_blank" href="https://twitter.com/brendt_gd">follow me on Twitter</a> and be the first to know when we're releasing it!</p>
 ]]></summary>

                <updated>2020-07-09T00:00:00+00:00</updated>
            </entry>
                                <entry>
                <title><![CDATA[ PHP 8: match or switch? ]]></title>

                <link rel="alternate" href="https://stitcher.io/blog/php-8-match-or-switch"/>

                <id>https://www.stitcher.io/blog/php-8-match-or-switch</id>

                <author>
                    <name><![CDATA[ Brent Roose ]]></name>
                </author>

                <summary type="html"><![CDATA[ <p>PHP 8 introduces the new <code>match</code> expression. A powerful feature that will often be the better choice to using <code>switch</code>. So what exactly are the differences?</p>
<p><div class="ad-container">
    <script async type="text/javascript" src="//cdn.carbonads.com/carbon.js?serve=CK7ICK3W&placement=stitcherio" id="_carbonads_js"></script>
</div>
</p>
<p>Let's start by comparing the two. Here's a classic <code>switch</code> example:</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-keyword">switch</span> ($statusCode) {
    <span class="hljs-keyword">case</span> <span class="hljs-number">200</span>:
    <span class="hljs-keyword">case</span> <span class="hljs-number">300</span>:
        $message = <span class="hljs-keyword">null</span>;
        <span class="hljs-keyword">break</span>;
    <span class="hljs-keyword">case</span> <span class="hljs-number">400</span>:
        $message = <span class="hljs-string">'not found'</span>;
        <span class="hljs-keyword">break</span>;
    <span class="hljs-keyword">case</span> <span class="hljs-number">500</span>:
        $message = <span class="hljs-string">'server error'</span>;
        <span class="hljs-keyword">break</span>;
    <span class="hljs-keyword">default</span>:
        $message = <span class="hljs-string">'unknown status code'</span>;
        <span class="hljs-keyword">break</span>;
}</code></pre>
<p>Here's its <code>match</code> equivalent:</p>
<pre><code class="language-php hljs php" data-lang="php">$message = <span class="hljs-highlight  keyword">match</span> ($statusCode) {
    <span class="hljs-number">200</span>, <span class="hljs-number">300</span> =&gt; <span class="hljs-keyword">null</span>,
    <span class="hljs-number">400</span> =&gt; <span class="hljs-string">'not found'</span>,
    <span class="hljs-number">500</span> =&gt; <span class="hljs-string">'server error'</span>,
    <span class="hljs-keyword">default</span> =&gt; <span class="hljs-string">'unknown status code'</span>,
};</code></pre>
<p>First of all, the <code>match</code> expression is significantly shorter:</p>
<ul>
<li>it doesn't require a <code>break</code> statement</li>
<li>it can combine different arms into one using a comma</li>
<li>it returns a value, so you only have to assign value once</li>
</ul>
<p>That's already quite a lot, but there's even more to it!</p>
<h2 id="no-type-coercion"><a href="#no-type-coercion" class="heading-anchor">#</a> No type coercion</h2>
<p><code>match</code> will do strict type checks instead of loose ones. It's like using <code>===</code> instead of <code>==</code>.
People will probably disagree whether that's a good thing or not, but that's a <a href="/blog/tests-and-types">topic on its own</a>.</p>
<pre><code class="language-php hljs php" data-lang="php">$statusCode = <span class="hljs-string">'200'</span>;

$message = <span class="hljs-highlight  keyword">match</span> ($statusCode) {
    <span class="hljs-number">200</span> =&gt; <span class="hljs-keyword">null</span>,
    <span class="hljs-keyword">default</span> =&gt; <span class="hljs-string">'unknown status code'</span>,
};

<span class="hljs-comment">// $message = 'unknown status code'</span></code></pre>
<p><div class="author">
    Noticed a tpyo? You can submit a
    <a href="https://github.com/brendt/stitcher.io" target="_blank" rel="noopener noreferrer">PR</a> to fix it.

    If you want to stay up to date about what's happening on this blog, you can follow me
    <a href="https://mobile.twitter.com/brendt_gd" target="_blank" rel="noopener noreferrer">on Twitter</a> or subscribe to my newsletter:

    <form action="https://mail.stitcher.io/subscribe/81fa83d0-4a0b-4eff-b897-f6ce51dfb7f0" method="post" class="newsletter-form">
        <label for="newsletter-email-36">Email</label>
        <input type="email" name="email" id="newsletter-email-36"/>
        <button type="submit" class="cta cta-small">Subscribe</button>
    </form>
</div>
</p>
<h2 id="unknown-values-cause-errors"><a href="#unknown-values-cause-errors" class="heading-anchor">#</a> Unknown values cause errors</h2>
<p>If you forget to check for a value, and when there's no <code>default</code> arm specified, PHP will throw an <code>UnhandledMatchError</code> exception. Again more strictness, but it will prevent subtle bugs from going unnoticed.</p>
<pre><code class="language-php hljs php" data-lang="php">$statusCode = <span class="hljs-number">400</span>;

$message = <span class="hljs-highlight  keyword">match</span> ($statusCode) {
    <span class="hljs-number">200</span> =&gt; <span class="hljs-string">'perfect'</span>,
};

<span class="hljs-comment">// UnhandledMatchError</span></code></pre>
<h2 id="only-single-line-expressions,-for-now"><a href="#only-single-line-expressions,-for-now" class="heading-anchor">#</a> Only single-line expressions, for now</h2>
<p>Just like <a href="/blog/short-closures-in-php">short closures</a>, you can only write one expression. Expression blocks will probably get added at one point, but it's still not clear when exactly.</p>
<h2 id="combining-conditions"><a href="#combining-conditions" class="heading-anchor">#</a> Combining conditions</h2>
<p>You already noticed the lack of <code>break</code>? This also means <code>match</code> doesn't allow for fallthrough conditions, like the two combined <code>case</code> lines in the first <code>switch</code> example. On the other hand though, you can combine conditions on the same line, separated by commas.</p>
<p>So you have the same functionality as switch in this regards, but with less writing, and less ways to screw up. Win-win!</p>
<pre><code class="language-php hljs php" data-lang="php">$message = <span class="hljs-highlight  keyword">match</span> ($statusCode) {
    <span class="hljs-number">200</span>, <span class="hljs-number">300</span>, <span class="hljs-number">301</span>, <span class="hljs-number">302</span> =&gt; <span class="hljs-string">'combined expressions'</span>,
};</code></pre>
<h2 id="complex-conditions-and-performance"><a href="#complex-conditions-and-performance" class="heading-anchor">#</a> Complex conditions and performance</h2>
<p>During the RFC discussion, some people suggested the following pattern as an argument against adding the <code>match</code> expression:</p>
<pre><code class="language-php hljs php" data-lang="php">$message = [
    <span class="hljs-keyword">$this</span>-&gt;<span class="hljs-highlight  prop">matchesRegex</span>($line) =&gt; <span class="hljs-string">'match A'</span>,
    <span class="hljs-keyword">$this</span>-&gt;<span class="hljs-highlight  prop">matchesOtherRegex</span>($line) =&gt; <span class="hljs-string">'match B'</span>,
][$line] ?? <span class="hljs-string">'no match'</span>;</code></pre>
<p>There's one big caveat though: this technique will execute all regex functions first, decreasing performance. A good argument for <code>match</code>.</p>
<h2 id="throwing-exceptions"><a href="#throwing-exceptions" class="heading-anchor">#</a> Throwing exceptions</h2>
<p>Finally, because of <a href="/blog/new-in-php-8#throw-expression-rfc">throw expressions in PHP 8</a>, it's also possible to directly throw from an arm, if you'd like to.</p>
<pre><code class="language-php hljs php" data-lang="php">$message = <span class="hljs-highlight  keyword">match</span> ($statusCode) {
    <span class="hljs-number">200</span> =&gt; <span class="hljs-keyword">null</span>,
    <span class="hljs-number">500</span> =&gt; <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-highlight  type">ServerError</span>(),
    <span class="hljs-keyword">default</span> =&gt; <span class="hljs-string">'unknown status code'</span>,
};</code></pre>
<h2 id="pattern-matching"><a href="#pattern-matching" class="heading-anchor">#</a> Pattern matching</h2>
<p>Ok, there's one more thing: pattern matching. It's a technique used in other programming languages, to allow complexer matching than simple values. Think of it as regex, but for variables instead of text.</p>
<p>Pattern matching isn't supported right now, because it's quite a complex feature, but Ilija Tovilo, the <a target="_blank" href="https://wiki.php.net/rfc/match_expression_v2">RFC author</a> did mention it as a possible future feature. Something to look out for!</p>
<p><div class="sidenote">
    <p>
        Tired of managing servers?
        Check out <a href="https://gumroad.com/a/575280243" ping="https://analytics.stitcher.io/r" target="_blank" rel="noopener noreferrer">Serverless Visually Explained</a> by Matthieu Napoli and learn how to create scalable PHP applications on AWS.
    </p>
</div>
</p>
<h2 id="so,-switch-or-match?"><a href="#so,-switch-or-match?" class="heading-anchor">#</a> So, switch or match?</h2>
<p>If I'd need to summarise the <code>match</code> expression in one sentence, I'd say it's the stricter and more modern version of it's little <code>switch</code> brother.</p>
<p>There are some cases — <em>see what I did there?</em> — where <code>switch</code> will offer more flexibility, especially with multiline code blocks. However, the strictness of the <code>match</code> operator is appealing, and the perspective of pattern matching would be a game-changer for PHP.</p>
<p>I admit I never wrote a <code>switch</code> statement in the past years because of its many quirks; quirks that <code>match</code> actually solve. So while it's not perfect yet, there are use cases that I can think of, where <code>match</code> would be a good… match.</p>
<p>What's <a target="_blank" href="https://twitter.com/brendt_gd">your opinion</a>?</p>
 ]]></summary>

                <updated>2020-07-08T00:00:00+00:00</updated>
            </entry>
                                <entry>
                <title><![CDATA[ PHP 8: JIT performance in real-life web applications ]]></title>

                <link rel="alternate" href="https://stitcher.io/blog/jit-in-real-life-web-applications"/>

                <id>https://www.stitcher.io/blog/jit-in-real-life-web-applications</id>

                <author>
                    <name><![CDATA[ Brent Roose ]]></name>
                </author>

                <summary type="html"><![CDATA[ <p>For those interested in <a href="/blog/php-jit">the JIT in PHP 8</a>, I did some benchmarks for you in real-world web application scenario. Be aware that these benchmarks don't say anything about whether the JIT is useful or not, they only show whether it can improve the performance of your average web application, or not.</p>
<p><div class="ad-container">
    <script async type="text/javascript" src="//cdn.carbonads.com/carbon.js?serve=CK7ICK3W&placement=stitcherio" id="_carbonads_js"></script>
</div>
</p>
<h2 id="setup"><a href="#setup" class="heading-anchor">#</a> Setup</h2>
<p>Let's set the scene first. These benchmarks were run on my local machine. As so, they don't say anything about absolute performance gains, I'm only interested in making conclusions about the relative impact the JIT has on real-life code.</p>
<p>I'll be running PHP FPM, configured to spawn 20 child processes, and I'll always make sure to only run 20 concurrent requests at once, just to eliminate any extra performance hits on the FPM level. Sending these requests is done using the following command, with ApacheBench:</p>
<pre><code class="language-vim hljs vim" data-lang="vim"><span class="hljs-keyword">ab</span> -n <span class="hljs-number">100</span> -<span class="hljs-keyword">c</span> <span class="hljs-number">20</span> -<span class="hljs-keyword">l</span> http://aggregate.stitcher.io.tes<span class="hljs-variable">t:8081</span>/discover</code></pre>
<p><div class="author">
    Noticed a tpyo? You can submit a
    <a href="https://github.com/brendt/stitcher.io" target="_blank" rel="noopener noreferrer">PR</a> to fix it.

    If you want to stay up to date about what's happening on this blog, you can follow me
    <a href="https://mobile.twitter.com/brendt_gd" target="_blank" rel="noopener noreferrer">on Twitter</a> or subscribe to my newsletter:

    <form action="https://mail.stitcher.io/subscribe/81fa83d0-4a0b-4eff-b897-f6ce51dfb7f0" method="post" class="newsletter-form">
        <label for="newsletter-email-38">Email</label>
        <input type="email" name="email" id="newsletter-email-38"/>
        <button type="submit" class="cta cta-small">Subscribe</button>
    </form>
</div>
</p>
<h2 id="jit-setup"><a href="#jit-setup" class="heading-anchor">#</a> JIT Setup</h2>
<p>With the project in place, let's configure the JIT itself. The JIT is enabled by specifying the <code><span class="hljs-highlight  prop">opcache.jit_buffer_size</span></code> option in <code>php.ini</code>. If this directive is excluded, the default value is set to 0, and the JIT won't run.</p>
<pre><code class="language-ini hljs ini" data-lang="ini"><span class="hljs-highlight  prop">opcache.jit_buffer_size</span>=100M</code></pre>
<p>You'll also want to set a JIT mode, which will determine how the JIT will monitor and react to hot parts of your code. You'll need to use the <code><span class="hljs-highlight  prop">opcache.jit</span></code> option. Its default is set to <code>tracing</code>, but you can override it using <code>function</code>:</p>
<pre><code class="language-ini hljs ini" data-lang="ini"><span class="hljs-highlight  prop">opcache.jit</span>=function
<span class="hljs-comment">; opcache.jit=tracing</span></code></pre>
<p>In our real-life benchmarks, I'll compare both modes with each other.
So let's start benchmarking!</p>
<h2 id="establishing-a-baseline"><a href="#establishing-a-baseline" class="heading-anchor">#</a> Establishing a baseline</h2>
<p>First it's best to establish whether the JIT is working properly or not. We know from the RFC that it does have a significant impact on calculating a fractal. So let's start with that example. I copied the mandelbrot example from the RFC, and accessed it via the same HTTP application I'll run the next benchmarks on:</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">index</span><span class="hljs-params">()</span>
</span>{
    <span class="hljs-keyword">for</span> ($y = <span class="hljs-number">-39</span>; $y &lt; <span class="hljs-number">39; $y++) {
        <span class="hljs-highlight  prop">printf</span>(<span class="hljs-string">"\n"</span>);

        <span class="hljs-keyword">for</span> ($x = <span class="hljs-number">-39</span>; $x &lt; <span class="hljs-number">39; $x++) {
            $i = <span class="hljs-keyword">$this</span>-&gt;<span class="hljs-highlight  prop">mandelbrot</span>(
                $x / <span class="hljs-number">40.0</span>,
                $y / <span class="hljs-number">40.0</span>
            );

            <span class="hljs-keyword">if</span> ($i == <span class="hljs-number">0</span>) {
                <span class="hljs-highlight  prop">printf</span>(<span class="hljs-string">"*"</span>);
            } <span class="hljs-keyword">else</span> {
                <span class="hljs-highlight  prop">printf</span>(<span class="hljs-string">" "</span>);
            }
        }
    }

    <span class="hljs-highlight  prop">printf</span>(<span class="hljs-string">"\n"</span>);
}

<span class="hljs-keyword">private</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">mandelbrot</span><span class="hljs-params">($x, $y)</span>
</span>{
    $cr = $y - <span class="hljs-number">0.5</span>;
    $ci = $x;
    $zi = <span class="hljs-number">0.0</span>;
    $zr = <span class="hljs-number">0.0</span>;
    $i = <span class="hljs-number">0</span>;

    <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>) {
        $i++;
        
        $temp = $zr * $zi;
        
        $zr2 = $zr * $zr;
        $zi2 = $zi * $zi;
        
        $zr = $zr2 - $zi2 + $cr;
        $zi = $temp + $temp + $ci;

        <span class="hljs-keyword">if</span> ($zi2 + $zr2 &gt; <span class="hljs-number">16</span>) {
            <span class="hljs-keyword">return</span> $i;
        }

        <span class="hljs-keyword">if</span> ($i &gt; <span class="hljs-number">5000</span>) {
            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;
        }
    }
}</code></pre>
<p>After running <code>ab</code> for a few hundred requests, we can see the results:</p>
<table>
<tr class="table-head">
    <td></td>
    <td class="right">requests/second (more is better)</td>
</tr>
<tr>
    <td>Mandelbrot without JIT</td>
    <td class="right">3.60</td>
</tr>
<tr>
    <td>Mandelbrot with tracing JIT</td>
    <td class="right">41.36</td>
</tr>
</table>
<p>Great, it looks like the JIT is working! That's even a ten times performance increase! Having verified it works as expected, let's move on to our first real-life comparison. We're going to compare no JIT with the function and tracing JIT; using 100MB of memory. The page we're going to benchmark shows an overview of posts, so there's some recursion happening. We're also touching several core parts of Laravel as well: routing, the dependency container, as well as the ORM layer.</p>
<div class="sidenote">
<h2>Side note:</h2>
<p>If you want to verify whether the JIT is running, you can use <code><span class="hljs-highlight  prop">opcache_get_status</span>()</code>, it has a <code>jit</code> entry which lists all relevant information:</p>
<pre><code class="language-php hljs php" data-lang="php">dd(<span class="hljs-highlight  prop">opcache_get_status</span>()[<span class="hljs-string">'jit'</span>]);

<span class="hljs-comment">// array:7 [▼</span>
<span class="hljs-comment">//   "enabled" =&gt; true</span>
<span class="hljs-comment">//   "on" =&gt; true</span>
<span class="hljs-comment">//   "kind" =&gt; 5</span>
<span class="hljs-comment">//   "opt_level" =&gt; 4</span>
<span class="hljs-comment">//   "opt_flags" =&gt; 6</span>
<span class="hljs-comment">//   "buffer_size" =&gt; 104857584</span>
<span class="hljs-comment">//   "buffer_free" =&gt; 104478688</span>
<span class="hljs-comment">// ]</span></code></pre>
</div>
<table>
<tr class="table-head">
    <td></td>
    <td class="right">requests/second (more is better)</td>
</tr>
<tr>
    <td>No JIT</td>
    <td class="right">63.56</td>
</tr>
<tr>
    <td>Function JIT</td>
    <td class="right">66.32</td>
</tr>
<tr>
    <td>tracing JIT</td>
    <td class="right">69.45</td>
</tr>
</table>
<p>Here we see the results: enabling the JIT only has a slight improvement. In fact, running the benchmarks over and over, the results differ slightly every time: I've even seen cases where a JIT enabled run performs worse than the non JIT'ed version. Before drawing final conclusions, let's bump the memory buffer limit. We'll give the JIT a little more room to breathe with 500MB of memory instead of 100MB.</p>
<table>
<tr class="table-head">
    <td></td>
    <td class="right">requests/second (more is better)</td>
</tr>
<tr>
    <td>No JIT</td>
    <td class="right">71.69</td>
</tr>
<tr>
    <td>Function JIT</td>
    <td class="right">72.82</td>
</tr>
<tr>
    <td>Tracing JIT</td>
    <td class="right">70.11</td>
</tr>
</table>
<p>As you can see: a case of the JIT performing worse. Like I said at the beginning of this post: I want to measure the relative impact the JIT has on real-life web projects. It's clear from these tests that sometimes there might be benefits, but it's in no way as noticeable as the fractal example we started out with. I admit I'm not really surprised by that. Like I wrote before: there's very little hot code to be optimised in real-life applications, we're only rarely doing fractal-like computations.</p>
<p>So am I saying there's no need for the JIT? Not quite, I think the JIT can open up new areas for PHP: areas where complex computations do benefit from JIT'ed code. I'm thinking about machine learning, AI, stuff like that. The JIT <em>might</em> give opportunities to the PHP community that didn't exist yet, but it's unclear to say anything with certainty at this point.</p>
<hr />
<p>So, that concludes my JIT testing. As expected: the JIT probably won't have a significant impact on web applications, at least not right now.</p>
<p>I won't discuss my thoughts on whether the JIT itself is a good addition or not in this post, let's have those discussions together <a target="_blank" href="https://news.ycombinator.com/item?id=23721344">over here</a>!</p>
 ]]></summary>

                <updated>2020-07-02T00:00:00+00:00</updated>
            </entry>
                                <entry>
                <title><![CDATA[ Braille, and the evolution of software development ]]></title>

                <link rel="alternate" href="https://stitcher.io/blog/braille-and-the-history-of-software"/>

                <id>https://www.stitcher.io/blog/braille-and-the-history-of-software</id>

                <author>
                    <name><![CDATA[ Brent Roose ]]></name>
                </author>

                <summary type="html"><![CDATA[ <p>Back in 1785, a Frenchman named <a target="_blank" href="https://en.wikipedia.org/wiki/Valentin_Ha%C3%BCy">Valentin Haüy</a> founded the Institute for Blind Youth in Paris. Several years before, he was touched seeing blind children on the streets, cast out by society. They would never be able to receive education, until Haüy came along.</p>
<p>Besides managing the school, he was also a translator for the King of France, Louis XVI. From time to time, he received fancy invitations from the royal family, which had embossed letters on them. It didn't take long before Haüy wondered whether these raised letters could be a way of teaching his pupils to read, via touch.</p>
<p>In 1786, he printed his first book with raised letters: it was readable by touch and by sight, so both blind and seeing people could read it.</p>
<p><img src="/resources/img/blog/braille/hauy.jpg" srcset="/resources/img/blog/braille/hauy-747x43.jpg 747w, /resources/img/blog/braille/hauy-578x33.jpg 578w, /resources/img/blog/braille/hauy-668x38.jpg 668w, /resources/img/blog/braille/hauy-472x27.jpg 472w, /resources/img/blog/braille/hauy-334x19.jpg 334w" sizes="" alt=""></img></p>
<p>It was a revolutionary idea, but with its downsides: the fancy and curly fonts of that time made it very hard for blind people to distinguish between letters; furthermore, it was also rather expensive to print such books.</p>
<p><div class="ad-container">
    <script async type="text/javascript" src="//cdn.carbonads.com/carbon.js?serve=CK7ICK3W&placement=stitcherio" id="_carbonads_js"></script>
</div>
</p>
<p>Fast forward to 1821, when a French army captain came to the Institute for Blind Youth; now called National Institute for the Young Blind, because of the French revolution. This captain gave a lecture about a technique used in the army for nocturnal writing, in other words: blind writing. They used a 12-dot system to pass messages during the night.</p>
<p>In that lecture was a 12-year old boy, named <a target="_blank" href="https://en.wikipedia.org/wiki/Louis_Braille">Louis Braille</a>.</p>
<p>You can probably guess what came next: inspired by the army's nocturnal writing style, Louis came up with a 6-dot system to represent the letters of the alphabet.</p>
<p>It turned out these dots were significantly more easy to distinguish by touch than Haüy's embossed letters.
It was a system built upon previous iterations of the same idea, but most importantly it was invented by someone who was blind himself, who understood the problem that needed to be solved first hand.</p>
<p>It shouldn't be a surprise: this technique grew rapidly in popularity among the blind.</p>
<p>While Braille was still developing his system, an American named <a target="_blank" href="https://en.wikipedia.org/wiki/Samuel_Gridley_Howe">Samuel Howe</a> came to visit France. He was going to start the first school for blind children in the U.S. and wanted to do practical research. He took the original idea of Haüy's embossed letters, and made a new font for it; a font that would be less "artsy" and more "practical" to read. It was called Boston Line Type.</p>
<p><img src="/resources/img/blog/braille/boston.jpg" srcset="/resources/img/blog/braille/boston-1073x536.jpg 1073w, /resources/img/blog/braille/boston-758x379.jpg 758w, /resources/img/blog/braille/boston-536x268.jpg 536w, /resources/img/blog/braille/boston-1200x600.jpg 1200w, /resources/img/blog/braille/boston-929x464.jpg 929w" sizes="" alt=""></img></p>
<p>By the time the system was introduced in the U.S., blind U.S. citizens also heard of braille. Upper management resisted though: it was a European invention, for sure Boston Line Type would be the superior system. It was still readable by both blind and seeing people, and was more clear than Haüy's method.</p>
<p>Despite this reasoning, perhaps even a bit of American pride, it was clear that Boston Line Type would never be able to surpass braille.</p>
<p>Still, schools in the U.S. couldn't live with using the European standard. So what did they do instead? Two or three variations of braille were created over a course of 50 years; all based on the same principle, but all different in their implementation.</p>
<p>This went on until 1932, until braille finally became the accepted standard, probably what most blind people wanted all along. A period that took more than a century; it was later poetically called "The war of the Dots".</p>
<p><img src="/resources/img/blog/braille/braille.png" srcset="/resources/img/blog/braille/braille-723x246.png 723w, /resources/img/blog/braille/braille-1253x427.png 1253w, /resources/img/blog/braille/braille-1618x552.png 1618w, /resources/img/blog/braille/braille-1023x349.png 1023w, /resources/img/blog/braille/braille-1447x493.png 1447w" sizes="" alt=""></img></p>
<hr />
<p>Let's talk about software development, shall we? There are one or two parallels with the history of braille that I think we can learn valuable lessons from.</p>
<p>First of all: we shouldn't always aim to please everyone. Both Haüy's method and Boston Line Type aimed to write text that was accessible both for blind and seeing people. The end result was something suboptimal for both groups.</p>
<p>Sometimes it's better, also in software development, to focus on that one specific problem, and find the best solution for it, instead of trying to solve everything. It's better to focus on a specific problem, instead of a generalised one.</p>
<p>Second: it took braille more than 100 years to become the standard, even though it was clear from the start that it was a great system. Software development is still in its infancy. I don't think there will still be 200 different frameworks solving the same problem in 50 years.</p>
<p>Maybe there will even be only a handful of languages, one or two per field: web development, mobile apps, desktop apps, machine learning, etc. Each field will evolve towards the best solution, and we might already know that solution today, but aren't ready to accept it yet.</p>
<p>Braille is just one example of how much time it takes to optimise a process or system. Let's not fool ourselves thinking we already know the best solutions for our problems in software development. Let's keep that in mind when were advocating for the next big thing. Let's stay humble and realise we're only playing a small part in history.</p>
<p><div class="author">
    Noticed a tpyo? You can submit a
    <a href="https://github.com/brendt/stitcher.io" target="_blank" rel="noopener noreferrer">PR</a> to fix it.

    If you want to stay up to date about what's happening on this blog, you can follow me
    <a href="https://mobile.twitter.com/brendt_gd" target="_blank" rel="noopener noreferrer">on Twitter</a> or subscribe to my newsletter:

    <form action="https://mail.stitcher.io/subscribe/81fa83d0-4a0b-4eff-b897-f6ce51dfb7f0" method="post" class="newsletter-form">
        <label for="newsletter-email-39">Email</label>
        <input type="email" name="email" id="newsletter-email-39"/>
        <button type="submit" class="cta cta-small">Subscribe</button>
    </form>
</div>
</p>
 ]]></summary>

                <updated>2020-06-27T00:00:00+00:00</updated>
            </entry>
                                <entry>
                <title><![CDATA[ Abstract resources in Laravel Nova ]]></title>

                <link rel="alternate" href="https://stitcher.io/blog/abstract-resources-in-laravel-nova"/>

                <id>https://www.stitcher.io/blog/abstract-resources-in-laravel-nova</id>

                <author>
                    <name><![CDATA[ Brent Roose ]]></name>
                </author>

                <summary type="html"><![CDATA[ <p>One of the major coding architecture strategies I use when building a complex Laravel Nova project
is the ability to have an abstract resource class.</p>
<p><em>Before starting by the way, if you want deep dive in Nova, I suggest you subscribe to updates
in my upcoming course <a target="_blank" href="https://www.masteringnova.com">Mastering Nova</a> that will be released
this mid-summer!</em></p>
<hr />
<p>An abstract resource class will inherit the base <code>Resource</code> class. This allows you to
override specific methods to add functionality on your real resource classes.</p>
<p>In the end, any method that you improve in your custom base class, will be available on your model resources.
I'll show you how to create the abstract resource, and then we'll at concrete improvements.</p>
<p>We start by creating a file AbstractResource.php inside <code>app/Nova</code>, like this:</p>
<pre><code class="language-reasonml hljs reasonml" data-lang="reasonml">app/
  Nova/
     <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">AbstractResource</span>.</span></span>php</code></pre>
<p>At first, the <code>AbstractResource</code> looks like this:</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-keyword">namespace</span> <span class="hljs-title">App</span>\<span class="hljs-title">Nova</span>;

<span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AbstractResource</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Resource</span>
</span>{
}</code></pre>
<p>Next, in your Resource classes just inherit from this abstract Resource instead
of the Nova Resource one:</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-keyword">namespace</span> <span class="hljs-title">App</span>\<span class="hljs-title">Nova</span>;

<span class="hljs-keyword">use</span> <span class="hljs-title">App</span>\<span class="hljs-title">Nova</span>\<span class="hljs-title">AbstractResource</span>;

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Review</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">AbstractResource</span>
</span>{
    <span class="hljs-comment">//</span>
}</code></pre>
<hr />
<p>So, let's look at some examples of improvements you can add to your new
abstract resource.</p>
<h3 id="default-sorting"><a href="#default-sorting" class="heading-anchor">#</a> Default sorting</h3>
<p>On your abstract Resource write this code:</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">indexQuery</span><span class="hljs-params">(<span class="hljs-highlight  type">NovaRequest</span> $request, $query)</span>
</span>{
    $uriKey = <span class="hljs-keyword">static</span>::<span class="hljs-highlight  prop">uriKey</span>();
    
    <span class="hljs-keyword">if</span> (($request-&gt;<span class="hljs-highlight  prop">orderByDirection</span> ?? <span class="hljs-keyword">null</span>) !== <span class="hljs-keyword">null</span>) {
        <span class="hljs-keyword">return</span> $query;
    }
    
    <span class="hljs-keyword">if</span> (! <span class="hljs-keyword">empty</span>(<span class="hljs-keyword">static</span>::<span class="hljs-highlight  prop">$indexDefaultOrder</span>)) {
        $query-&gt;<span class="hljs-highlight  prop">getQuery</span>()-&gt;<span class="hljs-highlight  prop">orders</span> = [];

        <span class="hljs-keyword">return</span> $query-&gt;<span class="hljs-highlight  prop">orderBy</span>(
            <span class="hljs-highlight  prop">key</span>(<span class="hljs-keyword">static</span>::<span class="hljs-highlight  prop">$indexDefaultOrder</span>), 
            <span class="hljs-highlight  prop">reset</span>(<span class="hljs-keyword">static</span>::<span class="hljs-highlight  prop">$indexDefaultOrder</span>)
        );
    }
}</code></pre>
<p>Then on your model resource:</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-highlight  prop">$indexDefaultOrder</span> = [<span class="hljs-string">'email'</span> =&gt; <span class="hljs-string">'asc'</span>];</code></pre>
<p>This will sort your index query by "email, asc" in case there is not a pre-selected
sorting order.</p>
<h3 id="search-relationships"><a href="#search-relationships" class="heading-anchor">#</a> Search relationships</h3>
<p>If you have a relationship field, you might have seen that you cannot use it
to search on your Resource search field. In that case, you can use the
<code>titasgailius/search-relations</code> <a target="_blank" href="https://github.com/TitasGailius/nova-search-relations">package</a>.</p>
<p>To install it, just import it via Composer:</p>
<pre><code class="language-javascript hljs javascript" data-lang="javascript">composer <span class="hljs-built_in">require</span> titasgailius/search-relations</code></pre>
<p>Then in your Abstract Resource, you can add it like:</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-keyword">use</span> <span class="hljs-title">Titasgailius</span>\<span class="hljs-title">SearchRelations</span>\<span class="hljs-title">SearchesRelations</span>;

<span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AbstractResource</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Resource</span>
</span>{
    <span class="hljs-keyword">use</span> <span class="hljs-highlight  type"><span class="hljs-title">SearchesRelations</span></span>;
}</code></pre>
<p>Henceforth, on your model resources, you can simply add:</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-highlight  prop">$searchRelations</span> = [
    <span class="hljs-string">'user'</span> =&gt; [<span class="hljs-string">'username'</span>, <span class="hljs-string">'email'</span>],
];</code></pre>
<p>where the key is your relationship name, and then an array of searchable column values. Therefore you can now search on your relationship columns!</p>
<h3 id="sharing-cards,-lenses,-actions-and-filters"><a href="#sharing-cards,-lenses,-actions-and-filters" class="heading-anchor">#</a> Sharing Cards, Lenses, Actions and Filters</h3>
<p>Let's say you would like to have a generic card that shows information about when
was the last time your current resource was updated, and some other extra information
regarding your resource; or an action that actually will change status on models
that share a <code>status_type</code> column.</p>
<p>All of this functionality can be shared between model resources.</p>
<p>As an example, let's say you want to add a new Card to all of the model resources that share your abstract resource, you can do it like:</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">cards</span><span class="hljs-params">(<span class="hljs-highlight  type">Request</span> $request)</span></span>{
    <span class="hljs-keyword">return</span> [
        <span class="hljs-keyword">new</span> <span class="hljs-highlight  type">ResourceInformation</span>(
            <span class="hljs-keyword">$this</span>-&gt;<span class="hljs-highlight  prop">getCurrentResourceInstance</span>(<span class="hljs-keyword">$this</span>-&gt;<span class="hljs-highlight  prop">getModelInstance</span>())
        ),
    ];
}

<span class="hljs-keyword">protected</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getModelInstance</span><span class="hljs-params">()</span>
</span>{
    $resourceKey = <span class="hljs-highlight  prop">explode</span>(<span class="hljs-string">'/'</span>, <span class="hljs-highlight  prop">request</span>()-&gt;<span class="hljs-highlight  prop">path</span>())[<span class="hljs-number">1</span>];

    $resourceClass = <span class="hljs-highlight  type">Nova</span>::<span class="hljs-highlight  prop">resourceForKey</span>($resourceKey);

    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> $resourceClass::$model;
}</code></pre>
<p>and in your model Resource:</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">cards</span><span class="hljs-params">(<span class="hljs-highlight  type">Request</span> $request)</span>
</span>{
    <span class="hljs-keyword">return</span> <span class="hljs-highlight  prop">array_merge</span>(
        [<span class="hljs-comment">/* your cards */</span>], 
        <span class="hljs-keyword">parent</span>::<span class="hljs-highlight  prop">cards</span>($request),
    );
}</code></pre>
<h3 id="disable-'trashed'-behavior"><a href="#disable-'trashed'-behavior" class="heading-anchor">#</a> Disable 'trashed' behavior</h3>
<p>The <code>BelongsTo</code> field already has an option to remove the checkbox 'With Trashed'
(basically not to show trashed items), but what if want to remove it from any
other relationship operation (e.g.: <code>BelongsToMany</code>)?</p>
<p>You just need to apply the following code in your abstract resource:</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\<span class="hljs-title">Support</span>\<span class="hljs-title">Facades</span>\<span class="hljs-title">Gate</span>;

<span class="hljs-comment">/**
 * Based the trashed behavior on a new policy called trashedAny()
 *
 * <span class="hljs-doctag">@return</span> boolean
 */</span>
<span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">softDeletes</span><span class="hljs-params">()</span>
</span>{
    <span class="hljs-comment">// Is this resource authorized on trashedAny?</span>
    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">static</span>::<span class="hljs-highlight  prop">authorizable</span>()) {
        <span class="hljs-keyword">if</span> (! <span class="hljs-highlight  prop">method_exists</span>(
            <span class="hljs-highlight  type">Gate</span>::<span class="hljs-highlight  prop">getPolicyFor</span>(<span class="hljs-keyword">static</span>::<span class="hljs-highlight  prop">newModel</span>()),
            <span class="hljs-string">'trashedAny'</span>
        )) {
            <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;
        }       

        <span class="hljs-keyword">return</span> <span class="hljs-highlight  type">Gate</span>::<span class="hljs-highlight  prop">check</span>(<span class="hljs-string">'trashedAny'</span>, <span class="hljs-keyword">static</span>::class));
    };

    <span class="hljs-keyword">return</span> <span class="hljs-keyword">parent</span>::<span class="hljs-highlight  prop">softDeletes</span>();
}</code></pre>
<p>in this example, all you have to do is to define a policy for your model, and then
create a new method called <code>trashedAny(User $user)</code>, as example:</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">trashedAny</span><span class="hljs-params">(<span class="hljs-highlight  type">User</span> $user)</span>
</span>{
    <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;
}</code></pre>
<hr />
<p>These were examples that can trigger your thoughts about how to leverage
Abstract Resources on your Nova projects.</p>
<p><em>And if I was able to convince you :) I suggest you subscribe to updates
in my upcoming course <a target="_blank" href="https://www.masteringnova.com">Mastering Nova</a> that will be released
this mid-summer!</em></p>
<p>Best,
Bruno</p>
 ]]></summary>

                <updated>2020-06-23T00:00:00+00:00</updated>
            </entry>
                                <entry>
                <title><![CDATA[ Don&#039;t write your own framework ]]></title>

                <link rel="alternate" href="https://stitcher.io/blog/dont-write-your-own-framework"/>

                <id>https://www.stitcher.io/blog/dont-write-your-own-framework</id>

                <author>
                    <name><![CDATA[ Brent Roose ]]></name>
                </author>

                <summary type="html"><![CDATA[ <p>We were sitting with 5 or 6 backend developers around the large meeting table. It was 10 in the morning on a Monday, and we were all silently working on our laptops. There was a hasty atmosphere, and everyone tried to concentrate on the task ahead.</p>
<p>Less than 2 hours before, I walked into the office, not yet aware of any harm. I was immediately called to the meeting room at the back, there was no time to sit at my desk. Still I quickly grabbed a coffee, and went to the back where a few other colleagues already gathered.</p>
<p><div class="ad-container">
    <script async type="text/javascript" src="//cdn.carbonads.com/carbon.js?serve=CK7ICK3W&placement=stitcherio" id="_carbonads_js"></script>
</div>
</p>
<p>With them was our boss, a nice guy; there wasn't any "upper management" culture or anything, we were just colleagues. The other people in the room already knew what was going on, so he explained to me personally.</p>
<p>There was a bug, in our in-house framework.</p>
<p>"It sure isn't the first one" — I remember thinking.</p>
<p>At this point we'd used this custom-built framework for several years; 200 websites were affected, more or less.</p>
<p>The bug was a stupid mistake — after all, which bug isn't?</p>
<p>Our framework router would take a URL and filter out repeated slashes, so <code>//admin</code> would become <code>/admin</code>. This is, I believe, part of some HTTP spec; at least I was told so, I never double checked. The problem however, was in the authorisation layer: <code>/admin</code> was a protected URL, but <code>//admin</code> was not. So the router would resolve <code>//admin</code> and all its underlying pages to the admin section, and the authoriser wouldn't recognise it as a location you'd need admin privileges for.</p>
<p>In other words: the admin section of all our websites could be entered without any login, by simply replacing <code>/admin</code> with <code>//admin</code>.</p>
<p>I don't remember drinking my coffee after that.</p>
<p>So we did the only thing we could do: manually update all of our websites, some running a very outdated version of our framework. It took us 3 days to do this with 5 or 6 developers. You can do the math on how much it cost.</p>
<p>In the end we never actually got to know whether the bug had been exploited: it was discovered by accident by one of our colleagues over the weekend, and we didn't keep access logs longer than a few days. So nobody could tell whether someone had unauthorised access to one of our sites over the past years; let alone know if, and which data had been leaked.</p>
<p>Don't write your own framework, at least not when you're building websites for paying clients; who trust your work to be professional and secure. Whatever framework you use, make sure it's backed by a large community.</p>
<p>Want to share your thoughts? Let's discuss them on <a target="_blank" href="https://news.ycombinator.com/item?id=23508370">HN</a>.</p>
<p><div class="sidenote">
    <p>
        Thanks for reading! This post is part of my "Dev Diaries" series where I write about my own and personal experiences as a developer. Would you like to read some more?
    </p>

    <ul>
        <li><a href="/blog/dont-get-stuck">Don't get stuck</a></li>
        <li><a href="/blog/dont-write-your-own-framework">Don't write your own framework</a></li>
        <li><a href="/blog/when-i-lost-a-few-hundred-leads">When I lost a few hundred leads</a></li>
        <li><a href="/blog/how-to-be-right-on-the-internet">How to be right on the internet</a></li>
    </ul>

    <p>

        If you want to stay up to date about what's happening on this blog, you can follow me
        <a href="https://mobile.twitter.com/brendt_gd" target="_blank" rel="noopener noreferrer">on Twitter</a> or subscribe to my newsletter:
    </p>

    <form action="https://mail.stitcher.io/subscribe/81fa83d0-4a0b-4eff-b897-f6ce51dfb7f0" method="post" class="newsletter-form">
        <label for="email">Email</label>
        <input type="email" name="email"/>
        <button type="submit" class="cta cta-small">Subscribe</button>
    </form>
</div>
</p>
 ]]></summary>

                <updated>2020-06-13T00:00:00+00:00</updated>
            </entry>
                                <entry>
                <title><![CDATA[ PHP 8: Constructor property promotion ]]></title>

                <link rel="alternate" href="https://stitcher.io/blog/constructor-promotion-in-php-8"/>

                <id>https://www.stitcher.io/blog/constructor-promotion-in-php-8</id>

                <author>
                    <name><![CDATA[ Brent Roose ]]></name>
                </author>

                <summary type="html"><![CDATA[ <p>Personally, I use value objects and data transfer objects all the time in my projects. I even wrote a dedicated post on <a href="/blog/laravel-beyond-crud-02-working-with-data">how to treat data in our code</a> a while back.</p>
<p>Naturally, I'm very happy with the constructor property promotion RFC, it's passed and will be added in <a href="/blog/new-in-php-8">PHP 8</a>. You see, this feature reduces a lot of boilerplate code when constructing simple objects such as VOs and DTOs.</p>
<p>In short: property promotion allows you to combine class fields, constructor definition and variable assignments all into one syntax, in the construct parameter list.</p>
<p>So instead of doing this:</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CustomerDTO</span>
</span>{
    <span class="hljs-keyword">public</span> <span class="hljs-highlight  type">string</span> <span class="hljs-highlight  prop">$name</span>;

    <span class="hljs-keyword">public</span> <span class="hljs-highlight  type">string</span> <span class="hljs-highlight  prop">$email</span>;

    <span class="hljs-keyword">public</span> <span class="hljs-highlight  type">DateTimeImmutable</span> <span class="hljs-highlight  prop">$birth_date</span>;

    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span><span class="hljs-params">(
        <span class="hljs-highlight  type">string</span> $name, 
        <span class="hljs-highlight  type">string</span> $email, 
        <span class="hljs-highlight  type">DateTimeImmutable</span> $birth_date
    )</span> </span>{
        <span class="hljs-keyword">$this</span>-&gt;<span class="hljs-highlight  prop">name</span> = $name;
        <span class="hljs-keyword">$this</span>-&gt;<span class="hljs-highlight  prop">email</span> = $email;
        <span class="hljs-keyword">$this</span>-&gt;<span class="hljs-highlight  prop">birth_date</span> = $birth_date;
    }
}</code></pre>
<p>You would write this:</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CustomerDTO</span>
</span>{
    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span><span class="hljs-params">(
        <span class="hljs-highlight  keyword">public</span> <span class="hljs-highlight  type">string</span> <span class="hljs-highlight  prop">$name</span>, 
        <span class="hljs-highlight  keyword">public</span> <span class="hljs-highlight  type">string</span> <span class="hljs-highlight  prop">$email</span>, 
        <span class="hljs-highlight  keyword">public</span> <span class="hljs-highlight  type">DateTimeImmutable</span> <span class="hljs-highlight  prop">$birth_date</span>,
    )</span> </span>{}
}</code></pre>
<p>Let's look at how it works!</p>
<p><div class="ad-container">
    <script async type="text/javascript" src="//cdn.carbonads.com/carbon.js?serve=CK7ICK3W&placement=stitcherio" id="_carbonads_js"></script>
</div>
</p>
<hr />
<h2 id="how-it-works"><a href="#how-it-works" class="heading-anchor">#</a> How it works</h2>
<p>The basic idea is simple: ditch all the class properties and the variable assignments, and prefix the constructor parameters with <code>public</code>, <code>protected</code> or <code>private</code>. PHP will take that new syntax, and transform it to normal syntax under the hood, before actually executing the code.</p>
<p>So it goes from this:</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyDTO</span>
</span>{
    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span><span class="hljs-params">(
        <span class="hljs-highlight  keyword blue">public</span> <span class="hljs-highlight  type red">string</span> <span class="hljs-highlight  prop green">$name</span> = <span class="hljs-highlight  yellow"><span class="hljs-string">'Brent'</span></span>,
    )</span> </span>{}
}</code></pre>
<p>To this:</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyDTO</span>
</span>{
    <span class="hljs-highlight  blue"><span class="hljs-keyword">public</span></span> <span class="hljs-highlight  type red">string</span> <span class="hljs-highlight  prop green">$name</span>;

    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span><span class="hljs-params">(
        <span class="hljs-highlight  type red">string</span> <span class="hljs-highlight  green">$name</span> = <span class="hljs-highlight  yellow"><span class="hljs-string">'Brent'</span></span>
    )</span> </span>{
        <span class="hljs-keyword">$this</span>-&gt;<span class="hljs-highlight  prop green">name</span> = <span class="hljs-highlight  green">$name</span>;
    }
}</code></pre>
<p>And only executes it afterwards.</p>
<p>Note by the way that the default value is not set on the class property, but on the method argument in the constructor.</p>
<h2 id="promoted-property-properties"><a href="#promoted-property-properties" class="heading-anchor">#</a> Promoted property properties</h2>
<p>So let's look at what promoted properties can and can't do, there's quite a lot of little intricacies worth mentioning!</p>
<hr />
<h3 id="only-in-constructors"><a href="#only-in-constructors" class="heading-anchor">#</a> Only in constructors</h3>
<p>Promoted properties can only be used in constructors. That might seem obvious but I thought it was worth mentioning this, just to be clear.</p>
<p><div class="author">
    Noticed a tpyo? You can submit a
    <a href="https://github.com/brendt/stitcher.io" target="_blank" rel="noopener noreferrer">PR</a> to fix it.

    If you want to stay up to date about what's happening on this blog, you can follow me
    <a href="https://mobile.twitter.com/brendt_gd" target="_blank" rel="noopener noreferrer">on Twitter</a> or subscribe to my newsletter:

    <form action="https://mail.stitcher.io/subscribe/81fa83d0-4a0b-4eff-b897-f6ce51dfb7f0" method="post" class="newsletter-form">
        <label for="newsletter-email-41">Email</label>
        <input type="email" name="email" id="newsletter-email-41"/>
        <button type="submit" class="cta cta-small">Subscribe</button>
    </form>
</div>
</p>
<h3 id="no-duplicates-allowed"><a href="#no-duplicates-allowed" class="heading-anchor">#</a> No duplicates allowed</h3>
<p>You're not able to declare a class property and a promoted property with the same name. That's also rather logical, since the promoted property is simply transpiled to a class property at runtime.</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyClass</span>
</span>{
    <span class="hljs-highlight  striped"><span class="hljs-keyword">public</span> <span class="hljs-highlight  type">string</span> <span class="hljs-highlight  prop">$a</span></span>;

    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span><span class="hljs-params">(
        <span class="hljs-highlight  striped"><span class="hljs-highlight  keyword">public</span> <span class="hljs-highlight  type">string</span> <span class="hljs-highlight  prop">$a</span></span>,
    )</span> </span>{}
}</code></pre>
<hr />
<h3 id="untyped-properties-are-allowed"><a href="#untyped-properties-are-allowed" class="heading-anchor">#</a> Untyped properties are allowed</h3>
<p>You're allowed to promote untyped properties, though I'd argue that these days with <a href="/blog/php-in-2020">modern PHP</a>, you're better off typing everything.</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyDTO</span>
</span>{
    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span><span class="hljs-params">(
        <span class="hljs-highlight  keyword">public</span> <span class="hljs-highlight  prop green">$untyped</span>,
    )</span> </span>{}
}</code></pre>
<hr />
<h3 id="simple-defaults"><a href="#simple-defaults" class="heading-anchor">#</a> Simple defaults</h3>
<p>Promoted properties can have default values, but expressions like <code>new …</code> are not allowed.</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span><span class="hljs-params">(
    <span class="hljs-highlight  keyword">public</span> <span class="hljs-highlight  type">string</span> <span class="hljs-highlight  prop">$name</span> = <span class="hljs-string">'Brent'</span>,
    <span class="hljs-highlight  keyword">public</span> <span class="hljs-highlight  type">DateTimeImmutable</span> <span class="hljs-highlight  prop">$date</span> <span class="hljs-highlight  striped">= <span class="hljs-highlight  keyword">new</span> <span class="hljs-highlight  type">DateTimeImmutable</span><span class="hljs-params">()</span></span>,
)</span> </span>{}</code></pre>
<hr />
<h3 id="combining-promoted--and-normal-properties"><a href="#combining-promoted--and-normal-properties" class="heading-anchor">#</a> Combining promoted- and normal properties</h3>
<p>Not all constructor properties should be promoted, you can mix and match.</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyClass</span>
</span>{
    <span class="hljs-keyword">public</span> <span class="hljs-highlight  type">string</span> <span class="hljs-highlight  prop">$b</span>;

    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span><span class="hljs-params">(
        <span class="hljs-highlight  keyword">public</span> <span class="hljs-highlight  type">string</span> <span class="hljs-highlight  prop">$a</span>,
        <span class="hljs-highlight  type">string</span> $b,
    )</span> </span>{
        <span class="hljs-keyword">$this</span>-&gt;<span class="hljs-highlight  prop">b</span> = $b;
    }
}</code></pre>
<p>I'd say: be careful mixing the syntaxes, if it makes the code less clear, consider using a normal constructor instead.</p>
<hr />
<h3 id="access-promoted-properties-from-the-constructor-body"><a href="#access-promoted-properties-from-the-constructor-body" class="heading-anchor">#</a> Access promoted properties from the constructor body</h3>
<p>You're allowed to read the promoted properties in the constructor body. This can be useful if you want to do extra validation checks. You can use both the local variable and the instance variable, both work fine.</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span><span class="hljs-params">(
    <span class="hljs-highlight  keyword">public</span> <span class="hljs-highlight  type">int</span> <span class="hljs-highlight  prop">$a</span>,
    <span class="hljs-highlight  keyword">public</span> <span class="hljs-highlight  type">int</span> <span class="hljs-highlight  prop">$b</span>,
)</span> </span>{
    <span class="hljs-highlight  type">assert</span>(<span class="hljs-keyword">$this</span>-&gt;<span class="hljs-highlight  prop">a</span> &gt;= <span class="hljs-number">100</span>);

    <span class="hljs-keyword">if</span> ($b &gt;= <span class="hljs-number">0</span>) {
        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-highlight  type">InvalidArgumentException</span>(<span class="hljs-string">'…'</span>);
    }
}</code></pre>
<hr />
<h3 id="doc-comments-on-promoted-properties"><a href="#doc-comments-on-promoted-properties" class="heading-anchor">#</a> Doc comments on promoted properties</h3>
<p>You can add doc comments on promoted properties, and they are still available via reflection.</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyClass</span> 
</span>{
    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span><span class="hljs-params">(
        <span class="hljs-comment">/** @var string */</span>
        <span class="hljs-highlight  keyword">public</span> <span class="hljs-highlight  prop">$a</span>,
    )</span> </span>{}
}</code></pre>
<pre><code class="language-php hljs php" data-lang="php">$property = <span class="hljs-keyword">new</span> <span class="hljs-highlight  type">ReflectionProperty</span>(<span class="hljs-highlight  type">MyClass</span>::class, <span class="hljs-string">'a'</span>);

$property-&gt;<span class="hljs-highlight  prop">getDocComment</span>(); <span class="hljs-comment">// "/** @var string */"</span></code></pre>
<hr />
<h3 id="attributes"><a href="#attributes" class="heading-anchor">#</a> Attributes</h3>
<p>Just like doc blocks, <a href="/blog/attributes-in-php-8">attributes</a> are allowed on promoted properties. When transpiled, they will be present both on the constructor parameter, as well as the class property.</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyClass</span>
</span>{
    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span><span class="hljs-params">(
        <span class="hljs-highlight  comment">#[<span class="hljs-highlight  type">MyAttribute</span>]</span>
        <span class="hljs-highlight  keyword">public</span> <span class="hljs-highlight  prop">$a</span>,  
    )</span> </span>{}
}</code></pre>
<p>Will be transpiled to:</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyClass</span> 
</span>{
    <span class="hljs-comment">#[<span class="hljs-highlight  type">MyAttribute</span>]</span>
    <span class="hljs-keyword">public</span> <span class="hljs-highlight  prop">$a</span>;
 
    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span><span class="hljs-params">(
        <span class="hljs-highlight  comment">#[<span class="hljs-highlight  type">MyAttribute</span>]</span>
        $a,
    )</span> </span>{
        <span class="hljs-keyword">$this</span>-&gt;<span class="hljs-highlight  prop">a</span> = $a;
    }
}</code></pre>
<hr />
<h3 id="not-allowed-in-abstract-constructors"><a href="#not-allowed-in-abstract-constructors" class="heading-anchor">#</a> Not allowed in abstract constructors</h3>
<p>I didn't even knew abstract constructors were a thing, but here goes! Promoted properties are not allowed in them.</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span>
</span>{
    <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span><span class="hljs-params">(
        <span class="hljs-highlight  striped keyword">public</span> <span class="hljs-highlight  type">string</span> <span class="hljs-highlight  prop">$a</span>,
    )</span> </span>{}
}</code></pre>
<hr />
<h3 id="allowed-in-traits"><a href="#allowed-in-traits" class="heading-anchor">#</a> Allowed in traits</h3>
<p>On the other hand, they are allowed in traits. This makes sense, since the transpiled syntax is also valid in traits.</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-keyword">trait</span> <span class="hljs-highlight  type">MyTrait</span>
{
    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span><span class="hljs-params">(
        <span class="hljs-highlight  keyword">public</span> <span class="hljs-highlight  type">string</span> <span class="hljs-highlight  prop">$a</span>,
    )</span> </span>{}
}</code></pre>
<hr />
<h3 id="var-is-not-supported"><a href="#var-is-not-supported" class="heading-anchor">#</a> <code>var</code> is not supported</h3>
<p>Old, I mean, experienced PHP developers might have used <code>var</code> in a distant past to declare class variables. It's not allowed with constructor promotion. Only <code>public</code>, <code>protected</code> and <code>private</code> are valid keywords.</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span><span class="hljs-params">(
    <span class="hljs-highlight  striped keyword">var</span> <span class="hljs-highlight  type">string</span> <span class="hljs-highlight  prop">$a</span>,
)</span> </span>{}</code></pre>
<hr />
<h3 id="variadic-parameters-cannot-be-promoted"><a href="#variadic-parameters-cannot-be-promoted" class="heading-anchor">#</a> Variadic parameters cannot be promoted</h3>
<p>Since you can't convert to a type that's <code>array of type</code>, it's not possible to promote variadic parameters.</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span><span class="hljs-params">(
    <span class="hljs-highlight  keyword">public</span> <span class="hljs-highlight  type">string</span> <span class="hljs-highlight  prop striped">...$a</span>,
)</span> </span>{}</code></pre>
<p>Still waiting for generics…</p>
<hr />
<h3 id="reflection-for-ispromoted"><a href="#reflection-for-ispromoted" class="heading-anchor">#</a> Reflection for <code>isPromoted</code></h3>
<p>Both <code>ReflectionProperty</code> and <code>ReflectionParameter</code> have a new <code>isPromoted</code> method to check whether the class property or method parameter is promoted.</p>
<hr />
<h3 id="inheritance"><a href="#inheritance" class="heading-anchor">#</a> Inheritance</h3>
<p>Since PHP constructors don't need to follow the declaration of their parent constructor, there's little to be said: inheritance is allowed. If you need to pass properties from the child constructor to the parent constructor though, you'll need to manually pass them:</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span>
</span>{
    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span><span class="hljs-params">(
        <span class="hljs-highlight  type">public</span> <span class="hljs-highlight  prop">$a</span>,
    )</span> </span>{}
}

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">B</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">A</span>
</span>{
    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span><span class="hljs-params">(
        $a,
        <span class="hljs-highlight  type">public</span> <span class="hljs-highlight  prop">$b</span>,    
    )</span> </span>{
        <span class="hljs-keyword">parent</span>::<span class="hljs-highlight  prop">__construct</span>($a);
    }
}</code></pre>
<hr />
<p>That's about it for property promotion! I for sure will use them, what about you? Let me know via <a target="_blank" href="https://twitter.com/brendt_gd">Twitter</a> or <a href="mailto:brendt@stitcher.io">e-mail</a>!</p>
<hr />
 ]]></summary>

                <updated>2020-06-12T00:00:00+00:00</updated>
            </entry>
                                <entry>
                <title><![CDATA[ Survey results: type systems in PHP ]]></title>

                <link rel="alternate" href="https://stitcher.io/blog/type-system-in-php-survey-results"/>

                <id>https://www.stitcher.io/blog/type-system-in-php-survey-results</id>

                <author>
                    <name><![CDATA[ Brent Roose ]]></name>
                </author>

                <summary type="html"><![CDATA[ <p>I use PHP's type system as much as possible, though often found resistance with the people I interact with on Twitter and Reddit.
After having discussed the topic numerous times, I felt like both "camps" were not really listening to each other, or at least not understanding each others point.</p>
<p>It made me wonder if and how the team we work in, and the kind of projects we work on, might influence our view of type system usage.</p>
<p>I decided to do a little survey, and gather some actual insights in the topic.</p>
<p><div class="ad-container">
    <script async type="text/javascript" src="//cdn.carbonads.com/carbon.js?serve=CK7ICK3W&placement=stitcherio" id="_carbonads_js"></script>
</div>
</p>
<p>Fair warning: I'm no neutral player in this discussion, but I want to make clear that it wasn't my intention to make my own case. I wanted to see whether our seemingly pointless discussions might be caused by the difference in context; I don't want to prove there's one and only true answer.</p>
<p>With all that being said, let's look at the results.</p>
<hr />
<p>First of all I'd like to thank all 686 people who participated in this survey. I realise this is a small group, though I hope it's representative enough to draw some conclusions. If you think that the results aren't accurate enough, please reach out to me to discuss whether and how we can redo this survey on a larger scale.</p>
<p>Based on the answers in the survey, I made five groups of profiles: <code>A</code>, <code>B</code>, <code>C</code>, <code>D</code> and <code>E</code>. <code>A</code> and <code>B</code> lean (strongly) towards a stricter type system, <code>C</code> is somewhat neutral, and <code>D</code> and <code>E</code> lean (strongly) towards not using type systems.</p>
<p>This "type profile" was determined by mapping the answers to relevant questions to a score: 1 and 2 points were given to answers favorable to strict type systems, 0 to neutral answers and -1 and -2 to answers leaning towards no type systems.</p>
<div class="image-noborder"></div>
<p><img src="/resources/img/blog/survey/1.png" srcset="/resources/img/blog/survey/1-752x425.png 752w, /resources/img/blog/survey/1-1682x952.png 1682w, /resources/img/blog/survey/1-1302x736.png 1302w, /resources/img/blog/survey/1-1063x601.png 1063w, /resources/img/blog/survey/1-1504x851.png 1504w" sizes="" alt=""></img></p>
<p><em class="center small">Type profile of all participants</em></p>
<p>One thing that immediately stood out is the large amount of people who lean towards the use of a strict type system. I did not expect this. From discussions I had on Twitter, I had the feeling that more people would be in group <code>C</code>, <code>D</code> or <code>E</code>.</p>
<p>These are some of the most popular arguments against the use of PHP's type system, at least the ones I heard in my discussions:</p>
<ul>
<li>PHP's type system still fails at runtime, so there's no advantage to using it</li>
<li>Types add unnecessary visual overload</li>
<li>The flexibility of using PHP's type juggling is preferred</li>
</ul>
<p>Of course this survey wanted to examine whether there's a correlation between personal preference and team- and project size. Let's look at team size first.</p>
<p>This chart shows the average team size, and for each group the distribution of type profiles within that group.</p>
<div class="image-noborder"></div>
<p><img src="/resources/img/blog/survey/2.png" srcset="/resources/img/blog/survey/2-656x258.png 656w, /resources/img/blog/survey/2-1136x447.png 1136w, /resources/img/blog/survey/2-1312x516.png 1312w, /resources/img/blog/survey/2-927x365.png 927w, /resources/img/blog/survey/2-1467x578.png 1467w" sizes="" alt=""></img></p>
<p><em class="center small">Type profile distribution, grouped by team size</em></p>
<p>We'd need to look at relative results to test whether there's a correlation or not. So here goes, but keep in mind that the group with <code>2-10 people</code>, is by far the largest.</p>
<div class="image-noborder"></div>
<p><img src="/resources/img/blog/survey/3.png" srcset="/resources/img/blog/survey/3-1147x439.png 1147w, /resources/img/blog/survey/3-936x358.png 936w, /resources/img/blog/survey/3-662x253.png 662w, /resources/img/blog/survey/3-1481x568.png 1481w, /resources/img/blog/survey/3-1324x507.png 1324w" sizes="" alt=""></img></p>
<p><em class="center small">Relative type profile distribution, grouped by team size</em></p>
<p>As I expected, based on discussions: profiles <code>D</code> and <code>E</code> are more present in smaller teams. Yet I admit I expected that group to be larger again.</p>
<p>Next I looked at project size. I asked participants to describe the size of an average project they work on: small, medium, large or extra large.</p>
<div class="image-noborder"></div>
<p><img src="/resources/img/blog/survey/4.png" srcset="/resources/img/blog/survey/4-633x251.png 633w, /resources/img/blog/survey/4-895x355.png 895w, /resources/img/blog/survey/4-1416x562.png 1416w, /resources/img/blog/survey/4-1266x502.png 1266w, /resources/img/blog/survey/4-1096x434.png 1096w" sizes="" alt=""></img></p>
<p><em class="center small">Relative type profile distribution, grouped by project size</em></p>
<p>This chart shows a growth of type <code>A</code> and <code>B</code>, related to the size of the project. Most times, "project size" also translates to "project duration", which is why I also asked participants to rate the project duration of such an average project.</p>
<div class="image-noborder"></div>
<p><img src="/resources/img/blog/survey/5.png" srcset="/resources/img/blog/survey/5-901x489.png 901w, /resources/img/blog/survey/5-1103x599.png 1103w, /resources/img/blog/survey/5-637x345.png 637w, /resources/img/blog/survey/5-1425x773.png 1425w, /resources/img/blog/survey/5-1274x691.png 1274w" sizes="" alt=""></img></p>
<p><em class="center small">Relative type profile distribution, grouped by project duration</em></p>
<p>Again we see a preference for stricter type systems in longer projects, but we should of course be aware that there were less participants in these groups. Furthermore, I found it interesting that in this case, there' no linear pattern to discover, as with the previous charts.</p>
<h2 id="conclusions"><a href="#conclusions" class="heading-anchor">#</a> Conclusions</h2>
<p>Unfortunately, I think there weren't enough participants distributed across all kinds of projects and team sizes to draw final conclusions here.</p>
<p>Up front, I assumed that the group who preferred not to use type systems would have been larger; but maybe it's simply a more vocal group, even though smaller? I can't say that for sure though.</p>
<p>I do think that, even with a small amount of participants, we can assume there is a correlation between type system usage and project- and team size; but ideally, we'd need a larger participant pool.</p>
<p>My personal takeaway is that when entering type system discussions, we should be wary to compare each others preference: there might be a good case that you're simply working in a completely different kind of project, and there's no way of telling who's right or wrong.</p>
<p><div class="author">
    Noticed a tpyo? You can submit a
    <a href="https://github.com/brendt/stitcher.io" target="_blank" rel="noopener noreferrer">PR</a> to fix it.

    If you want to stay up to date about what's happening on this blog, you can follow me
    <a href="https://mobile.twitter.com/brendt_gd" target="_blank" rel="noopener noreferrer">on Twitter</a> or subscribe to my newsletter:

    <form action="https://mail.stitcher.io/subscribe/81fa83d0-4a0b-4eff-b897-f6ce51dfb7f0" method="post" class="newsletter-form">
        <label for="newsletter-email-42">Email</label>
        <input type="email" name="email" id="newsletter-email-42"/>
        <button type="submit" class="cta cta-small">Subscribe</button>
    </form>
</div>
</p>
 ]]></summary>

                <updated>2020-06-09T00:00:00+00:00</updated>
            </entry>
                                <entry>
                <title><![CDATA[ PHP 8: Attributes ]]></title>

                <link rel="alternate" href="https://stitcher.io/blog/attributes-in-php-8"/>

                <id>https://www.stitcher.io/blog/attributes-in-php-8</id>

                <author>
                    <name><![CDATA[ Brent Roose ]]></name>
                </author>

                <summary type="html"><![CDATA[ <p>As of PHP 8, we'll be able to use attributes. The goal of these attributes, also known as annotations in many other languages, is to add meta data to classes, methods, variables and what not; in a structured way.</p>
<p>The concept of attributes isn't new at all, we've been using docblocks to simulate their behaviour for years now. With the addition of attributes though, we now have a first-class citizen in the language to represent this kind of meta data, instead of having to manually parse docblocks.</p>
<p>So what do they look like? How do we make custom attributes? Are there any caveats? Those are the questions that will be answered in this post. Let's dive in!</p>
<p><div class="ad-container">
    <script async type="text/javascript" src="//cdn.carbonads.com/carbon.js?serve=CK7ICK3W&placement=stitcherio" id="_carbonads_js"></script>
</div>
</p>
<h2 id="rundown"><a href="#rundown" class="heading-anchor">#</a> Rundown</h2>
<p>First things first, here's what attribute would look like in the wild:</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-keyword">use</span> <span class="hljs-highlight  type">\<span class="hljs-title">Support</span>\<span class="hljs-title">Attributes</span>\<span class="hljs-title">ListensTo</span></span>;

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ProductSubscriber</span>
</span>{
    <span class="hljs-comment">#[<span class="hljs-highlight  type">ListensTo</span>(<span class="hljs-highlight  type">ProductCreated</span><span class="hljs-highlight  keyword">::class</span>)]</span>
    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">onProductCreated</span><span class="hljs-params">(<span class="hljs-highlight  type">ProductCreated</span> $event)</span> </span>{ <span class="hljs-comment">/* … */</span> }

    <span class="hljs-comment">#[<span class="hljs-highlight  type">ListensTo</span>(<span class="hljs-highlight  type">ProductDeleted</span><span class="hljs-highlight  keyword">::class</span>)]</span>
    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">onProductDeleted</span><span class="hljs-params">(<span class="hljs-highlight  type">ProductDeleted</span> $event)</span> </span>{ <span class="hljs-comment">/* … */</span> }
}</code></pre>
<p>I'll be showing other examples later in this post, but I think the example of event subscribers is a good one to explain the use of attributes at first.</p>
<p>Also yes, I know, the syntax might not be what you wished or hoped for. You might have preferred <code>@</code>, or <code>@:</code>, or docblocks or, … It's here to stay though, so we better learn to deal with it. The only thing that's worth mentioning on the syntax is that all options were discussed, and there are very good reasons why this syntax was chosen. You can read the whole discussion about the RFC on the <a target="_blank" href="https://externals.io/message/110640">internals list</a>.</p>
<p>That being said, let's focus on the cool stuff: how would this <code><span class="hljs-highlight  type">ListensTo</span></code> work under the hood?</p>
<p>First of all, custom attributes are simple classes, annotated themselves with the <code><span class="hljs-highlight  comment">#[</span><span class="hljs-highlight  type">Attribute</span><span class="hljs-highlight  comment">]</span></code> attribute; this base <code><span class="hljs-highlight  type">Attribute</span></code> used to be called <code><span class="hljs-highlight  type">PhpAttribute</span></code> in the original RFC, but was changed with <a target="_blank" href="https://wiki.php.net/rfc/attribute_amendments">another RFC</a> afterwards.</p>
<p>Here's what it would look like:</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-comment">#[<span class="hljs-highlight  type">Attribute</span>]</span>
<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ListensTo</span>
</span>{
    <span class="hljs-keyword">public</span> <span class="hljs-highlight  type">string</span> <span class="hljs-highlight  prop">$event</span>;

    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span><span class="hljs-params">(<span class="hljs-highlight  type">string</span> $event)</span>
    </span>{
        <span class="hljs-keyword">$this</span>-&gt;<span class="hljs-highlight  prop">event</span> = $event;
    }
}</code></pre>
<p>That's it — pretty simple right? Keep in mind the goal of attributes: they are meant to add meta data to classes and methods, nothing more. They shouldn't — and can't — be used for, for example, argument input validation. In other words: you wouldn't have access to the parameters passed to a method within its attributes. There was a previous RFC that allowed this behaviour, but this RFC specifically kept things more simple.</p>
<p><div class="sidenote">
    <p>
        Tired of managing servers?
        Check out <a href="https://gumroad.com/a/575280243" ping="https://analytics.stitcher.io/r" target="_blank" rel="noopener noreferrer">Serverless Visually Explained</a> by Matthieu Napoli and learn how to create scalable PHP applications on AWS.
    </p>
</div>
</p>
<p>Back to the event subscriber example: we still need to read the meta data and register our subscribers based somewhere. Coming from a Laravel background, I'd use a service provider as the place to do this, but feel free to come up with other solutions.</p>
<p>Here's the boring boilerplate setup, just to provide a little context:</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">EventServiceProvider</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">ServiceProvider</span>
</span>{
    <span class="hljs-comment">// In real life scenarios, </span>
    <span class="hljs-comment">//  we'd automatically resolve and cache all subscribers</span>
    <span class="hljs-comment">//  instead of using a manual array.</span>
    <span class="hljs-keyword">private</span> <span class="hljs-highlight  type"><span class="hljs-keyword">array</span></span> <span class="hljs-highlight  prop">$subscribers</span> = [
        <span class="hljs-highlight  type">ProductSubscriber</span>::class,
    ];

    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">register</span><span class="hljs-params">()</span>: <span class="hljs-title">void</span>
    </span>{
        <span class="hljs-comment">// The event dispatcher is resolved from the container</span>
        $eventDispatcher = <span class="hljs-keyword">$this</span>-&gt;<span class="hljs-highlight  prop">app</span>-&gt;<span class="hljs-highlight  prop">make</span>(<span class="hljs-highlight  type">EventDispatcher</span>::class);

        <span class="hljs-keyword">foreach</span> (<span class="hljs-keyword">$this</span>-&gt;<span class="hljs-highlight  prop">subscribers</span> <span class="hljs-keyword">as</span> $subscriber) {
            <span class="hljs-comment">// We'll resolve all listeners registered </span>
            <span class="hljs-comment">//  in the subscriber class,</span>
            <span class="hljs-comment">//  and add them to the dispatcher.</span>
            <span class="hljs-keyword">foreach</span> (
                <span class="hljs-keyword">$this</span>-&gt;<span class="hljs-highlight  prop">resolveListeners</span>($subscriber) 
                <span class="hljs-keyword">as</span> [$event, $listener]
            ) {
                $eventDispatcher-&gt;<span class="hljs-highlight  prop">listen</span>($event, $listener);
            }       
        }       
    }
}</code></pre>
<p>Note that if the <code>[$event, $listener]</code> syntax is unfamiliar to you, you can get up to speed with it in my post about <a href="/blog/array-destructuring-with-list-in-php#in-loops">array destructuring</a>.</p>
<p>Now let's look at <code>resolveListeners</code>, which is where the magic happens.</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-keyword">private</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">resolveListeners</span><span class="hljs-params">(<span class="hljs-highlight  type">string</span> $subscriberClass)</span>: <span class="hljs-title">array</span>
</span>{
    $reflectionClass = <span class="hljs-keyword">new</span> <span class="hljs-highlight  type">ReflectionClass</span>($subscriberClass);

    $listeners = [];

    <span class="hljs-keyword">foreach</span> ($reflectionClass-&gt;<span class="hljs-highlight  prop">getMethods</span>() <span class="hljs-keyword">as</span> $method) {
        $attributes = $method-&gt;<span class="hljs-highlight  prop">getAttributes</span>(<span class="hljs-highlight  type">ListensTo</span>::class);
        
        <span class="hljs-keyword">foreach</span> ($attributes <span class="hljs-keyword">as</span> $attribute) {
            $listener = $attribute-&gt;<span class="hljs-highlight  prop">newInstance</span>();
            
            $listeners[] = [
                <span class="hljs-comment">// The event that's configured on the attribute</span>
                $listener-&gt;<span class="hljs-highlight  prop">event</span>,
    
                <span class="hljs-comment">// The listener for this event </span>
                [$subscriberClass, $method-&gt;<span class="hljs-highlight  prop">getName</span>()],
            ];
        }
    }

    <span class="hljs-keyword">return</span> $listeners;
}</code></pre>
<p>You can see it's easier to read meta data this way, compared to parsing docblock strings. There are two intricacies worth looking into though.</p>
<p>First there's the <code>$attribute-><span class="hljs-highlight  prop">newInstance</span>()</code> call. This is actually the place where our custom attribute class is instantiated. It will take the parameters listed in the attribute definition in our subscriber class, and pass them to the constructor.</p>
<p>This means that, technically, you don't even need to construct the custom attribute. You could call <code>$attribute-><span class="hljs-highlight  prop">getArguments</span>()</code> directly. Furthermore, instantiating the class means you've got the flexibility of the constructor the parse input whatever way you like. All in all I'd say it would be good to always instantiate the attribute using <code><span class="hljs-highlight  prop">newInstance</span>()</code>.</p>
<p>The second thing worth mentioning is the use of <code><span class="hljs-highlight  type">ReflectionMethod</span>::<span class="hljs-highlight  prop">getAttributes</span>()</code>, the function that returns all attributes for a method. You can pass two arguments to it, to filter its output.</p>
<p>In order to understand this filtering though, there's one more thing you need to know about attributes first. This might have been obvious to you, but I wanted to mention it real quick anyway: it's possible to add several attributes to the same method, class, property or constant.</p>
<p>You could, for example, do this:</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-comment">#[</span>
    <span class="hljs-highlight  type">Route</span>(<span class="hljs-highlight  type">Http</span>::<span class="hljs-highlight  prop">POST</span>, <span class="hljs-string">'/products/create'</span>),
    <span class="hljs-highlight  type">Autowire</span>,
<span class="hljs-highlight  comment">]</span>
<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ProductsCreateController</span>
</span>{
    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__invoke</span><span class="hljs-params">()</span> </span>{ <span class="hljs-comment">/* … */</span> }
}</code></pre>
<p>With that in mind, it's clear why <code><span class="hljs-highlight  type">Reflection*</span>::<span class="hljs-highlight  prop">getAttributes</span>()</code> returns an array, so let's look at how its output can be filtered.</p>
<p>Say you're parsing controller routes, you're only interested in the <code><span class="hljs-highlight  type">Route</span></code> attribute. You can easily pass that class as a filter:</p>
<pre><code class="language-php hljs php" data-lang="php">$attributes = $reflectionClass-&gt;<span class="hljs-highlight  prop">getAttributes</span>(<span class="hljs-highlight  type">Route</span>::class);</code></pre>
<p>The second parameter changes how that filtering is done. You can pass in <code><span class="hljs-highlight  type">ReflectionAttribute</span>::<span class="hljs-highlight  prop">IS_INSTANCEOF</span></code>, which will return all attributes implementing a given interface.</p>
<p>For example, say you're parsing container definitions, which relies on several attributes, you could do something like this:</p>
<pre><code class="language-php hljs php" data-lang="php">$attributes = $reflectionClass-&gt;<span class="hljs-highlight  prop">getAttributes</span>(
    <span class="hljs-highlight  type">ContainerAttribute</span>::class, 
    <span class="hljs-highlight  type">ReflectionAttribute</span>::<span class="hljs-highlight  prop">IS_INSTANCEOF</span>
);</code></pre>
<p>It's a nice shorthand, built into the core.</p>
<p><div class="author">
    Noticed a tpyo? You can submit a
    <a href="https://github.com/brendt/stitcher.io" target="_blank" rel="noopener noreferrer">PR</a> to fix it.

    If you want to stay up to date about what's happening on this blog, you can follow me
    <a href="https://mobile.twitter.com/brendt_gd" target="_blank" rel="noopener noreferrer">on Twitter</a> or subscribe to my newsletter:

    <form action="https://mail.stitcher.io/subscribe/81fa83d0-4a0b-4eff-b897-f6ce51dfb7f0" method="post" class="newsletter-form">
        <label for="newsletter-email-44">Email</label>
        <input type="email" name="email" id="newsletter-email-44"/>
        <button type="submit" class="cta cta-small">Subscribe</button>
    </form>
</div>
</p>
<h2 id="technical-theory"><a href="#technical-theory" class="heading-anchor">#</a> Technical theory</h2>
<p>Now that you have an idea of how attributes work in practice, it's time for some more theory, making sure you understand them thoroughly. First of all, I mentioned this briefly before, attributes can be added in several places.</p>
<p>In classes, as well as anonymous classes;</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-comment">#[<span class="hljs-highlight  type">ClassAttribute</span>]</span>
<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyClass</span> </span>{ <span class="hljs-comment">/* … */</span> }

$object = <span class="hljs-keyword">new</span> <span class="hljs-comment">#[<span class="hljs-highlight  type">ObjectAttribute</span>] class () { /* … */ };</span></code></pre>
<p>Properties and constants;</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-comment">#[<span class="hljs-highlight  type">PropertyAttribute</span>]</span>
<span class="hljs-keyword">public</span> <span class="hljs-highlight  type">int</span> $foo;

<span class="hljs-comment">#[<span class="hljs-highlight  type">ConstAttribute</span>]</span>
<span class="hljs-keyword">public</span> <span class="hljs-keyword">const</span> BAR = <span class="hljs-number">1</span>;</code></pre>
<p>Methods and functions;</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-comment">#[<span class="hljs-highlight  type">MethodAttribute</span>]</span>
<span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">doSomething</span><span class="hljs-params">()</span>: <span class="hljs-title">void</span> </span>{ <span class="hljs-comment">/* … */</span> }

<span class="hljs-comment">#[<span class="hljs-highlight  type">FunctionAttribute</span>]</span>
<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">foo</span><span class="hljs-params">()</span> </span>{ <span class="hljs-comment">/* … */</span> }</code></pre>
<p>As well as closures;</p>
<pre><code class="language-php hljs php" data-lang="php">$closure = <span class="hljs-comment">#[<span class="hljs-highlight  type">ClosureAttribute</span>] <span class="hljs-highlight  keyword">fn</span>() =&gt; /* … */;</span></code></pre>
<p>And method and function parameters;</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">foo</span><span class="hljs-params">(<span class="hljs-highlight  comment">#[</span><span class="hljs-highlight  type">ArgumentAttribute</span><span class="hljs-highlight  comment">]</span> $bar)</span> </span>{ <span class="hljs-comment">/* … */</span> }</code></pre>
<p>They can be declared before or after docblocks;</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-comment">/** <span class="hljs-doctag">@return</span> void */</span>
<span class="hljs-comment">#[<span class="hljs-highlight  type">MethodAttribute</span>]</span>
<span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">doSomething</span><span class="hljs-params">()</span>: <span class="hljs-title">void</span> </span>{ <span class="hljs-comment">/* … */</span> }</code></pre>
<p>And can take no, one or several arguments, which are defined by the attribute's constructor:</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-comment">#[<span class="hljs-highlight  type">Listens</span>(<span class="hljs-highlight  type">ProductCreatedEvent</span><span class="hljs-highlight  keyword">::class</span>)]</span>
<span class="hljs-comment">#[<span class="hljs-highlight  type">Autowire</span>]</span>
<span class="hljs-comment">#[<span class="hljs-highlight  type">Route</span>(<span class="hljs-highlight  type">Http</span>::<span class="hljs-highlight  prop">POST</span>, <span class="hljs-highlight  text">'/products/create'</span>)]</span></code></pre>
<p>As for allowed parameters you can pass to an attribute, you've already seen that class constants, <code>::class</code> names and scalar types are allowed. There's a little more to be said about this though: attributes only accept constant expressions as input arguments.</p>
<p>This means that scalar expressions are allowed — even bit shifts — as well as <code>::class</code>, constants, arrays and array unpacking, boolean expressions and the null coalescing operator. A list of everything that's allowed as a constant expression can be found in the <a target="_blank" href="https://github.com/php/php-src/blob/9122638ecd7dfee1cbd141a15a8d59bfc47f6ab3/Zend/zend_compile.c#L8500-L8514">source code</a>.</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-comment">#[<span class="hljs-highlight  type">AttributeWithScalarExpression</span>(<span class="hljs-highlight  text">1 + 1</span>)]</span>
<span class="hljs-comment">#[<span class="hljs-highlight  type">AttributeWithClassNameAndConstants</span>(<span class="hljs-highlight  type">PDO</span><span class="hljs-highlight  keyword">::class</span>, <span class="hljs-highlight  prop">PHP_VERSION_ID</span>)]</span>
<span class="hljs-comment">#[<span class="hljs-highlight  type">AttributeWithClassConstant</span>(<span class="hljs-highlight  type">Http</span>::<span class="hljs-highlight  prop">POST</span>)]</span>
<span class="hljs-comment">#[<span class="hljs-highlight  type">AttributeWithBitShift</span>(<span class="hljs-highlight  text">4 &gt;&gt; 1, 4 &lt;&lt; 1</span>)]</span></code></pre>
<h2 id="attribute-configuration"><a href="#attribute-configuration" class="heading-anchor">#</a> Attribute configuration</h2>
<p>By default, attributes can be added in several places, as listed above. It's possible, however, to configure them so they can only be used in specific places. For example you could make it so that <code><span class="hljs-highlight  type">ClassAttribute</span></code> can only be used on classes, and nowhere else. Opting-in this behaviour is done by passing a flag to the <code><span class="hljs-highlight  type">Attribute</span></code> attribute on the attribute class.</p>
<p>It looks like this:</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-comment">#[<span class="hljs-highlight  type">Attribute</span>(<span class="hljs-highlight  type">Attribute</span>::<span class="hljs-highlight  prop">TARGET_CLASS</span>)]</span>
<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ClassAttribute</span>
</span>{
}</code></pre>
<p>The following flags are available:</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-highlight  type">Attribute</span>::<span class="hljs-highlight  prop">TARGET_CLASS</span>
<span class="hljs-highlight  type">Attribute</span>::<span class="hljs-highlight  prop">TARGET_FUNCTION</span>
<span class="hljs-highlight  type">Attribute</span>::<span class="hljs-highlight  prop">TARGET_METHOD</span>
<span class="hljs-highlight  type">Attribute</span>::<span class="hljs-highlight  prop">TARGET_PROPERTY</span>
<span class="hljs-highlight  type">Attribute</span>::<span class="hljs-highlight  prop">TARGET_CLASS_CONSTANT</span>
<span class="hljs-highlight  type">Attribute</span>::<span class="hljs-highlight  prop">TARGET_PARAMETER</span>
<span class="hljs-highlight  type">Attribute</span>::<span class="hljs-highlight  prop">TARGET_ALL</span></code></pre>
<p>These are bitmask flags, so you can combine them <a href="/blog/bitwise-booleans-in-php">using a binary OR operation</a>.</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-comment">#[<span class="hljs-highlight  type">Attribute</span>(<span class="hljs-highlight  type">Attribute</span>::<span class="hljs-highlight  prop">TARGET_METHOD</span>|<span class="hljs-highlight  type">Attribute</span>::<span class="hljs-highlight  prop">TARGET_FUNCTION</span>)]</span>
<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ClassAttribute</span>
</span>{
}</code></pre>
<p>Another configuration flag is about repeatability. By default the same attribute can't be applied twice, unless it's specifically marked as repeatable. This is done the same way as target configuration, with a bit flag.</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-comment">#[<span class="hljs-highlight  type">Attribute</span>(<span class="hljs-highlight  type">Attribute</span>::<span class="hljs-highlight  prop">IS_REPEATABLE</span>)]</span>
<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ClassAttribute</span>
</span>{
}</code></pre>
<p>Note that all these flags are only validated when calling <code>$attribute-><span class="hljs-highlight  prop">newInstance</span>()</code>, not earlier.</p>
<h2 id="built-in-attributes"><a href="#built-in-attributes" class="heading-anchor">#</a> Built-in attributes</h2>
<p>Once the base RFC had been accepted, new opportunities arose to add built-in attributes to the core. One such example is the <a target="_blank" href="https://wiki.php.net/rfc/deprecated_attribute"><code><span class="hljs-highlight  comment">#[</span><span class="hljs-highlight  type">Deprecated</span><span class="hljs-highlight  comment">]</span></code></a> attribute, and a popular example has been a <code><span class="hljs-highlight  comment">#[</span><span class="hljs-highlight  type">Jit</span><span class="hljs-highlight  comment">]</span></code> attribute — if you're not sure what that last one is about, you can read my post about <a href="/blog/php-jit">what the JIT is</a>.</p>
<p>I'm sure we'll see more and more built-in attributes in the future.</p>
<p>As a final note, for those worrying about generics: the syntax won't conflict with them, if they ever were to be added in PHP, so we're safe!</p>
<hr />
<p><div class="sidenote">
    <p>
        Tired of managing servers?
        Check out <a href="https://gumroad.com/a/575280243" ping="https://analytics.stitcher.io/r" target="_blank" rel="noopener noreferrer">Serverless Visually Explained</a> by Matthieu Napoli and learn how to create scalable PHP applications on AWS.
    </p>
</div>
</p>
<hr />
<p>I've got some use-cases already in mind for attributes, what about you? If you've got some thoughts to share about this awesome new feature in PHP 8, you can reach me on <a target="_blank" href="https://twitter.com/brendt_gd">Twitter</a> or via <a href="mailto:brendt@stitcher.io">e-mail</a>, or we can discuss it over on <a target="_blank" href="https://www.reddit.com/r/PHP/comments/gixnf3/attributes_in_php_8/">Reddit</a>.</p>
 ]]></summary>

                <updated>2020-09-03T00:00:00+00:00</updated>
            </entry>
                                <entry>
                <title><![CDATA[ How to merge multidimensional arrays in PHP? ]]></title>

                <link rel="alternate" href="https://stitcher.io/blog/merging-multidimensional-arrays-in-php"/>

                <id>https://www.stitcher.io/blog/merging-multidimensional-arrays-in-php</id>

                <author>
                    <name><![CDATA[ Brent Roose ]]></name>
                </author>

                <summary type="html"><![CDATA[ <p>If you want to join two multidimensional arrays in PHP, you should still use <code>array_merge</code>, and not <code>array_merge_recursive</code>. Confused? So was I. Let's explain what's happening.</p>
<p><div class="ad-container">
    <script async type="text/javascript" src="//cdn.carbonads.com/carbon.js?serve=CK7ICK3W&placement=stitcherio" id="_carbonads_js"></script>
</div>
</p>
<p>Let's first explain what <code>array_merge_recursive</code> does, take for example these two arrays:</p>
<pre><code class="language-php hljs php" data-lang="php">$first = [
    <span class="hljs-string">'key'</span> =&gt; <span class="hljs-string">'original'</span>
];

$second = [
    <span class="hljs-string">'key'</span> =&gt; <span class="hljs-string">'override'</span>
];</code></pre>
<p>Using <code>array_merge_recursive</code> will result in the following:</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-highlight  prop">array_merge_recursive</span>($first, $second);

<span class="hljs-comment">// [</span>
<span class="hljs-comment">//     'key' =&gt; [</span>
<span class="hljs-comment">//         'original',</span>
<span class="hljs-comment">//         'override',</span>
<span class="hljs-comment">//     ],</span>
<span class="hljs-comment">// ]</span></code></pre>
<p>Instead over overriding the original <code>key</code> value, <code>array_merge_recursive</code> created an array, with the original and new value both in it.</p>
<p>While that looks strange in this simple example, it's actually more useful in cases where one of the values already is an array, and you want to merge another item in that array, instead of overriding it.</p>
<pre><code class="language-php hljs php" data-lang="php">$first = [
    <span class="hljs-string">'key'</span> =&gt; [<span class="hljs-string">'original'</span>]
];

$second = [
    <span class="hljs-string">'key'</span> =&gt; <span class="hljs-string">'override'</span>
];</code></pre>
<p>In this case, <code>array_merge_recursive</code> will yield the same result as the first example: it takes the value from the <code>$second</code> array, and appends it to the value in the <code>$first</code> array, which already was an array itself.</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-highlight  prop">array_merge_recursive</span>($first, $second);

<span class="hljs-comment">// [</span>
<span class="hljs-comment">//     'key' =&gt; [</span>
<span class="hljs-comment">//         'original',</span>
<span class="hljs-comment">//         'override',</span>
<span class="hljs-comment">//     ],</span>
<span class="hljs-comment">// ]</span></code></pre>
<p>So if you want to merge multidimensional arrays, you can simply use <code>array_merge</code>, it can handle multiple levels of arrays just fine:</p>
<pre><code class="language-php hljs php" data-lang="php">$first = [
    <span class="hljs-string">'level 1'</span> =&gt; [
        <span class="hljs-string">'level 2'</span> =&gt; <span class="hljs-string">'original'</span>
    ]
];

$second = [
    <span class="hljs-string">'level 1'</span> =&gt; [
        <span class="hljs-string">'level 2'</span> =&gt; <span class="hljs-string">'override'</span>
    ]
];

<span class="hljs-highlight  prop">array_merge</span>($first, $second);

<span class="hljs-comment">// [  </span>
<span class="hljs-comment">//     'level 1' =&gt; [</span>
<span class="hljs-comment">//         'level 2' =&gt; 'override'</span>
<span class="hljs-comment">//     ]</span>
<span class="hljs-comment">// ]</span></code></pre>
<p>All of that being said, you could also use the <code>+</code> operator to merge multidimensional arrays, but <a href="/blog/what-is-array-plus-in-php">it will work slightly different</a> compared to <code>array_merge</code>.</p>
<p><div class="author">
    Noticed a tpyo? You can submit a
    <a href="https://github.com/brendt/stitcher.io" target="_blank" rel="noopener noreferrer">PR</a> to fix it.

    If you want to stay up to date about what's happening on this blog, you can follow me
    <a href="https://mobile.twitter.com/brendt_gd" target="_blank" rel="noopener noreferrer">on Twitter</a> or subscribe to my newsletter:

    <form action="https://mail.stitcher.io/subscribe/81fa83d0-4a0b-4eff-b897-f6ce51dfb7f0" method="post" class="newsletter-form">
        <label for="newsletter-email-46">Email</label>
        <input type="email" name="email" id="newsletter-email-46"/>
        <button type="submit" class="cta cta-small">Subscribe</button>
    </form>
</div>
</p>
 ]]></summary>

                <updated>2020-06-05T00:00:00+00:00</updated>
            </entry>
                                <entry>
                <title><![CDATA[ What does array + do in PHP? ]]></title>

                <link rel="alternate" href="https://stitcher.io/blog/what-is-array-plus-in-php"/>

                <id>https://www.stitcher.io/blog/what-is-array-plus-in-php</id>

                <author>
                    <name><![CDATA[ Brent Roose ]]></name>
                </author>

                <summary type="html"><![CDATA[ <p>In PHP it's possible to do array + array. The "plus" sign is a shorthand way of merging arrays, but there's a difference in how they are merged compared to using <code>array_merge</code>.</p>
<p>Let's imagine these two arrays:</p>
<pre><code class="language-php hljs php" data-lang="php">$first = [
    <span class="hljs-string">'a'</span>,
    <span class="hljs-string">'b'</span>,
];

$second = [
    <span class="hljs-string">'c'</span>,
];</code></pre>
<p>Merging them using <code>+</code> would result in the following:</p>
<pre><code class="language-php hljs php" data-lang="php">$first + $second;

<span class="hljs-comment">// ['a', 'b']</span></code></pre>
<p>While using <code>array_merge</code>, would result in this:</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-highlight  prop">array_merge</span>($first, $second);

<span class="hljs-comment">// ['a', 'b', 'c']</span></code></pre>
<p><div class="ad-container">
    <script async type="text/javascript" src="//cdn.carbonads.com/carbon.js?serve=CK7ICK3W&placement=stitcherio" id="_carbonads_js"></script>
</div>
</p>
<p>What's happening here is that <code>array_merge</code> will override existing keys, while <code>+</code> will not. In other words: when a key exists in the first array, <code>+</code> will not merge an item with the same key from another array into the first one.</p>
<p>In our example, both arrays actually had numerical keys, like so:</p>
<pre><code class="language-php hljs php" data-lang="php">$first = [
    <span class="hljs-number">0</span> =&gt; <span class="hljs-string">'a'</span>,
    <span class="hljs-number">1</span> =&gt; <span class="hljs-string">'b'</span>,
];

$second = [
    <span class="hljs-number">0</span> =&gt; <span class="hljs-string">'c'</span>,
];</code></pre>
<p>Which explains why <code>$first + $second</code> doesn't add 'c' as an element: there already is an item with index <code>0</code> in the original.</p>
<p>The same applies for textual keys:</p>
<pre><code class="language-php hljs php" data-lang="php">$first = [
    <span class="hljs-string">'a'</span> =&gt; <span class="hljs-string">'a'</span>,
    <span class="hljs-string">'b'</span> =&gt; <span class="hljs-string">'b'</span>,
];

$second = [
    <span class="hljs-string">'a'</span> =&gt; <span class="hljs-string">'a - override'</span>,
];

$first + $second;

<span class="hljs-comment">// ['a' =&gt; 'a', 'b' =&gt; 'b']</span></code></pre>
<p>And finally, <code>+</code> also works with nested arrays:</p>
<pre><code class="language-php hljs php" data-lang="php">$first = [
    <span class="hljs-string">'level 1'</span> =&gt; [
        <span class="hljs-string">'level 2'</span> =&gt; <span class="hljs-string">'original'</span>
    ],
];

$second = [
    <span class="hljs-string">'level 1'</span> =&gt; [
        <span class="hljs-string">'level 2'</span> =&gt; <span class="hljs-string">'override'</span>
    ],
];</code></pre>
<p>Using <code>+</code> will keep the <code>original</code> value, while <code>array_merge</code> would <code>override</code> it.</p>
<p>One more thing to mention is that <code>+</code> will apply the same behaviour when <a href="/blog/merging-multidimensional-arrays-in-php">merging multidimensional arrays</a>.</p>
<p><div class="author">
    Noticed a tpyo? You can submit a
    <a href="https://github.com/brendt/stitcher.io" target="_blank" rel="noopener noreferrer">PR</a> to fix it.

    If you want to stay up to date about what's happening on this blog, you can follow me
    <a href="https://mobile.twitter.com/brendt_gd" target="_blank" rel="noopener noreferrer">on Twitter</a> or subscribe to my newsletter:

    <form action="https://mail.stitcher.io/subscribe/81fa83d0-4a0b-4eff-b897-f6ce51dfb7f0" method="post" class="newsletter-form">
        <label for="newsletter-email-47">Email</label>
        <input type="email" name="email" id="newsletter-email-47"/>
        <button type="submit" class="cta cta-small">Subscribe</button>
    </form>
</div>
</p>
 ]]></summary>

                <updated>2020-06-05T00:00:00+00:00</updated>
            </entry>
                                <entry>
                <title><![CDATA[ Survey: type systems in PHP ]]></title>

                <link rel="alternate" href="https://stitcher.io/blog/type-system-in-php-survey"/>

                <id>https://www.stitcher.io/blog/type-system-in-php-survey</id>

                <author>
                    <name><![CDATA[ Brent Roose ]]></name>
                </author>

                <summary type="html"><![CDATA[ <p>Hi there! Thanks for spending 5 minutes of your time on this quick survey. My goal with it is to investigate the correlation between type-systems and project size in the PHP community.</p>
<p>Once this survey has gathered enough results, I will publish my conclusions on this blog. If you want stay updated on that, you can <a target="_blank" href="https://stitcher.us20.list-manage.com/subscribe?u=ca00be85f8183f513ec127063&amp;id=0c24251135">subscribe to my newsletter</a>, <a target="_blank" href="https://twitter.com/brendt_gd">follow me on Twitter</a> or <a target="_blank" href="/rss">subscribe to my RSS feed</a>.</p>
<p><div class="ad-container">
    <script async type="text/javascript" src="//cdn.carbonads.com/carbon.js?serve=CK7ICK3W&placement=stitcherio" id="_carbonads_js"></script>
</div>
</p>
<p>A small update, I've gathered enough results, you can read about them <a href="/blog/type-system-in-php-survey-results">here</a>.</p>
 ]]></summary>

                <updated>2020-06-03T00:00:00+00:00</updated>
            </entry>
                                <entry>
                <title><![CDATA[ What&#039;s the latest PHP version? ]]></title>

                <link rel="alternate" href="https://stitcher.io/blog/the-latest-php-version"/>

                <id>https://www.stitcher.io/blog/the-latest-php-version</id>

                <author>
                    <name><![CDATA[ Brent Roose ]]></name>
                </author>

                <summary type="html"><![CDATA[ <p>It seems like a simple question with a simple answer: the latest PHP version currently is <a href="/blog/new-in-php-74">PHP 7.4</a>. However! If you want to know more inside information about how PHP's lifecycle is managed, keep on reading!</p>
<h2 id="levels-of-support"><a href="#levels-of-support" class="heading-anchor">#</a> Levels of support</h2>
<p><div class="ad-container">
    <script async type="text/javascript" src="//cdn.carbonads.com/carbon.js?serve=CK7ICK3W&placement=stitcherio" id="_carbonads_js"></script>
</div>
</p>
<p>PHP versions are grouped in three levels of support: active, security fixes only and end of life. The "end of life" versions should be avoided at all costs, usually a version goes into the "end of life" phase after three years. A year before that, it goes into the "security fixes only" phase, where only the most needed security fixes are released, and no more other improvements or bug fixes.</p>
<p>These are the currently active supported PHP versions:</p>
<table>
<tr>
    <td>PHP 7.2</td>
    <td>Security fixes until November 30, 2020</td>
</tr>
<tr>
    <td>PHP 7.3</td>
    <td>Active support until December 6, 2020</td>
</tr>
<tr>
    <td>PHP 7.4 (current)</td>
    <td>Active support until November 28, 2021</td>
</tr>
</table>
<p>This release cycle guarantees that, usually, only three versions of PHP are supported at any given time, with only two being actively supported.
I say <em>usually</em> because PHP 5.6 had a year extra of security fixes support, but that has also ended now: PHP 5.6 was supported up until December 31, 2018.</p>
<h2 id="a-look-at-the-past"><a href="#a-look-at-the-past" class="heading-anchor">#</a> A look at the past</h2>
<p>So, if you're not running PHP 7.2, 7.3 or 7.4, you're running a version that won't receive any updates anymore. At least none from the official PHP developers. There are in fact companies still working independently on old PHP versions like PHP 5.6.</p>
<p>These initiatives of course only exist because there's a need for them: PHP 5.6 is somewhat the Windows XP of the PHP world: it was such a popular release at the time, and many older projects aren't able to deal with the breaking changes the new major version of PHP brings. As a sidenote: the new PHP version after PHP 5.6 is PHP 7 and 6 was skipped; but that's a story for another day.</p>
<p>The PHP 5.* era was the one that set PHP on a course for maturity, a path that would be continued in the 7.* versions, and one that has proven itself over the past years: PHP's performance increased significantly compared to the 5.* versions, the rich community only, and the language syntax and type system kept evolving towards a modern day language.</p>
<p>Obviously PHP bears the consequences of more than 26 years of legacy with it, but in that time it has also proven itself to be a robust and stable language, despite its reputation.</p>
<p>About that reputation — PHP is still looked down upon by many who don't know the modern language — PHP is quite a good language these days. Yes, it carries its battle scars, and we'd wish for many legacy things to just go away, but overall it's quite a nice tool; one that has proven itself time and time again.</p>
<p>These days, the core teams keeps a consistent release cycle: one new release every year, and every 4 or 5 years a new major release. And there are exiting times to come: 2020 will be the year of the new major release, since <a href="/blog/new-in-php-8">PHP 8</a> is coming by the end of the year!</p>
<p>Every new release is done in stages: the last months before the general availability — GA, or simply <em>the release</em> — is focused on testing all the new features and changes. First there are couple of alpha releases, followed by beta releases, followed by release candidates, followed by the final release: GA.</p>
<p><div class="author">
    Noticed a tpyo? You can submit a
    <a href="https://github.com/brendt/stitcher.io" target="_blank" rel="noopener noreferrer">PR</a> to fix it.

    If you want to stay up to date about what's happening on this blog, you can follow me
    <a href="https://mobile.twitter.com/brendt_gd" target="_blank" rel="noopener noreferrer">on Twitter</a> or subscribe to my newsletter:

    <form action="https://mail.stitcher.io/subscribe/81fa83d0-4a0b-4eff-b897-f6ce51dfb7f0" method="post" class="newsletter-form">
        <label for="newsletter-email-48">Email</label>
        <input type="email" name="email" id="newsletter-email-48"/>
        <button type="submit" class="cta cta-small">Subscribe</button>
    </form>
</div>
</p>
<p>During the alpha phase, new features are still allowed to be added. But once in beta, the final form of the new version has been decided on.</p>
<p>These features, by the way, are decided upon by a core committee who votes on RFCs, which stands for <em>request for comments</em>. These RFCs describe a feature or a change to the language, and are discussed in depth. Everyone is allowed to make RFCs if they want to, but RFCs are of course critically looked at.</p>
<h2 id="php-8-release-schedule"><a href="#php-8-release-schedule" class="heading-anchor">#</a> PHP 8 release schedule</h2>
<table>
<tr>
    <td>Alpha 1</td>
    <td>June 25, 2020</td>
</tr>
<tr>
    <td>Alpha 2</td>
    <td>July 9, 2020</td>
</tr>
<tr>
    <td>Alpha 3</td>
    <td>July 23, 2020</td>
</tr>
<tr>
    <td>Feature freeze</td>
    <td>August 04, 2020</td>
</tr>
<tr>
    <td>Beta 1</td>
    <td>August 06, 2020</td>
</tr>
<tr>
    <td>Beta 2</td>
    <td>August 20, 2020</td>
</tr>
<tr>
    <td>Beta 3</td>
    <td>September 3, 2020</td>
</tr>
<tr>
    <td>Beta 4</td>
    <td>September 17, 2020</td>
</tr>
<tr>
    <td>Release candidate 1</td>
    <td>October 1, 2020</td>
</tr>
<tr>
    <td>Release candidate 2</td>
    <td>October 15, 2020</td>
</tr>
<tr>
    <td>Release candidate 3</td>
    <td>October 29, 2020</td>
</tr>
<tr>
    <td>Release candidate 4</td>
    <td>November 12, 2020</td>
</tr>
<tr>
    <td>General availability</td>
    <td>November 26, 2020</td>
</tr>
</table>
<p>It <em>is</em> possible by the way, for the dates to shift a little bit still, this will depend on how testing goes early on. Speaking of testing: everyone is allowed to do so, it's even encouraged to try stuff out in your own projects, so that enough feedback can be provided to the core team on time.</p>
<p><div class="sidenote">
    <p>
        Tired of managing servers?
        Check out <a href="https://gumroad.com/a/575280243" ping="https://analytics.stitcher.io/r" target="_blank" rel="noopener noreferrer">Serverless Visually Explained</a> by Matthieu Napoli and learn how to create scalable PHP applications on AWS.
    </p>
</div>
</p>
<hr />
<p>I told you there was more to PHP's release cycle than just one active version 😁. My advice for modern-day projects would be this: always make sure to update at the latest a few months after GA. Don't lack behind 2 or 3 versions, or even worse: be stuck in PHP 5 land.</p>
<p>The updates actually never were that much of a pain, and there's so much to gain: performance improvements, security benefits, new syntax, wider community support. So keep that in mind, and let's look forward to <a href="/blog/new-in-php-8">PHP 8</a>!</p>
 ]]></summary>

                <updated>2020-06-02T00:00:00+00:00</updated>
            </entry>
                                <entry>
                <title><![CDATA[ Improvements on Laravel Nova ]]></title>

                <link rel="alternate" href="https://stitcher.io/blog/improvements-on-laravel-nova"/>

                <id>https://www.stitcher.io/blog/improvements-on-laravel-nova</id>

                <author>
                    <name><![CDATA[ Brent Roose ]]></name>
                </author>

                <summary type="html"><![CDATA[ <h2 id="a-long-time-ago-in-a-galaxy-far,-far-away…"><a href="#a-long-time-ago-in-a-galaxy-far,-far-away…" class="heading-anchor">#</a> A long time ago in a galaxy far, far away…</h2>
<p><a target="_blank" href="https://nova.laravel.com">Laravel Nova</a> was launched on 22nd August 2018, as
the official administration panel for Laravel web applications.</p>
<p><img src="/resources/img/blog/improvements-on-laravel-nova/nova-1.jpg" srcset="/resources/img/blog/improvements-on-laravel-nova/nova-1-932x587.jpg 932w, /resources/img/blog/improvements-on-laravel-nova/nova-1-807x509.jpg 807w, /resources/img/blog/improvements-on-laravel-nova/nova-1-659x415.jpg 659w, /resources/img/blog/improvements-on-laravel-nova/nova-1-466x293.jpg 466w, /resources/img/blog/improvements-on-laravel-nova/nova-1-1043x658.jpg 1043w" sizes="" alt=""></img></p>
<p>That was <a target="_blank" href="https://twitter.com/taylorotwell">Taylor Otwell</a> making the presentation at
the Laracon US 2018, and since then Nova has evolved a lot, offering a better a UI experience,
faster performance, and at the end giving backend creators a true experience on how
to have a seamless integration between a Laravel application and the respective Resources
(or Eloquent <em>empowered</em> models) integrated into a nice CRUD interface.</p>
<p>When Nova was created, a lot of expectations were already present in the Laravel community
in the way that Laravel Nova should be a real administration back-office system, since
this was a niche that was already covered by very nice alternative CRUD platforms like
<a target="_blank" href="https://2019.quickadminpanel.com/">QuickAdminPanel</a> or <a target="_blank" href="https://backpackforlaravel.com/">Laravel BackPack</a>
but they weren't an official Laravel product. So, when Nova was launched right after Laracon
it went like a sales hit, everybody was talking about it, and everybody that bought a license
experienced challenges to using it too. But those are things from the past :)</p>
<p>Nova evolved since then and evolved a lot! It's no longer a simple Resource Management tool
and I want to share with you 6 must-have features that might help you when you are developing
your Nova projects. Also, if you want deep dive in Nova, I suggest you subscribe to updates
in my upcoming course <a target="_blank" href="https://www.masteringnova.com">Mastering Nova</a> that will be released
this mid-summer!</p>
<p><div class="ad-container">
    <script async type="text/javascript" src="//cdn.carbonads.com/carbon.js?serve=CK7ICK3W&placement=stitcherio" id="_carbonads_js"></script>
</div>
</p>
<h2 id="1.-creating-your-custom-css-theme"><a href="#1.-creating-your-custom-css-theme" class="heading-anchor">#</a> 1. Creating your custom CSS theme</h2>
<p>The first versions of Nova you weren't able to customize your Theme and to tweak it
in a way without having your CSS code being overridden each time a new version of Nova was
being published.</p>
<p>Now you can create your CSS theme, like this:</p>
<pre><code class="language-xl hljs xl" data-lang="xl">php artisan nova:<span class="hljs-built_in">theme</span> brunocfalcao/masteringnova-<span class="hljs-built_in">theme</span></code></pre>
<p>After that, you have a CSS class in your new package at <code>resources/css/theme.css</code> where
you can then apply all the new <a target="_blank" href="https://tailwindcss.com">Tailwind</a> classes that you want
to use in your Nova instance.</p>
<p>If you want to even fully customize the entire Nova classes you can enable it using a
custom package, then use the Nova::enableThemingClasses() to fully brand it to your needs.</p>
<p>This feature will prefix the Vue components with the string <code>nova-</code>.
For example, Nova will
add the class name nova-heading to the top-level of the Heading component so you can
then style it from there.</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-comment">// NovaServiceProvider.php</span>

<span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">boot</span><span class="hljs-params">()</span>
</span>{
    <span class="hljs-highlight  type">Nova</span>::<span class="hljs-highlight  prop">enableThemingClasses</span>()
}</code></pre>
<pre><code class="language-js hljs javascript" data-lang="js"><span class="hljs-comment">// app.js</span>

<span class="hljs-comment">/**
 * If configured, register a global mixin to add theming-friendly CSS
 * classnames to Nova's built-in Vue components. This allows the user
 * to fully customize Nova's theme to their project's branding.
 */</span>
<span class="hljs-keyword">if</span> (<span class="hljs-built_in">window</span>.config.themingClasses) {
    Vue.mixin(ThemingClasses)
}</code></pre>
<h2 id="2.-dynamic-field-visibility-statuses"><a href="#2.-dynamic-field-visibility-statuses" class="heading-anchor">#</a> 2. Dynamic Field visibility statuses</h2>
<p>in the version 1.x of Nova you would control your Fields visibility using 8 methods:</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-highlight  prop">hideFromIndex</span>()
<span class="hljs-highlight  prop">hideFromDetail</span>()
<span class="hljs-highlight  prop">hideWhenCreating</span>()
<span class="hljs-highlight  prop">hideWhenUpdating</span>()
<span class="hljs-highlight  prop">onlyOnIndex</span>()
<span class="hljs-highlight  prop">onlyOnDetail</span>()
<span class="hljs-highlight  prop">onlyOnForms</span>()
<span class="hljs-highlight  prop">exceptOnForms</span>()</code></pre>
<p>Now, you have the <code>show*()</code> methods that allow you to show your Resource in the
respective display context without the dependency of other display contexts. For instance
you can have a <code>showOnIndex()</code> and a <code>showOnCreating()</code>, using a callback on the method
that should return <code>true</code>.</p>
<pre><code class="language-xml hljs xml" data-lang="xml"><span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">prop&gt;</span>showOnIndex<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>()
<span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">prop&gt;</span>showOnDetail<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>()
<span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">prop&gt;</span>showOnCreating<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>()
<span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">prop&gt;</span>showOnUpdating<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>()</code></pre>
<h2 id="3.-new-field-types-to-create-a-better-user-experience"><a href="#3.-new-field-types-to-create-a-better-user-experience" class="heading-anchor">#</a> 3. New field types to create a better user experience</h2>
<p>Since version 1.x that we see being added new field types to Nova. Let me highlight
you some of the ones I consider the best additions:</p>
<h3 id="sparkline-field"><a href="#sparkline-field" class="heading-anchor">#</a> SparkLine Field</h3>
<p>See it a Chart "on-the-fly" directly in your Resource index or detail contexts.</p>
<p><img src="/resources/img/blog/improvements-on-laravel-nova/sparkline-field.jpg" srcset="/resources/img/blog/improvements-on-laravel-nova/sparkline-field-580x215.jpg 580w, /resources/img/blog/improvements-on-laravel-nova/sparkline-field-335x124.jpg 335w, /resources/img/blog/improvements-on-laravel-nova/sparkline-field-750x279.jpg 750w, /resources/img/blog/improvements-on-laravel-nova/sparkline-field-670x249.jpg 670w, /resources/img/blog/improvements-on-laravel-nova/sparkline-field-474x176.jpg 474w" sizes="" alt=""></img></p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-highlight  type">Sparkline</span>::<span class="hljs-highlight  prop">make</span>(<span class="hljs-string">'Total devices Per Week'</span>)
    -&gt;<span class="hljs-highlight  prop">data</span>($data)
    -&gt;<span class="hljs-highlight  prop">asBarChart</span>()
    -&gt;<span class="hljs-highlight  prop">width</span>(<span class="hljs-number">300</span>),</code></pre>
<h3 id="key-value-field"><a href="#key-value-field" class="heading-anchor">#</a> Key-Value Field</h3>
<p>Key-value fields are ways for you to interact with JSON data type columns, providing
a way to manage Key-Value entries in a CRUD way.</p>
<p><img src="/resources/img/blog/improvements-on-laravel-nova/key-value-field.jpg" srcset="/resources/img/blog/improvements-on-laravel-nova/key-value-field-707x126.jpg 707w, /resources/img/blog/improvements-on-laravel-nova/key-value-field-1226x219.jpg 1226w, /resources/img/blog/improvements-on-laravel-nova/key-value-field-1583x284.jpg 1583w, /resources/img/blog/improvements-on-laravel-nova/key-value-field-1001x179.jpg 1001w, /resources/img/blog/improvements-on-laravel-nova/key-value-field-1415x253.jpg 1415w" sizes="" alt=""></img></p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-highlight  type">KeyValue</span>::<span class="hljs-highlight  prop">make</span>(<span class="hljs-string">'Server Data'</span>, <span class="hljs-string">'server_data'</span>)
    -&gt;<span class="hljs-highlight  prop">keyLabel</span>(<span class="hljs-string">'Parameter'</span>)
    -&gt;<span class="hljs-highlight  prop">valueLabel</span>(<span class="hljs-string">'Value'</span>)
    -&gt;<span class="hljs-highlight  prop">actionText</span>(<span class="hljs-string">'Add Server Parameter'</span>)
    -&gt;<span class="hljs-highlight  prop">rules</span>(<span class="hljs-string">'json'</span>)
    -&gt;<span class="hljs-highlight  prop">nullable</span>(),

<span class="hljs-comment">// In your model:</span>
<span class="hljs-highlight  prop"><span class="hljs-keyword">protected</span> $casts = [</span>
    <span class="hljs-string">'server_data'</span> =&gt; <span class="hljs-string">'json'</span>
];</code></pre>
<h3 id="hidden-field"><a href="#hidden-field" class="heading-anchor">#</a> Hidden Field</h3>
<p>At first, it might not be useful, but believe me, it's great to have it since
you can apply data computations to be sent to your UI components.</p>
<pre><code class="language-livescript hljs livescript" data-lang="livescript"><span class="hljs-highlight  type">Hidden</span>::<span class="hljs-highlight  prop">make</span><span class="hljs-function"><span class="hljs-params">(<span class="hljs-string">'User'</span>, <span class="hljs-string">'user_id'</span>)</span>-&gt;</span><span class="hljs-highlight  prop"><span class="hljs-keyword">default</span></span>(
    <span class="hljs-highlight  keyword">fn</span><span class="hljs-function"><span class="hljs-params">($request)</span> =&gt; <span class="hljs-title">$request</span>-&gt;</span><span class="hljs-highlight  prop">user</span><span class="hljs-function"><span class="hljs-params">()</span>-&gt;</span>id
);</code></pre>
<h3 id="vaporfile-and-vaporimage-fields"><a href="#vaporfile-and-vaporimage-fields" class="heading-anchor">#</a> VaporFile and VaporImage Fields</h3>
<p>These are the <em>newest kids on the block</em> since they allow you to upload files or
images into your Laravel Vapor instance. They will generate a temporary upload
URL for Amazon S3 and will immediately upload the file.</p>
<p><img src="/resources/img/blog/improvements-on-laravel-nova/vapor-fields.jpg" srcset="/resources/img/blog/improvements-on-laravel-nova/vapor-fields-518x172.jpg 518w, /resources/img/blog/improvements-on-laravel-nova/vapor-fields-670x223.jpg 670w, /resources/img/blog/improvements-on-laravel-nova/vapor-fields-423x140.jpg 423w, /resources/img/blog/improvements-on-laravel-nova/vapor-fields-599x199.jpg 599w, /resources/img/blog/improvements-on-laravel-nova/vapor-fields-299x99.jpg 299w" sizes="" alt=""></img></p>
<pre><code class="language-xml hljs xml" data-lang="xml"><span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">type&gt;</span>VaporFile<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>::<span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">prop&gt;</span>make<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>('Filename'),
<span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">type&gt;</span>VaporImage<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>::<span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">prop&gt;</span>make<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>('Avatar')-&gt;<span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">prop&gt;</span>maxWidth<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>(80)-&gt;<span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">prop&gt;</span>rounded<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>(false),</code></pre>
<h3 id="searchable-select-fields"><a href="#searchable-select-fields" class="heading-anchor">#</a> Searchable Select Fields</h3>
<p>On the latest Nova version 3.6.0 you can now have a Searchable Select field.</p>
<p><img src="/resources/img/blog/improvements-on-laravel-nova/select-searchable.jpg" srcset="/resources/img/blog/improvements-on-laravel-nova/select-searchable-1109x288.jpg 1109w, /resources/img/blog/improvements-on-laravel-nova/select-searchable-859x223.jpg 859w, /resources/img/blog/improvements-on-laravel-nova/select-searchable-701x182.jpg 701w, /resources/img/blog/improvements-on-laravel-nova/select-searchable-991x257.jpg 991w, /resources/img/blog/improvements-on-laravel-nova/select-searchable-495x128.jpg 495w" sizes="" alt=""></img></p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-highlight  type">Select</span>::<span class="hljs-highlight  prop">make</span>(<span class="hljs-string">'Tags'</span>, <span class="hljs-string">'tag_id'</span>)
    -&gt;<span class="hljs-highlight  prop">searchable</span>()
    -&gt;<span class="hljs-highlight  prop">options</span>(<span class="hljs-highlight  type">\App\Tag</span>::<span class="hljs-highlight  prop">all</span>()-&gt;<span class="hljs-highlight  prop">pluck</span>(<span class="hljs-string">'name'</span>, <span class="hljs-string">'id'</span>))
    -&gt;<span class="hljs-highlight  prop">displayUsingLabels</span>(),</code></pre>
<h2 id="4.-you-can-change-the-stubs"><a href="#4.-you-can-change-the-stubs" class="heading-anchor">#</a> 4. You can change the Stubs</h2>
<p>Since version 3.3.0 it's possible to publish the Nova stubs so you can change them to your
own needs.</p>
<pre><code class="language-css hljs css" data-lang="css"><span class="hljs-selector-tag">php</span> <span class="hljs-selector-tag">artisan</span> <span class="hljs-selector-tag">nova</span><span class="hljs-selector-pseudo">:stubs</span> <span class="hljs-selector-attr">[--force]</span></code></pre>
<p>The stubs are published directly in your app folder in a directory called "stubs".</p>
<h2 id="5.-ability-to-sort-your-resources-by-priority-on-the-sidebar"><a href="#5.-ability-to-sort-your-resources-by-priority-on-the-sidebar" class="heading-anchor">#</a> 5. Ability to sort your Resources by priority on the Sidebar</h2>
<p>This one I think it's undocumented but you can sort your Resources given a specific attribute in your Resource.</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-comment">// In NovaServiceProvider.php</span>
<span class="hljs-highlight  type">Nova</span>::<span class="hljs-highlight  prop">sortResourcesBy</span>(<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">($resource)</span> </span>{
    <span class="hljs-keyword">return</span> $resource::<span class="hljs-highlight  prop">$priority</span> ?? <span class="hljs-number">9999</span>;
});

<span class="hljs-comment">// In your Resource</span>
<span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-highlight  prop">$priority</span> = <span class="hljs-number">10</span>; <span class="hljs-comment">// Or any other number.</span></code></pre>
<p>The Sidebar Resources will then be sorted by this priority. Neat!</p>
<h2 id="6.-customize-where-a-global-search-link-can-take-you-to"><a href="#6.-customize-where-a-global-search-link-can-take-you-to" class="heading-anchor">#</a> 6. Customize where a Global Search link can take you to</h2>
<p>In specific cases, you might want to have your Global Search targeted Resource
to go to Edit and not to Detail, or vice-versa. All you have to do is to add
this static property on your Resource:</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-highlight  prop">$globalSearchLink</span> = <span class="hljs-string">'detail'</span>;</code></pre>
<hr />
<p>Hope you enjoyed, and in case you want to continue learning Laravel Nova you can
pre-subscribe my <a target="_blank" href="https://www.masteringnova.com">Mastering Nova Course</a> anytime!</p>
<hr />
<p>Once again thanks to <a target="_blank" href="https://twitter.com/brunocfalcao">Bruno</a> for writing this post!</p>
 ]]></summary>

                <updated>2020-05-26T00:00:00+00:00</updated>
            </entry>
                                <entry>
                <title><![CDATA[ PHP 7.4 in 7 code blocks ]]></title>

                <link rel="alternate" href="https://stitcher.io/blog/php-74-in-7-code-blocks"/>

                <id>https://www.stitcher.io/blog/php-74-in-7-code-blocks</id>

                <author>
                    <name><![CDATA[ Brent Roose ]]></name>
                </author>

                <summary type="html"><![CDATA[ <p>PHP 7.4, the last edition in the 7.* series, brings lots of new and handy changes. This post lists the highlights, though there's much more to this release. You can read all about the full release in this post about <a href="/blog/new-in-php-74">what's new in PHP 7.4</a>.</p>
<p><div class="ad-container">
    <script async type="text/javascript" src="//cdn.carbonads.com/carbon.js?serve=CK7ICK3W&placement=stitcherio" id="_carbonads_js"></script>
</div>
</p>
<hr />
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-highlight  prop">array_map</span>(
    <span class="hljs-highlight  green"><span class="hljs-highlight  keyword">fn</span>(<span class="hljs-highlight  type">User</span> $user) =&gt; $user-&gt;id</span>,
    $users
);</code></pre>
<p>Arrow functions, a.k.a. short closures. You can read about them in depth in <a href="/blog/short-closures-in-php">this post</a>.</p>
<hr />
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span>
</span>{
    <span class="hljs-keyword">public</span> <span class="hljs-highlight  green type">string</span> $name;
    
    <span class="hljs-keyword">public</span> <span class="hljs-highlight  green type">?Foo</span> $foo;
}</code></pre>
<p>Type properties. There's quite a lot to tell <a href="/blog/typed-properties-in-php-74">about them</a>.</p>
<hr />
<pre><code class="language-php hljs php" data-lang="php">$data[<span class="hljs-string">'date'</span>] <span class="hljs-highlight  green">??=</span> <span class="hljs-keyword">new</span> <span class="hljs-highlight  type">DateTime</span>();</code></pre>
<p>The null coalescing assignment operator. If you're unfamiliar with the null coalescing operator, you can read all about <a href="/blog/shorthand-comparisons-in-php">shorthand operators</a> in this blog.</p>
<hr />
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ParentType</span> </span>{}
<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ChildType</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">ParentType</span> </span>{}

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span>
</span>{
    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">covariantReturnTypes</span><span class="hljs-params">()</span>: <span class="hljs-highlight  green type"><span class="hljs-title">ParentType</span></span>
    </span>{ <span class="hljs-comment">/* … */</span> }
}

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">B</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">A</span>
</span>{
    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">covariantReturnTypes</span><span class="hljs-params">()</span>: <span class="hljs-highlight  green type"><span class="hljs-title">ChildType</span></span>
    </span>{ <span class="hljs-comment">/* … */</span> }
}</code></pre>
<p>Improved type variance. If you're not sure what that's about, you should take a look at this post about <a href="/blog/liskov-and-type-safety">Liskov and type safety</a>.</p>
<hr />
<pre><code class="language-php hljs php" data-lang="php">$result = [<span class="hljs-highlight  green">...</span>$arrayA, <span class="hljs-highlight  green">...</span>$arrayB];</code></pre>
<p>The array spread operator. There are a few <a href="/blog/new-in-php-74#array-spread-operator-rfc">sidenotes</a> to be made about them.</p>
<hr />
<pre><code class="language-php hljs php" data-lang="php">$formattedNumber = <span class="hljs-number">107</span><span class="hljs-highlight  green">_</span><span class="hljs-number">925</span><span class="hljs-highlight  green">_</span><span class="hljs-number">284.88</span>;</code></pre>
<p>The numeric literal separator, which is only a visual aid.</p>
<hr />
<pre><code class="language-ini hljs ini" data-lang="ini"><span class="hljs-section">[preloading]</span>
<span class="hljs-highlight  keyword">opcache.preload</span>=/path/to/project/preload.php</code></pre>
<p>Preloading improves PHP performance across requests. It's a complicated topic, but I wrote about it <a href="/blog/preloading-in-php-74">here</a>.</p>
<p><div class="author">
    Noticed a tpyo? You can submit a
    <a href="https://github.com/brendt/stitcher.io" target="_blank" rel="noopener noreferrer">PR</a> to fix it.

    If you want to stay up to date about what's happening on this blog, you can follow me
    <a href="https://mobile.twitter.com/brendt_gd" target="_blank" rel="noopener noreferrer">on Twitter</a> or subscribe to my newsletter:

    <form action="https://mail.stitcher.io/subscribe/81fa83d0-4a0b-4eff-b897-f6ce51dfb7f0" method="post" class="newsletter-form">
        <label for="newsletter-email-50">Email</label>
        <input type="email" name="email" id="newsletter-email-50"/>
        <button type="submit" class="cta cta-small">Subscribe</button>
    </form>
</div>
</p>
 ]]></summary>

                <updated>2020-05-23T00:00:00+00:00</updated>
            </entry>
                                <entry>
                <title><![CDATA[ The IKEA effect ]]></title>

                <link rel="alternate" href="https://stitcher.io/blog/the-ikea-effect"/>

                <id>https://www.stitcher.io/blog/the-ikea-effect</id>

                <author>
                    <name><![CDATA[ Brent Roose ]]></name>
                </author>

                <summary type="html"><![CDATA[ <h2 id="the-spark"><a href="#the-spark" class="heading-anchor">#</a> The spark</h2>
<p>A few days ago while I was browsing the forums, I stumbled across a discussion that was the spark for this article.
In short the OP was having problems with an expensive query and trying his best to optimize it.
The thread had a lot of responses suggesting ways of optimizing the query like, index this column, use sub selects instead of joins, chunk the results etc…</p>
<p>What was weird for me was the fact that the OP was trying to load 13k options into a select element. I tried to suggest him that even if he manages to optimize the query to a few milliseconds the user experience would be less than poor. I spent time making my case presenting him with alternatives, articles with ux best practices and mobile device optimizations. The focus didn't change. The dedication to improve his existing solution was absolute. Needless to say that the thread is still open to this day…</p>
<p><div class="ad-container">
    <script async type="text/javascript" src="//cdn.carbonads.com/carbon.js?serve=CK7ICK3W&placement=stitcherio" id="_carbonads_js"></script>
</div>
</p>
<h2 id="the-revelation"><a href="#the-revelation" class="heading-anchor">#</a> The revelation</h2>
<p>The whole thing made me think how many times I encountered this behavior in my working environment including myself. I tried to find a real life example that simulates this behavior while drinking my early morning coffee. I stretched and carefully rested my cup to my poorly constructed coffee table. I purchased this table 2 years ago from IKEA and spend hours trying to build it only to realise at the end that I was left with one extra screw. I messed up and skipped a part of the instructions but I was done. I wasn't gonna build the whole thing again for one screw.</p>
<p>To this day my coffee table is supported by a string attached to the legs and all my friends visiting know that the table needs to be treated gently.</p>
<h2 id="the-bummer"><a href="#the-bummer" class="heading-anchor">#</a> The bummer</h2>
<p>I immediately came up with the name "The IKEA effect" and I congratulated myself for the coolness of it. Sure enough, after googling it I realized that yep that was a thing: there is a very interesting paper from Michael I. Norton, a professor in Harvard, titled <a target="_blank" href="https://www.hbs.edu/faculty/publication%20files/11-091.pdf">The “IKEA Effect”: When Labor Leads to Love</a> and to sum it up here is the wikipedia definition:</p>
<blockquote>
<p>The IKEA effect is a cognitive bias in which consumers place a disproportionately high value on products they partially created</p>
</blockquote>
<div class="image-noborder"></div>
<p><img src="/resources/img/blog/ikea/1.png" srcset="/resources/img/blog/ikea/1-1754x719.png 1754w, /resources/img/blog/ikea/1-1109x454.png 1109w, /resources/img/blog/ikea/1-1358x556.png 1358w, /resources/img/blog/ikea/1-784x321.png 784w, /resources/img/blog/ikea/1-1568x642.png 1568w" sizes="" alt=""></img></p>
<h2 id="the-ikea-effect-revisited"><a href="#the-ikea-effect-revisited" class="heading-anchor">#</a> The IKEA Effect revisited</h2>
<p>In my career as a programmer I noticed this phenomenon's negative side effects quite often. It manifests itself in different ways and in different levels of an organization.</p>
<p>From the top level management dedicating time and effort to define the next big thing only to get grounded by the technical constrains or the level of effort required to build it. From the designer spending days to come up with a high fidelity design that at the end gets negative feedback and has to go back to the drawing board. Finally for the programmer who gets a code review after spending days working on a feature that basically requires rewriting the whole thing!</p>
<h2 id="the-bigger-the-effort-the-greater-the-blindness"><a href="#the-bigger-the-effort-the-greater-the-blindness" class="heading-anchor">#</a> The bigger the effort the greater the blindness</h2>
<p>When working on a solution to a problem, the deeper you go, your focus switches to specifics parts of the problem. Many times those parts might require a disproportional amount of effort in order to solve them.</p>
<p>How many times I found myself searching and furiously going through stackoverflow to make this one thing work! When I finally got this little piece of the solution working, I was so attached to it that I wouldn't even consider the thought that it might not be the right way to do it.</p>
<p>I was ready to defend its honor against anyone who dared to challenge it! At this stage the feedback in any kind or form — either this comes from code review or over the water cooler — the result is tension. The worst part is that the feedback is probably right, but you are already too blind to see or accept it.</p>
<h2 id="the-assembly-manual"><a href="#the-assembly-manual" class="heading-anchor">#</a> The assembly manual</h2>
<p>So how do we stop investing more and more into what we have already worked on, rather than striving for better or more efficient alternatives?</p>
<p>This are my takeaways.</p>
<p><strong>Read the instructions</strong>: don't jump into the solution without understanding the problem. Invest time and ask for clarifications when needed.</p>
<p><strong>Early feedback</strong>: write a summary of your proposed solution and communicate it to your colleagues, make sure that everybody that needs to be involved is aware.</p>
<p><strong>Build a draft</strong>: code it, make it work, don't think about abstractions and future maintainability, just make it as simple as possible. Again ask for feedback and iterate.</p>
<p><strong>Rebuild it</strong>: you've got some feedback that requires you to heavily refactor? Big deal you were going to rewrite the thing anyhow, no hard feelings.</p>
<p><strong>Know when to stop</strong>: if something doesn't feel right, gets weirdly complicated to model it in your solution, then it smells bad. Stop and revisit your approach better now than later. Do you find yourself lost? Struggling to find a way to make it work? Maybe the problem is too hard for your level of expertise. There is no shame in this. Communicate it early with your senior experts ask for tips, pair coding, anything that can help you grow your game to be able to fight the beast.</p>
<p><strong>Wrap it up</strong>: don't try to make every little part perfect. Pay attention to the core of the solution and learn to live with the rest. Ship it and after some time when you are emotionally detached revisit and refactor.</p>
<hr />
<p>Once again thanks to <a target="_blank" href="https://twitter.com/gpanos00">Dimitris</a>, be sure to check him out! If you're interested in discussing your thoughts in this topic, you can share them <a target="_blank" href="https://news.ycombinator.com/item?id=23256032">on HN</a>.</p>
 ]]></summary>

                <updated>2020-05-21T00:00:00+00:00</updated>
            </entry>
                                <entry>
                <title><![CDATA[ Builders and architects: two types of programmers ]]></title>

                <link rel="alternate" href="https://stitcher.io/blog/builders-and-architects-two-types-of-programmers"/>

                <id>https://www.stitcher.io/blog/builders-and-architects-two-types-of-programmers</id>

                <author>
                    <name><![CDATA[ Brent Roose ]]></name>
                </author>

                <summary type="html"><![CDATA[ <p>You're probably familiar with the feeling: a programmer in your vicinity or online just doesn't seem to get your point of view. Even though there's no doubt they are <em>clearly</em> wrong. These kinds of encounters make you feel misunderstood, frustrated, yes, even angry.</p>
<p>I, too, deal with these feelings on a regular basis. I read a tweet and think to myself: they are so wrong. I get angry because of the misinformation that's spread, the anti-patterns that are promoted, the lack of understanding.</p>
<p>I've had some insights in these kinds of situations though, and I want to share these with you today. I won't be able to tell you who's wrong or right — if there even is such a thing — and it will also take an effort on your part to succeed.</p>
<p>The payoff? A better understanding of why your colleague or that one guy on Reddit thinks such different thoughts than you, as well as a better grip on those circumstances. It allows you to rise above conflicts, become a problem solver instead of a troublemaker.</p>
<p>In this post I'll share a mental framework for programmers to manage these kinds of conflicts. To do that, we'll need to start with a simplified example.</p>
<p><div class="ad-container">
    <script async type="text/javascript" src="//cdn.carbonads.com/carbon.js?serve=CK7ICK3W&placement=stitcherio" id="_carbonads_js"></script>
</div>
</p>
<p>Let's imagine two types of programmers: builders and architects.</p>
<div class="image-noborder"></div>
<p><img src="/resources/img/blog/builders-and-architects/builders-1.png" srcset="/resources/img/blog/builders-and-architects/builders-1-1341x846.png 1341w, /resources/img/blog/builders-and-architects/builders-1-670x422.png 670w, /resources/img/blog/builders-and-architects/builders-1-1161x732.png 1161w, /resources/img/blog/builders-and-architects/builders-1-948x598.png 948w, /resources/img/blog/builders-and-architects/builders-1-1500x947.png 1500w" sizes="" alt=""></img></p>
<p>If you ever had to work in teams — in school, as your job or in hobby projects — you're probably familiar with these two types of people.</p>
<p>The first ones, the builders, are the programmers who get things done. They work efficiently. Besides their daytime job, they come up with these amazing side projects and to the outside world it looks like writing code comes naturally to them.</p>
<p>On the other hand there are architects. They are concerned about sturdy and structurally sound code. They spend hours, sometimes days, debating the right way to solve a problem.</p>
<div class="image-noborder"></div>
<p><img src="/resources/img/blog/builders-and-architects/builders-2.png" srcset="/resources/img/blog/builders-and-architects/builders-2-670x422.png 670w, /resources/img/blog/builders-and-architects/builders-2-1500x947.png 1500w, /resources/img/blog/builders-and-architects/builders-2-1161x732.png 1161w, /resources/img/blog/builders-and-architects/builders-2-1341x846.png 1341w, /resources/img/blog/builders-and-architects/builders-2-948x598.png 948w" sizes="" alt=""></img></p>
<p>These two types of programmers seem like opposites. They themselves look at the other group and often think exactly that. They have a different way of handling the same problems. The other group's solutions are so different, they can't possibly be right, or so it seems.</p>
<p>Builders often find architects too rigid and conservative. They follow the rules for the sake of following them, without any practical benefit. Architects in turn, think of builders as careless, too focused on results, instead of thinking about long-term maintainability.</p>
<p>This tension often leads to confrontations between the groups, at the office or online. Interestingly enough, these kinds of discussions focus on trying to change the other person's point of view. I've been guilty of this myself more than I can count.</p>
<div class="image-noborder"></div>
<p><img src="/resources/img/blog/builders-and-architects/builders-3.png" srcset="/resources/img/blog/builders-and-architects/builders-3-1500x947.png 1500w, /resources/img/blog/builders-and-architects/builders-3-948x598.png 948w, /resources/img/blog/builders-and-architects/builders-3-1161x732.png 1161w, /resources/img/blog/builders-and-architects/builders-3-1341x846.png 1341w, /resources/img/blog/builders-and-architects/builders-3-670x422.png 670w" sizes="" alt=""></img></p>
<p>What's fascinating about these situations though, is that people from both sides almost never realise there's strength in their differences.</p>
<div class="image-noborder"></div>
<p><img src="/resources/img/blog/builders-and-architects/builders-3b.png" srcset="/resources/img/blog/builders-and-architects/builders-3b-1341x846.png 1341w, /resources/img/blog/builders-and-architects/builders-3b-948x598.png 948w, /resources/img/blog/builders-and-architects/builders-3b-670x422.png 670w, /resources/img/blog/builders-and-architects/builders-3b-1500x947.png 1500w, /resources/img/blog/builders-and-architects/builders-3b-1161x732.png 1161w" sizes="" alt=""></img></p>
<p>Instead of focusing on what they disagree on, let's try another approach: let's, for a minute, try to support the other party. Mind you: not just agree with them for the sake of ending a discussion, but actually trying to help them solve their problem, with your skill set.</p>
<div class="image-noborder"></div>
<p><img src="/resources/img/blog/builders-and-architects/builders-4.png" srcset="/resources/img/blog/builders-and-architects/builders-4-1500x947.png 1500w, /resources/img/blog/builders-and-architects/builders-4-670x422.png 670w, /resources/img/blog/builders-and-architects/builders-4-1161x732.png 1161w, /resources/img/blog/builders-and-architects/builders-4-1341x846.png 1341w, /resources/img/blog/builders-and-architects/builders-4-948x598.png 948w" sizes="" alt=""></img></p>
<p>Here's how that looks: while architects enjoy abstract thinking, they often have difficulties putting their thoughts into practice: they run into problems they didn't anticipate, or the actual implementation is too complex and they lose their drive. On the other hand, builders enjoy working towards a clear goal, they find energy in a project taking shape. So let's sit them down, together, and combine their strengths.</p>
<div class="image-noborder"></div>
<p><img src="/resources/img/blog/builders-and-architects/builders-5.png" srcset="/resources/img/blog/builders-and-architects/builders-5-948x598.png 948w, /resources/img/blog/builders-and-architects/builders-5-1500x947.png 1500w, /resources/img/blog/builders-and-architects/builders-5-1161x732.png 1161w, /resources/img/blog/builders-and-architects/builders-5-1341x846.png 1341w, /resources/img/blog/builders-and-architects/builders-5-670x422.png 670w" sizes="" alt=""></img></p>
<hr />
<p>The illustration is easy enough — right? Though professional programmers still fall in the trap of endless discussions way too often.
In fact, many human beings assume that the world around them thinks like they do. When the reality proves that's not the case, conflicts arise.</p>
<p>When you become aware of this personality trait, both in yourself and in others, you can use that knowledge to both your advantage. The reality is that most people won't have the same vision as you do, it's better to embrace that reality instead of fighting it.</p>
<p>One framework which differentiates between all kinds of personality types is called the Myers-Briggs Type Indicator — MBTI for short. It differentiates between 16 types of personalities. Obviously every person is unique, but those 16 types give an indication of how you and your colleagues think, how you'll react to situations, how you'll handle problems.</p>
<p>MBTI will map your personality into four different aspects:</p>
<ul>
<li>Introvert or Extrovert</li>
<li>Observant or Intuitive</li>
<li>Thinking or Feeling</li>
<li>Judging or Prospecting</li>
</ul>
<p>Like I said, every person is unique, so you're not either introvert or extrovert, you're not only thinking or feeling. It's a scale that balances one way or the other. Based on those aspects though, you can get a better understanding of why other people have such a different approach to the same problem as you do.</p>
<p>For example, builders would lean more towards the intuitive and prospective side, while architects are observant and judging. Builders are imaginative and flexible, architects are organized and practical. One isn't better than the other, rather they should support each other.</p>
<p>Having this knowledge about yourself and your co-workers allows for better team dynamics. At my previous job we mapped our MBTI profiles with around 25 colleagues. We sat down one afternoon to talk about the results. Not only did the majority of people recognise themselves in their profile, it also exposed struggles and hidden frustrations that were never shared before, because no one knew how to deal with them. Now we did.</p>
<div class="image-noborder"></div>
<p><img src="/resources/img/blog/builders-and-architects/builders-6.png" srcset="/resources/img/blog/builders-and-architects/builders-6-1341x846.png 1341w, /resources/img/blog/builders-and-architects/builders-6-948x598.png 948w, /resources/img/blog/builders-and-architects/builders-6-1161x732.png 1161w, /resources/img/blog/builders-and-architects/builders-6-670x422.png 670w, /resources/img/blog/builders-and-architects/builders-6-1500x947.png 1500w" sizes="" alt=""></img></p>
<hr />
<p>One thing I want to emphasize at the end of this post, is that my goal was not to promote MBTI. Rather it's to make you think about how people's personalities differ from each other, and how this can result both in conflicts as well as opportunities. MBTI is just an example of how one could visualise these differences.</p>
<p>Understanding there are different kinds of people who think differently than you do, seems like such a simple realisation. Yet the internet and suboptimal or even broken teams show that a principle so easy to understand, is difficult to bring into practice.</p>
<p>If you want to, you can truly change the way you handle inter-personal conflicts. Even though you probably are right, try to think about ways to support your adversary, yes even leveraging them to a higher level. You'll be surprised that you're the one who benefits the most.</p>
<p>If you do want to know your own MBTI profile, you can test it for free online. Again this profile won't tell you who you really are, but it has to power to address the differences in personalities between you and other programmers. There's a great website called <a target="_blank" href="https://www.16personalities.com/">16personalities.com</a> providing a 20-minutes test. I'm interested to see the results! Let me know your profile and check up on others in <a target="_blank" href="https://twitter.com/brendt_gd/status/1262986404231077890">this poll</a>.</p>
<p>Want to share your own thoughts on the topic? You can send me an <a href="mailto:brendt@stitcher.io">email</a> or we can discuss it on <a target="_blank" href="https://news.ycombinator.com/item?id=23243740">HN</a>.</p>
<p>Thanks for reading, until next time!</p>
<p><div class="author">
    Noticed a tpyo? You can submit a
    <a href="https://github.com/brendt/stitcher.io" target="_blank" rel="noopener noreferrer">PR</a> to fix it.

    If you want to stay up to date about what's happening on this blog, you can follow me
    <a href="https://mobile.twitter.com/brendt_gd" target="_blank" rel="noopener noreferrer">on Twitter</a> or subscribe to my newsletter:

    <form action="https://mail.stitcher.io/subscribe/81fa83d0-4a0b-4eff-b897-f6ce51dfb7f0" method="post" class="newsletter-form">
        <label for="newsletter-email-51">Email</label>
        <input type="email" name="email" id="newsletter-email-51"/>
        <button type="submit" class="cta cta-small">Subscribe</button>
    </form>
</div>
</p>
 ]]></summary>

                <updated>2020-05-20T00:00:00+00:00</updated>
            </entry>
                                <entry>
                <title><![CDATA[ PHP 8 in 8 code blocks ]]></title>

                <link rel="alternate" href="https://stitcher.io/blog/php-8-in-8-code-blocks"/>

                <id>https://www.stitcher.io/blog/php-8-in-8-code-blocks</id>

                <author>
                    <name><![CDATA[ Brent Roose ]]></name>
                </author>

                <summary type="html"><![CDATA[ <p>PHP 8 brings lots of new features, in this list we'll look at the most outstanding ones. If you want a full list and background information, you can read about all things <a href="/blog/new-in-php-8">new in PHP 8</a>.</p>
<p><div class="ad-container">
    <script async type="text/javascript" src="//cdn.carbonads.com/carbon.js?serve=CK7ICK3W&placement=stitcherio" id="_carbonads_js"></script>
</div>
</p>
<hr />
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-keyword">use</span> <span class="hljs-highlight  type"><span class="hljs-title">Support</span>\<span class="hljs-title">Attributes</span>\<span class="hljs-title">ListensTo</span></span>;

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ProductSubscriber</span>
</span>{
    <span class="hljs-comment">#[<span class="hljs-highlight  type green">ListensTo</span>(<span class="hljs-highlight  type">ProductCreated</span><span class="hljs-highlight  keyword">::class</span>)]</span>
    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">onProductCreated</span><span class="hljs-params">(<span class="hljs-highlight  type">ProductCreated</span> $event)</span> </span>{ <span class="hljs-comment">/* … */</span> }

    <span class="hljs-comment">#[<span class="hljs-highlight  type green">ListensTo</span>(<span class="hljs-highlight  type">ProductDeleted</span><span class="hljs-highlight  keyword">::class</span>)]</span>
    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">onProductDeleted</span><span class="hljs-params">(<span class="hljs-highlight  type">ProductDeleted</span> $event)</span> </span>{ <span class="hljs-comment">/* … */</span> }
}</code></pre>
<p>Attributes — aka annotations — you can read about them in depth in <a href="/blog/attributes-in-php-8">this post</a>.</p>
<hr />
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">foo</span><span class="hljs-params">(<span class="hljs-highlight  type green">Foo|Bar</span> $input)</span>: <span class="hljs-highlight  type green"><span class="hljs-title">int</span>|<span class="hljs-title">float</span></span></span>;

<span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">bar</span><span class="hljs-params">(<span class="hljs-highlight  type green">mixed</span> $input)</span>: <span class="hljs-highlight  type green"><span class="hljs-title">mixed</span></span></span>;</code></pre>
<p>Union types allows for type hinting several types. There's also a new <code>mixed</code> type which represents <a href="/blog/new-in-php-8#new-mixed-type-rfc">several types</a> at once.</p>
<hr />
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Foo</span>
</span>{
    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">bar</span><span class="hljs-params">()</span>: <span class="hljs-highlight  type green"><span class="hljs-title">static</span></span></span>;
}</code></pre>
<p>The <code>static</code> return type is built-in.</p>
<hr />
<pre><code class="language-ini hljs ini" data-lang="ini"><span class="hljs-section">[JIT]</span>
<span class="hljs-highlight  keyword green">opcache.jit</span>=1225</code></pre>
<p><a href="/blog/php-jit">The just-in-time compiler</a> for PHP.</p>
<hr />
<pre><code class="language-php hljs php" data-lang="php">$triggerError = <span class="hljs-highlight  keyword">fn</span>() <span class="hljs-highlight  green">=&gt; <span class="hljs-keyword">throw</span></span> <span class="hljs-keyword">new</span> <span class="hljs-highlight  type">MyError</span>();

$foo = $bar[<span class="hljs-string">'offset'</span>] <span class="hljs-highlight  green">?? <span class="hljs-keyword">throw</span></span> <span class="hljs-keyword">new</span> <span class="hljs-highlight  type">OffsetDoesNotExist</span>(<span class="hljs-string">'offset'</span>);</code></pre>
<p><code>throw</code> can be used in expressions.</p>
<hr />
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-keyword">try</span> {
    <span class="hljs-comment">// Something goes wrong</span>
} <span class="hljs-keyword">catch</span> (<span class="hljs-highlight  type green">MySpecialException</span>) {
    Log::error(<span class="hljs-string">"Something went wrong"</span>);
}</code></pre>
<p>Non-capturing catches: no need to specify an exception variable if you don't need it.</p>
<hr />
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-highlight  prop">setcookie</span>(
    <span class="hljs-highlight  prop">name</span>: <span class="hljs-string">'test'</span>,
    <span class="hljs-highlight  prop">expires</span>: <span class="hljs-highlight  prop">time</span>() + <span class="hljs-number">60</span> * <span class="hljs-number">60</span> * <span class="hljs-number">2</span>,
);</code></pre>
<p><a href="/blog/php-8-named-arguments">Named arguments</a>.</p>
<hr />
<pre><code class="language-php hljs php" data-lang="php">$result = <span class="hljs-highlight  keyword">match</span>($input) {
    <span class="hljs-number">0</span> =&gt; <span class="hljs-string">"hello"</span>,
    <span class="hljs-string">'1'</span>, <span class="hljs-string">'2'</span>, <span class="hljs-string">'3'</span> =&gt; <span class="hljs-string">"world"</span>,
};</code></pre>
<p>The <code>match</code> expression as an improvement to the <code>switch</code> expression.</p>
<p><div class="sidenote">
    <p>
        Tired of managing servers?
        Check out <a href="https://gumroad.com/a/575280243" ping="https://analytics.stitcher.io/r" target="_blank" rel="noopener noreferrer">Serverless Visually Explained</a> by Matthieu Napoli and learn how to create scalable PHP applications on AWS.
    </p>
</div>
</p>
<p>There's even more. If you want a full list, you can find it <a href="/blog/new-in-php-8">on this blog</a>.</p>
<p>What feature are you looking forward to the most? Let me know on <a target="_blank" href="https://twitter.com/brendt_gd">Twitter</a> or via <a href="mailto:brendt@stitcher.io">email</a>.</p>
 ]]></summary>

                <updated>2020-05-15T00:00:00+00:00</updated>
            </entry>
                                <entry>
                <title><![CDATA[ array_chunk in PHP ]]></title>

                <link rel="alternate" href="https://stitcher.io/blog/array-chunk-in-php"/>

                <id>https://www.stitcher.io/blog/array-chunk-in-php</id>

                <author>
                    <name><![CDATA[ Brent Roose ]]></name>
                </author>

                <summary type="html"><![CDATA[ <p>PHP has a lot of undiscovered native functions for many devs. Usually, we don't discover these functions until there is a true need for them. <code>array_chunk</code> is certainly one of these functions for me personally. In this article, we will discover what <code>array_chunk</code> is, what it does, and see it used in action.</p>
<p><div class="ad-container">
    <script async type="text/javascript" src="//cdn.carbonads.com/carbon.js?serve=CK7ICK3W&placement=stitcherio" id="_carbonads_js"></script>
</div>
</p>
<h2 id="array_chunk-and-how-it-works"><a href="#array_chunk-and-how-it-works" class="heading-anchor">#</a> <code>array_chunk</code> and how it works</h2>
<p><code>array_chunk</code> is a pretty nifty name for slicing an array into chunks. This is essentially what the function does, it reads an array, and splits it into chunks.</p>
<p>Let me explain this in developer terms: we have an array, <code>[1, 2, 3, 4, 5, 6, 7, 8]</code>, we use <code>array_chunk</code> on the array, specifying we want chunks of 2 items. The output would look similar to below.</p>
<pre><code class="language-angelscript hljs angelscript" data-lang="angelscript">$input = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>];

<span class="hljs-highlight  prop"><span class="hljs-built_in">array</span>_chunk</span>($input, <span class="hljs-number">2</span>);

[
    <span class="hljs-number">0</span> =&gt; [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>], 
    <span class="hljs-number">1</span> =&gt; [<span class="hljs-number">3</span>, <span class="hljs-number">4</span>], 
    <span class="hljs-number">2</span> =&gt; [<span class="hljs-number">5</span>, <span class="hljs-number">6</span>], 
    <span class="hljs-number">3</span> =&gt; [<span class="hljs-number">7</span>, <span class="hljs-number">8</span>],
]</code></pre>
<p>Pretty cool eh? With this function, you can quickly see how it can be utilized for statistical purposes, especially with segment averaging.</p>
<p>This function accepts 3 parameters as follows:</p>
<ul>
<li>The <code>array</code>
</li>
<li>The size of the chunks required as an <code>int</code>
</li>
<li>A <code>boolean</code> to instruct the functions to preserve the keys of the original array or to not. <em>Note</em>: the default is <code>false</code>.</li>
</ul>
<h2 id="a-real-life-problem"><a href="#a-real-life-problem" class="heading-anchor">#</a> A real-life problem</h2>
<p>Walk with me now through this scenario: my boss wants to know for each working week, the average profits from his shop. Each working week has 5 days.</p>
<p>So, let's say for argument's sake say we have just queried the last 20 days of shop sales from the shop's database. The data returned populate our array with 20 entries and therefore has 4 working weeks.</p>
<p>Now this leaves us with the problem at hand, we need to calculate the average sales across every 5 days for 4 weeks. Follow me through this next section to achieve the result.</p>
<h2 id="average-segments-with-array_chunk"><a href="#average-segments-with-array_chunk" class="heading-anchor">#</a> Average segments with <code>array_chunk</code></h2>
<p>We know our data array has 20 entries, and we know that we need an average of each week of sales (5 entries). Let's utilize <code>array_chunk</code> with a little bit of extra native PHP to do the calculations.</p>
<pre><code class="language-php hljs php" data-lang="php">$sales = [
   <span class="hljs-number">250.70</span>, <span class="hljs-number">220.10</span>, <span class="hljs-number">233</span>, <span class="hljs-number">243.50</span>, <span class="hljs-number">255</span>,
   <span class="hljs-number">200</span>, <span class="hljs-number">300</span>, <span class="hljs-number">234</span>, <span class="hljs-number">350</span>, <span class="hljs-number">222</span>,
   <span class="hljs-number">237.99</span>, <span class="hljs-number">200.30</span>, <span class="hljs-number">150.98</span>, <span class="hljs-number">201</span>, <span class="hljs-number">209</span>,
   <span class="hljs-number">200</span>, <span class="hljs-number">300</span>, <span class="hljs-number">240</span>, <span class="hljs-number">203</span>, <span class="hljs-number">280</span>,
];

<span class="hljs-comment">// Split the array into groups of five, </span>
<span class="hljs-comment">//  representing a 5 days working week.</span>
$salesPerWeek = <span class="hljs-highlight  prop">array_chunk</span>($sales, <span class="hljs-number">5</span>);

<span class="hljs-comment">// Map all items to their averages, week by week.</span>
$averageSales = <span class="hljs-highlight  prop">array_map</span>(
   <span class="hljs-highlight  keyword">fn</span>(<span class="hljs-highlight  type"><span class="hljs-keyword">array</span></span> $items) =&gt; <span class="hljs-highlight  prop">array_sum</span>($items) / <span class="hljs-highlight  prop">count</span>($items),
   $salesPerWeek
);</code></pre>
<p>Now, if we print the contents of <code>$averageSales</code> we will get something like the following:</p>
<pre><code class="language-php hljs php" data-lang="php">[
    <span class="hljs-number">240.46</span>,
    <span class="hljs-number">261.2</span>,
    <span class="hljs-number">199.854</span>,
    <span class="hljs-number">244.6</span>,
]</code></pre>
<p>Let's break down the code for complete transparency:</p>
<ul>
<li>First, we have our array with 20 entries of sales data for each day.</li>
<li>Next, we use <code>array_chunk</code> to split it into groups of five.</li>
<li>Then we use <code>array_map</code> on each chunk, and use <code>array_sum</code> to divide by the count of the chunk to give us the average.</li>
</ul>
<p>And that is it!</p>
<p>This type of functionality could be used in many statistical applications that require segmentation. The example in this article tries to show you how <code>array_chunk</code> works in layman terms with a bit of a pretend use-case behind it. I hope this was interesting, if you would like to see any more of my content, please check out my blog, <a target="_blank" href="https://www.codewall.co.uk/">https://www.codewall.co.uk/</a></p>
 ]]></summary>

                <updated>2020-05-14T00:00:00+00:00</updated>
            </entry>
                                <entry>
                <title><![CDATA[ Combining event sourcing and stateful systems ]]></title>

                <link rel="alternate" href="https://stitcher.io/blog/combining-event-sourcing-and-stateful-systems"/>

                <id>https://www.stitcher.io/blog/combining-event-sourcing-and-stateful-systems</id>

                <author>
                    <name><![CDATA[ Brent Roose ]]></name>
                </author>

                <summary type="html"><![CDATA[ <p>In this two-part series, my colleague <a target="_blank" href="https://twitter.com/freekmurze">Freek</a> and I will discuss the architecture of a project we're working on. We will share our insights and answers to problems we encountered along the way. This part will be about the design of the system, while <a target="_blank" href="https://freek.dev/1634-mixing-event-sourcing-in-a-traditional-laravel-app">Freek's part</a> will look at the concrete implementation.</p>
<p>Let's set the scene.</p>
<p><div class="ad-container">
    <script async type="text/javascript" src="//cdn.carbonads.com/carbon.js?serve=CK7ICK3W&placement=stitcherio" id="_carbonads_js"></script>
</div>
</p>
<p>This project is one of the larger ones we've worked on. In the end it will serve hundreds of thousands of users, handle large amounts of financial transactions and standalone tenant-specific installations will need to be created on the fly.</p>
<p>One key requirement is that the product ordering flow — the core of the business — can be easily reported on, as well as tracked throughout history.</p>
<p>Besides this front-facing client process, there's also a complex admin panel to manage products. Within this context, there's little to no need for reporting or tracking history of the admin activities; the main goal here is to have an easy-to-use product management system.</p>
<p>I hope you understand that I deliberately am keeping these terms a little vague because obviously this isn't an open-source project, though I think the concepts of "product management" and "orders" is clear enough for you to understand the design decisions we've made.</p>
<p>Let’s first discuss an approach of how to design this system based on my <a href="/blog/laravel-beyond-crud">Laravel beyond CRUD</a> series.</p>
<p>In such a system there would probably be two domain groups: <code>Product</code> and <code>Order</code>, and two applications making use of both these domains: an <code>AdminApplication</code> and a <code>CustomerApplication</code>.</p>
<p>A simplified version would look something like this:</p>
<div class="image-noborder mobile-only">
<p><a target="_blank" href="/resources/img/blog/event-sourcing/es_1_mobile.png"><img src="/resources/img/blog/event-sourcing/es_1_mobile.png" srcset="/resources/img/blog/event-sourcing/es_1_mobile-403x1294.png 403w, /resources/img/blog/event-sourcing/es_1_mobile-285x915.png 285w, /resources/img/blog/event-sourcing/es_1_mobile-638x2049.png 638w, /resources/img/blog/event-sourcing/es_1_mobile-570x1830.png 570w, /resources/img/blog/event-sourcing/es_1_mobile-494x1586.png 494w" sizes="" alt=""></img></a></p>
</div> 
<div class="image-noborder desktop-only">
<p><a target="_blank" href="/resources/img/blog/event-sourcing/es_1.png"><img src="/resources/img/blog/event-sourcing/es_1.png" srcset="/resources/img/blog/event-sourcing/es_1-549x562.png 549w, /resources/img/blog/event-sourcing/es_1-1228x1258.png 1228w, /resources/img/blog/event-sourcing/es_1-776x795.png 776w, /resources/img/blog/event-sourcing/es_1-951x975.png 951w, /resources/img/blog/event-sourcing/es_1-1098x1125.png 1098w" sizes="" alt=""></img></a></p>
</div> 
<p>Having used this architecture successfully in previous projects, we could simply rely on it and call it a day. There are a few downsides with it though, specifically for this new project: we have to keep in mind that reporting and historical tracking are key aspects of the ordering process. We want to treat them as such in our code, and not as a mere side effect.</p>
<p>For example: we could use our activity log package to keep track of "history messages" about what happened with an order. We could also start writing custom queries on the order and history tables to generate reports.</p>
<p>However, these solutions only work properly when they are minor side effects of the core business. In this case, they are not. So Freek and I were tasked with figuring out a design for this project that made reporting and historical tracking an easy-to-maintain and easy-to-use, core part of the application.</p>
<p>Naturally we looked at event sourcing, a wonderful and flexible solution that fulfills the above requirements. Nothing comes for free though: event sourcing requires quite a lot of extra code to be written in order to do otherwise simple things. Where you'd normally have simple CRUD actions manipulating data in the database, you now have to worry about dispatching events, handling them with projectors and reactors, whilst always keeping versioning in mind.</p>
<p>While it was clear that an event sourced system would solve many of the problems, it would also introduce lots of overhead, even in places where it wouldn't add any value.</p>
<p>Here's what I mean with that: if we decide to event source the <code>Orders</code> module, which relies on data from the <code>Products</code> module, we also need to event source that one, because otherwise we could end up with an invalid state. If <code>Products</code> weren't event sourced, and one was deleted, we couldn't rebuild the <code>Orders</code> state anymore, since it's missing information.</p>
<p>So either we event source everything, or find a solution for this problem.</p>
<h2 id="event-source-all-the-things?!"><a href="#event-source-all-the-things?!" class="heading-anchor">#</a> Event source all the things?!</h2>
<p>From playing around with event sourcing in some of our hobby projects, we were painfully aware that we shouldn't underestimate the complexity it adds. Furthermore, Greg Young stated that event sourcing a whole system is often a bad idea — he has a <a target="_blank" href="https://www.youtube.com/watch?v=LDW0QWie21s">whole talk</a> on misconceptions about event sourcing and is worth a watch!</p>
<p>It was clear to us that we did not want to event source the whole application; it simply wouldn't make sense to do so. The only alternative was to find a way to combine a stateful system, together with an event sourced system, but surprisingly, we couldn't find many resources on this topic.</p>
<p>Nevertheless, we did some labour intensive research, and managed to find an answer to our question. The answer didn't come from the event sourcing community though, but rather from well-established DDD practices: bounded contexts.</p>
<p>If we wanted the <code>Products</code> module to be an independent, stateful system, we had to clearly respect the boundaries between <code>Products</code> and <code>Orders</code>. Instead of one monolithic application, we would have to treat these two modules as two separate contexts — separate services, which were only allowed to speak with each other in such a way that it be could guaranteed the <code>Order</code> context would never end up in an invalid state.</p>
<p>If the <code>Order</code> context is built whereby it doesn't rely on the <code>Product</code> context directly, it wouldn't matter how that <code>Product</code> context was built.</p>
<p>When discussing this with Freek, I phrased it like this: think of <code>Products</code> as a separate service, accessed via a REST API. How would we guarantee our event sourced application would still work, even if the API goes offline, or makes changes to its data structure.</p>
<p>Obviously we wouldn't actually build an API to communicate between our services, since they would live within the same codebase on the same server. Still it was a good mindset to start designing the system.</p>
<p>The boundary would look like this, where each service has its own internal design.</p>
<div class="image-noborder mobile-only">
<p><a target="_blank" href="/resources/img/blog/event-sourcing/es_2_mobile.png"><img src="/resources/img/blog/event-sourcing/es_2_mobile.png" srcset="/resources/img/blog/event-sourcing/es_2_mobile-349x744.png 349w, /resources/img/blog/event-sourcing/es_2_mobile-553x1179.png 553w, /resources/img/blog/event-sourcing/es_2_mobile-428x912.png 428w, /resources/img/blog/event-sourcing/es_2_mobile-494x1053.png 494w, /resources/img/blog/event-sourcing/es_2_mobile-247x526.png 247w" sizes="" alt=""></img></a></p>
</div> 
<div class="image-noborder desktop-only">
<p><a target="_blank" href="/resources/img/blog/event-sourcing/es_2.png"><img src="/resources/img/blog/event-sourcing/es_2.png" srcset="/resources/img/blog/event-sourcing/es_2-518x333.png 518w, /resources/img/blog/event-sourcing/es_2-1037x667.png 1037w, /resources/img/blog/event-sourcing/es_2-733x472.png 733w, /resources/img/blog/event-sourcing/es_2-1160x747.png 1160w, /resources/img/blog/event-sourcing/es_2-898x578.png 898w" sizes="" alt=""></img></a></p>
</div> 
<p>If you read my Laravel beyond CRUD series, you're already familiar with how the <code>Product</code> context works. There's nothing new going on over there. The <code>Order</code> context deserves a little more background information though.</p>
<p><div class="author">
    Noticed a tpyo? You can submit a
    <a href="https://github.com/brendt/stitcher.io" target="_blank" rel="noopener noreferrer">PR</a> to fix it.

    If you want to stay up to date about what's happening on this blog, you can follow me
    <a href="https://mobile.twitter.com/brendt_gd" target="_blank" rel="noopener noreferrer">on Twitter</a> or subscribe to my newsletter:

    <form action="https://mail.stitcher.io/subscribe/81fa83d0-4a0b-4eff-b897-f6ce51dfb7f0" method="post" class="newsletter-form">
        <label for="newsletter-email-53">Email</label>
        <input type="email" name="email" id="newsletter-email-53"/>
        <button type="submit" class="cta cta-small">Subscribe</button>
    </form>
</div>
</p>
<h2 id="event-source-some-parts"><a href="#event-source-some-parts" class="heading-anchor">#</a> Event source some parts</h2>
<p>So let's look at the event sourced part. I assume you that if you're reading this post, you have at least an interest in event sourcing, so I won't explain everything in detail.</p>
<p>The <code>OrderAggregateRoot</code> will keep track of everything that happens within this context and will be the entry point for applications to talk with. It will also dispatch events, which are stored and propagated to all reactors and projectors.</p>
<p>Reactors will handle side effects which will never be replayed and projectors will make projections. In our case these are simple Laravel models. These models can be read from any other context, though they can only be written to from within projectors.</p>
<div class="image-noborder mobile-only">
<p><a target="_blank" href="/resources/img/blog/event-sourcing/es_3_mobile.png"><img src="/resources/img/blog/event-sourcing/es_3_mobile.png" srcset="/resources/img/blog/event-sourcing/es_3_mobile-477x513.png 477w, /resources/img/blog/event-sourcing/es_3_mobile-275x295.png 275w, /resources/img/blog/event-sourcing/es_3_mobile-389x418.png 389w, /resources/img/blog/event-sourcing/es_3_mobile-550x591.png 550w, /resources/img/blog/event-sourcing/es_3_mobile-616x663.png 616w" sizes="" alt=""></img></a></p>
</div> 
<div class="image-noborder desktop-only">
<p><a target="_blank" href="/resources/img/blog/event-sourcing/es_3.png"><img src="/resources/img/blog/event-sourcing/es_3.png" srcset="/resources/img/blog/event-sourcing/es_3-916x593.png 916w, /resources/img/blog/event-sourcing/es_3-1058x685.png 1058w, /resources/img/blog/event-sourcing/es_3-529x342.png 529w, /resources/img/blog/event-sourcing/es_3-1183x767.png 1183w, /resources/img/blog/event-sourcing/es_3-748x484.png 748w" sizes="" alt=""></img></a></p>
</div>
<p>One design decision we made here was to not split our read and write models, for now we rely on a spoken <em>and</em> written convention that these models are only written to via their projectors. One example of such a projection model would be an <code>Order</code>.</p>
<p>The most important rule to remember is that the whole state of the <code>Order</code> context should be able to be rebuilt only from its stored events.</p>
<p>So how do we pull in data from other contexts? How can the <code>Order</code> context be notified when something happens within the <code>Product</code> context that's relevant to it? One thing is for sure: all relevant information regarding <code>Products</code> will need to be stored as events within the <code>Order</code> context; since within that context, events are the only source of truth.</p>
<p>To achieve this, we introduced a third kind of event listener. There already are projectors and reactors; now we add the concept of subscribers. These subscribers are allowed to listen to events from other contexts, and handle them accordingly within their current context. Most likely, they will almost always convert external events to internal, stored ones.</p>
<div class="image-noborder mobile-only">
<p><a target="_blank" href="/resources/img/blog/event-sourcing/es_4_mobile.png"><img src="/resources/img/blog/event-sourcing/es_4_mobile.png" srcset="/resources/img/blog/event-sourcing/es_4_mobile-428x912.png 428w, /resources/img/blog/event-sourcing/es_4_mobile-349x744.png 349w, /resources/img/blog/event-sourcing/es_4_mobile-553x1179.png 553w, /resources/img/blog/event-sourcing/es_4_mobile-494x1053.png 494w, /resources/img/blog/event-sourcing/es_4_mobile-247x526.png 247w" sizes="" alt=""></img></a></p>
</div> 
<div class="image-noborder desktop-only">
<p><a target="_blank" href="/resources/img/blog/event-sourcing/es_4.png"><img src="/resources/img/blog/event-sourcing/es_4.png" srcset="/resources/img/blog/event-sourcing/es_4-1037x667.png 1037w, /resources/img/blog/event-sourcing/es_4-518x333.png 518w, /resources/img/blog/event-sourcing/es_4-898x578.png 898w, /resources/img/blog/event-sourcing/es_4-1160x747.png 1160w, /resources/img/blog/event-sourcing/es_4-733x472.png 733w" sizes="" alt=""></img></a></p>
</div>
<p>From the moment events are stored within the <code>Order</code> context, we can safely forget about any dependency on the <code>Product</code> context.</p>
<p>Some readers might think that we're duplicating data by copying events between these two contexts. We're of course storing an <code>Orders</code> specific event, based on when a <code>Product</code> was <code>created</code>, so yes, some data will be copied. There are, however, more benefits to this than you might think.</p>
<p>First of all: the <code>Product</code> context doesn't need to know anything about which other contexts will use its data. It doesn't have to take event versioning into account, because its events will never be stored. This allows us to work in the <code>Product</code> context as if it was any normal, stateful application, without the complexity event sourcing adds.</p>
<p>Second: there will be more than just the <code>Order</code> context that's event sourced, and all of these contexts can individually listen to relevant events triggered within the <code>Product</code> context.</p>
<p>And third: we don't have to store a full copy of the original <code>Product</code> events since each context can cherry-pick and store the data that's relevant for its own use case.</p>
<h2 id="what-about-data-migrations?"><a href="#what-about-data-migrations?" class="heading-anchor">#</a> What about data migrations?</h2>
<p>A new question arose.</p>
<p>Say this system has been in production for a year, and we decide to add a new context that's event sourced; one which also requires knowledge about the <code>Product</code> context. The original <code>Product</code> events weren't stored — because of the reasons listed above — so how can we build an initial state for our new context?</p>
<p>The answer is this: at the time of deployment, we'll have to read all product data, and send relevant events to the newly added context, based on the existing products. This one-time migration is an added cost, though it gives us the freedom to work within the <code>Product</code> context without ever having to worry about the outside. For this project that's a price worth paying.</p>
<h2 id="final-integration"><a href="#final-integration" class="heading-anchor">#</a> Final integration</h2>
<p>Finally we're able to consume data in our applications gathered from all contexts, by using readonly models. Again, in our case and as of now, these models are readonly by convention; we might change that in the future.</p>
<div class="image-noborder mobile-only">
<p><a target="_blank" href="/resources/img/blog/event-sourcing/es_5_mobile.png"><img src="/resources/img/blog/event-sourcing/es_5_mobile.png" srcset="/resources/img/blog/event-sourcing/es_5_mobile-644x1976.png 644w, /resources/img/blog/event-sourcing/es_5_mobile-721x2213.png 721w, /resources/img/blog/event-sourcing/es_5_mobile-322x988.png 322w, /resources/img/blog/event-sourcing/es_5_mobile-558x1712.png 558w, /resources/img/blog/event-sourcing/es_5_mobile-456x1399.png 456w" sizes="" alt=""></img></a></p>
</div> 
<div class="image-noborder desktop-only">
<p><a target="_blank" href="/resources/img/blog/event-sourcing/es_5.png"><img src="/resources/img/blog/event-sourcing/es_5.png" srcset="/resources/img/blog/event-sourcing/es_5-962x1094.png 962w, /resources/img/blog/event-sourcing/es_5-1243x1414.png 1243w, /resources/img/blog/event-sourcing/es_5-555x631.png 555w, /resources/img/blog/event-sourcing/es_5-786x894.png 786w, /resources/img/blog/event-sourcing/es_5-1111x1263.png 1111w" sizes="" alt=""></img></a></p>
</div>
<p>Communication from applications to the <code>Product</code> context is done like any normal stateful application would do. Communication between applications and event sourced contexts such as <code>Orders</code> is done via its aggregate root.</p>
<p>Now, here's a final overview. Some arrows are still missing from this diagram, but I hope that the relevant flow between and inside contexts and applications is clear.</p>
<div class="image-noborder"></div>
<div class="image-noborder mobile-only">
<p><a target="_blank" href="/resources/img/blog/event-sourcing/es_6_mobile.png"><img src="/resources/img/blog/event-sourcing/es_6_mobile.png" srcset="/resources/img/blog/event-sourcing/es_6_mobile-855x2213.png 855w, /resources/img/blog/event-sourcing/es_6_mobile-382x988.png 382w, /resources/img/blog/event-sourcing/es_6_mobile-540x1397.png 540w, /resources/img/blog/event-sourcing/es_6_mobile-764x1977.png 764w, /resources/img/blog/event-sourcing/es_6_mobile-662x1713.png 662w" sizes="" alt=""></img></a></p>
</div> 
<div class="image-noborder desktop-only">
<p><a target="_blank" href="/resources/img/blog/event-sourcing/es_6.png"><img src="/resources/img/blog/event-sourcing/es_6.png" srcset="/resources/img/blog/event-sourcing/es_6-1150x1264.png 1150w, /resources/img/blog/event-sourcing/es_6-813x893.png 813w, /resources/img/blog/event-sourcing/es_6-575x632.png 575w, /resources/img/blog/event-sourcing/es_6-996x1095.png 996w, /resources/img/blog/event-sourcing/es_6-1286x1414.png 1286w" sizes="" alt=""></img></a></p>
</div>
<hr />
<p>The key in solving our problem was to look at DDD's bounded contexts. They describe strict boundaries within our codebase - ones that we cannot simply cross whenever we want. Sure this adds a layer of complexity, though it also adds the freedom to build each context whatever way we want, without having to worry about supporting others.</p>
<p>The final piece of the puzzle was to solely rely on events as a means of communication between contexts. Once again it adds a layer of complexity, but also a means of decoupling and flexibility.</p>
<p>Now it's time to take a deep dive into how we programmed this within a Laravel project. Here's my colleague Freek with <a target="_blank" href="https://freek.dev/1634-mixing-event-sourcing-in-a-traditional-laravel-app">part two</a>.</p>
 ]]></summary>

                <updated>2020-04-14T00:00:00+00:00</updated>
            </entry>
                                <entry>
                <title><![CDATA[ Minor versions, breaking changes ]]></title>

                <link rel="alternate" href="https://stitcher.io/blog/minor-versions-breaking-changes"/>

                <id>https://www.stitcher.io/blog/minor-versions-breaking-changes</id>

                <author>
                    <name><![CDATA[ Brent Roose ]]></name>
                </author>

                <summary type="html"><![CDATA[ <p>When my colleague Sebastian <a target="_blank" href="https://sebastiandedeyne.com/composer-semver-and-underlying-dependency-changes/">wrote</a> about how bumping major versions isn't a breaking change, I would wholeheartedly agree.</p>
<p>I can't anymore. At least, not with how composer works today.</p>
<p><div class="ad-container">
    <script async type="text/javascript" src="//cdn.carbonads.com/carbon.js?serve=CK7ICK3W&placement=stitcherio" id="_carbonads_js"></script>
</div>
</p>
<p>See yesterday, we stumbled upon a breaking change. And yet we didn't do any major version upgrades. Luckily another colleague of mine, Ruben, discovered the issue before pushing it to production.</p>
<p>Here's what happened.</p>
<p>One of our projects is now nearing its two-year anniversary mark, so suffice to say it has had its fair share of version bumps. After two years of development, these were some packages we used:</p>
<pre><code class="language-json hljs json" data-lang="json">{
    <span class="hljs-attr">"<span class="hljs-highlight  keyword">laravel/framework</span>"</span>: <span class="hljs-string">"^6.5"</span>,
    <span class="hljs-attr">"<span class="hljs-highlight  keyword">league/commonmark</span>"</span>: <span class="hljs-string">"^0.17.5"</span>,
    <span class="hljs-attr">"<span class="hljs-highlight  keyword">spatie/laravel-view-components</span>"</span>: <span class="hljs-string">"^1.2"</span>,

    <span class="hljs-comment">// …</span>
}</code></pre>
<p>First of all, <code>laravel/framework:^6.5</code>. We usually wait a month or two before updating to the next major Laravel version. As of today we're running 7 — which was needed to fix what went wrong.</p>
<p>Next there's <code>league/commonmark:^0.17.5</code>; a very specific dependency, added in May, 2018. At the time, this specific dependency was needed: according to the changelog it <code>Fixed incorrect version constant value (again)</code>. If we didn't use this version, it would conflict with other packages.</p>
<p>Two years went by, and <code>league/commonmark</code> has since tagged a first stable release. This is something they should have done way more early — but that's a topic for another day.</p>
<p>Finally there's <code>spatie/laravel-view-components:^1.2</code>. A package that has been archived recently, in favour of Laravel's blade components in version 7. Again, back in the day it made lots of sense to use this package. We might remove it at one point in the future, but this of course requires time, and costs money for our client. It isn't something we can "just do".</p>
<p>With the stage being set, it's time to look into the issue. Yesterday we ran a <code>composer update</code>, and things broke.</p>
<p>More specifically, our <code>spatie/laravel-view-components</code> package simply stopped working. Instead of rendering the view component, it only showed the render tag instead. It turned out it was a <a target="_blank" href="https://github.com/spatie/laravel-view-components/issues/21">known issue</a> as of version <code>1.3.0</code>, and <a target="_blank" href="https://github.com/spatie/laravel-view-components/pull/22">fixed</a> in <code>1.3.1</code>. This fix already existed when we ran our disastrous <code>composer update</code>, yet we never received it. Our <code>spatie/laravel-view-components</code> seemed to be locked on <code>1.3.0</code>, and didn't want to update to <code>1.3.1</code>.</p>
<p>Whenever you find yourself in such a pickle, don't panic and keep calm: composer can help you. Simply use <code>composer why-not spatie/laravel-view-components:1.3.1</code> and it will tell you exactly what's wrong.</p>
<p>It turned out that with <code>spatie/laravel-view-components:1.3.1</code>, its <code>laravel/framework</code> dependency version <a target="_blank" href="https://github.com/spatie/laravel-view-components/commit/1ae57dcd9919de9019d30801cfb7dc2deea0cdbf">was bumped</a> from <code>^6.0</code> to <code>^6.18</code>.</p>
<p>That in itself shouldn't be a problem, we require <code>laravel/framework:^6.5</code> in our project, so we should be able to load <code>^6.18</code> just fine.</p>
<p>Unfortunately that didn't happen. You see, <code>laravel/framework</code> added a dependency on <code>league/commonmark:^1.1</code> in version <code>6.10</code>. In practice, this addition has the same effect as updating the major version of a dependency: from nothing to <code>^1.1</code>.</p>
<p>Again, that change in itself isn't a breaking change, yet it <em>did</em> prevent <code>laravel/framework</code> in our project from updating higher than <code>6.9</code>, because of our requirement on <code>league/commonmark:^0.17.5</code>. That in turn prevented <code>spatie/laravel-view-components</code> updating from <code>1.3.0</code> to <code>1.3.1</code>, which contained a much needed bugfix.</p>
<hr />
<p>So who's to blame? Let's point the finger at myself first: we should have updated <code>league/commonmark</code> sooner. You could also say that combining a bugfix and a dependency version bump, like <code>spatie/laravel-view-components</code> did with <code>1.3.1</code>, should be avoided. Yet if the version bump is needed for a fix to work, there's little you can do.</p>
<p>You could say that <code>laravel/framework</code> shouldn't have updated one of its (implicit) dependencies, yet it's a perfectly normal thing to do, especially if the update fixes a security issue.</p>
<p>The solution, by the way, consisted of updating <code>laravel/framework</code> to <code>^7.0</code> — we had to do this anyway sooner or later — and removing the <code>league/commonmark</code> dependency. So I don't think this change should be avoided by any open source vendors. Open source code should push us towards regular updates, I encourage that myself regularly.</p>
<p>The real problem though, is that composer never notified us that <code>laravel/framework</code> wasn't able to update further than <code>6.9</code> because of underlying conflicts. If you're not carefully managing each dependency, you're in danger of getting stuck on an outdated dependency, which might prevent much needed bug fixes being installed.</p>
<p>As far as I know, there's no option that can be passed to <code>composer update</code> which can notify you about such situations and I think that would be a good future addition.</p>
<p>My colleague Freek pointed out that there is an external library that does exactly this: <a target="_blank" href="https://github.com/Soullivaneuh/composer-versions-check">https://github.com/Soullivaneuh/composer-versions-check</a>. It'd be nice to have this functionality built-into composer.</p>
<p><div class="author">
    Noticed a tpyo? You can submit a
    <a href="https://github.com/brendt/stitcher.io" target="_blank" rel="noopener noreferrer">PR</a> to fix it.

    If you want to stay up to date about what's happening on this blog, you can follow me
    <a href="https://mobile.twitter.com/brendt_gd" target="_blank" rel="noopener noreferrer">on Twitter</a> or subscribe to my newsletter:

    <form action="https://mail.stitcher.io/subscribe/81fa83d0-4a0b-4eff-b897-f6ce51dfb7f0" method="post" class="newsletter-form">
        <label for="newsletter-email-54">Email</label>
        <input type="email" name="email" id="newsletter-email-54"/>
        <button type="submit" class="cta cta-small">Subscribe</button>
    </form>
</div>
</p>
 ]]></summary>

                <updated>2020-03-26T00:00:00+00:00</updated>
            </entry>
                                <entry>
                <title><![CDATA[ Event driven server in PHP ]]></title>

                <link rel="alternate" href="https://stitcher.io/blog/event-driven-php"/>

                <id>https://www.stitcher.io/blog/event-driven-php</id>

                <author>
                    <name><![CDATA[ Brent Roose ]]></name>
                </author>

                <summary type="html"><![CDATA[ <p>Lately I've been tinkering with a unique kind of architecture for PHP applications. I want to tell you up front that I don't think it will solve any real-life problems soon; still I want to involve you in the thought-process. Who knows what kind of great ideas might arise?</p>
<p>In this post I'll go through the architecture step-by-step and address its benefits as well as its downsides — at least, the ones I can think of right now. I do have a proof-of-concept codebase open sourced, and I'll share insights from it throughout this post.</p>
<p><div class="ad-container">
    <script async type="text/javascript" src="//cdn.carbonads.com/carbon.js?serve=CK7ICK3W&placement=stitcherio" id="_carbonads_js"></script>
</div>
</p>
<p>So, first things first, what the architecture is about. It's a long-running PHP server, with its entire state loaded in memory, built from stored events. In other words: it's event sourcing as we know it in PHP, but all aggregates and projections are loaded in-memory and never stored on disk.</p>
<p>Let's break it down!</p>
<h2 id="a-long-running-php-server"><a href="#a-long-running-php-server" class="heading-anchor">#</a> A long-running PHP server</h2>
<p>The first pillar of this architecture is a long running server. The modern PHP landscape offers several battle-tested solutions for managing these kinds of processes: frameworks like ReactPHP, Amphp and Swoole allowed the PHP community to venture into another, unexplored world, while day-to-day PHP was most often related to its characterizing fast request/response cycle.</p>
<p>This fast request/response cycle is of course one of the things that made PHP great: you never had to worry about leaking state or keeping everything in sync: when a request comes in, a clean PHP process is started, and your application boots from 0. After the response is sent, the application gets completely destroyed.</p>
<p>I'm not proposing we ditch this battle-tested technique altogether; the fast request/response cycle is actually a critical part of the architecture I'll be describing. On the other hand, always booting the whole application from scratch has its downsides.</p>
<p>In the architecture I'm describing, an application is split into two parts: one part is a regular PHP app, accepting HTTP requests and generating responses, while the other part is a behind-the-scenes backend server that's always running. A server that always has the whole application state loaded in memory, which allows the clients — our regular PHP apps — to connect with it, read data and store events.</p>
<p>Because the whole application state is always loaded in memory, you never need to perform database queries, spending resources on mapping data from the database to objects, or performance issues like circular references between ORM entities.</p>
<p>This sounds nice in theory, but we probably still need to be able to perform complex queries - something that databases are highly optimised for. It's clear that this architecture will require us to rethink certain aspects we're used to in regular PHP applications. I'll come back to this later.</p>
<p>First, let's look at the second pillar: event sourcing.</p>
<p><div class="author">
    Noticed a tpyo? You can submit a
    <a href="https://github.com/brendt/stitcher.io" target="_blank" rel="noopener noreferrer">PR</a> to fix it.

    If you want to stay up to date about what's happening on this blog, you can follow me
    <a href="https://mobile.twitter.com/brendt_gd" target="_blank" rel="noopener noreferrer">on Twitter</a> or subscribe to my newsletter:

    <form action="https://mail.stitcher.io/subscribe/81fa83d0-4a0b-4eff-b897-f6ce51dfb7f0" method="post" class="newsletter-form">
        <label for="newsletter-email-55">Email</label>
        <input type="email" name="email" id="newsletter-email-55"/>
        <button type="submit" class="cta cta-small">Subscribe</button>
    </form>
</div>
</p>
<h2 id="event-sourcing"><a href="#event-sourcing" class="heading-anchor">#</a> Event sourcing</h2>
<p>Why would I suggest to make event sourcing part of the core of this architecture? You could very well have a long running server with all data loaded in-memory from a normal database.</p>
<p>Let's go down that road for a moment: say a client performs an update and sends it to the backend server. The server will need to store the data in the database, as well as refresh its in-memory state. Such systems will need to take care of updating the application state properly so that everything is correct after an update.</p>
<p>The most naive approach would be to perform the updates in the database and reload the whole application state, which in practice isn't possible due to performance issues. Another approach could be to keep track of everything that needs to happen when an update is received, and the most flexible way to do that is by using events.</p>
<p>If we're naturally leaning towards an event-driven system to keep the in-memory state synchronised, why then add the overhead of storing everything in a database and require an ORM to map the data back to objects? That's why event sourcing is the better approach: it solves all state syncing problems automatically, and offers a performance gain since you don't have to communicate with a database and work with an ORM.</p>
<p>What about complex queries though? How would you search, for example, a product store containing millions of items, when everything is loaded in memory. PHP doesn't particularly excel at these kinds of tasks. But again, event sourcing offers a solution: projections. You're perfectly able to make an optimised projection for a given task, and even store it in a database! This could be a lightweight in-memory SQLite database, or a full-blown MySQL or PostgreSQL server.</p>
<p>Most importantly, these databases aren't part of the application core anymore. No longer are they the source of truth, but rather useful tools living on the edge of the application's core and very much comparable to building optimised search indices like ElasticSearch or Algolia. You can destroy these data sources at any point in time, and rebuild them from the stored events.</p>
<p>That brings us to the final reason why event sourcing is such a great match for this architecture. When the server requires a reboot — because of a server crash or after a deploy — event sourcing offers you a way to rebuild the application's state much faster: snapshots.</p>
<p>In this architecture, a snapshot of the whole application state would be stored once or twice a day. It's a point where the server can be rebuilt from, without needing to replay all events.</p>
<p>As you can see, there are several benefits by building an event sourced system within this architecture. Now we're moving on to the last pillar: the clients.</p>
<h2 id="clients"><a href="#clients" class="heading-anchor">#</a> Clients</h2>
<p>I've mentioned this before: with "clients" I mean server-side PHP applications communicating with the centralised backend server. They are normal PHP applications, only living a short time within the typical request/response cycle.</p>
<p>You can use whatever existing framework you want for these clients, as long as there's a way to use the event-server instead of directly communicating with eg. a database. Instead of using an ORM like Doctrine in Symfony or Eloquent in Laravel, you'd be using a small communication layer to communicate via sockets with the backend server.</p>
<p>Also keep in mind that the backend server and clients can share the same codebase, which means that from a developer's point of view, you don't need to worry about communication between a client and the server, it's done transparently.</p>
<p>Take the example of bank accounts with a balance. With this architecture, you'd write code like this:</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-keyword">final</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AccountsController</span>
</span>{
    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">index</span><span class="hljs-params">()</span>: <span class="hljs-title">View</span>
    </span>{
        $accounts = <span class="hljs-highlight  type">Account</span>::<span class="hljs-highlight  prop">all</span>();

        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-highlight  type">View</span>(<span class="hljs-string">'accounts.index'</span>, [
            <span class="hljs-string">'accounts'</span> =&gt; $accounts,
        ]);
    }
}</code></pre>
<p>Keep in mind that I mainly work in a Laravel context and I'm used to the Eloquent ORM. If you prefer to use a repository pattern, that's also fine.</p>
<p>Behind the scenes, <code>Account::all()</code> or <code>$accountRepository->all()</code> will not perform database queries, rather they will send a small message to the backend server, which will send the accounts, from memory, back to the client.</p>
<p>If we're making a change to the accounts balance, that's done like so:</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-keyword">final</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BalanceController</span>
</span>{
    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">increase</span><span class="hljs-params">(<span class="hljs-highlight  type">Account</span> $account, <span class="hljs-highlight  type">int</span> $amount)</span>: <span class="hljs-title">Redirect</span>
    </span>{
        $aggregateRoot = <span class="hljs-highlight  type">AccountAggregateRoot</span>::<span class="hljs-highlight  prop">find</span>($account);
   
        $aggregateRoot-&gt;<span class="hljs-highlight  prop">increaseBalance</span>($amount);

        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-highlight  type">Redirect</span>(
            [<span class="hljs-highlight  type">AccountsController</span>::class, <span class="hljs-string">'index'</span>], 
            [$account]
        );
    }
}</code></pre>
<p>Behind the scenes, <code>AccountAggregateRoot::increaseBalance()</code> will send an event to the server, which will store it and notify all relevant subscribers.</p>
<p>If you're wondering what such an implementation of <code>AccountAggregateRoot</code> might look like, here's a simplified version:</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-keyword">final</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AccountAggregateRootRoot</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">AggregateRoot</span>
</span>{
    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">increaseBalance</span><span class="hljs-params">(<span class="hljs-highlight  type">int</span> $amount)</span>: <span class="hljs-title">self</span>
    </span>{
        <span class="hljs-keyword">$this</span>-&gt;<span class="hljs-highlight  prop">event</span>(<span class="hljs-keyword">new</span> <span class="hljs-highlight  type">BalanceIncreased</span>($amount));

        <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>;
    }
}</code></pre>
<p>And finally this is what the <code>Account</code> entity looks like. Notice the lack of ORM-style configuration; these are simple in-memory PHP objects!</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-keyword">final</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Account</span> <span class="hljs-keyword">extends</span> <span class="hljs-highlight  type"><span class="hljs-title">Entity</span></span>
</span>{
    <span class="hljs-keyword">public</span> <span class="hljs-highlight  type">string</span> $uuid;

    <span class="hljs-keyword">public</span> <span class="hljs-highlight  type">string</span> $name;

    <span class="hljs-keyword">public</span> <span class="hljs-highlight  type">int</span> $balance = <span class="hljs-number">0</span>;
}</code></pre>
<p>One final note to make: remember that I mentioned PHP's fast request/response cycle would actually be critical? Here's why: if we're sending updates to the server, we don't need to worry about broadcasting those updates back to the clients. Every client generally only lives for a second or two, so there's little to worry about keeping them in sync.</p>
<h2 id="the-downsides"><a href="#the-downsides" class="heading-anchor">#</a> The downsides</h2>
<p>All of this sounds interesting in theory, but what about in practice? What about performance? How much RAM will you need to store everything in memory? Will we be able to optimise reading the state by performing complex queries? How will snapshots be stored? What about versioning?</p>
<p>Lots of questions are still unanswered. The goal of this post was not to provide all answers, but rather share some thoughts and questions with you, the community. Who knows what you can come up with?</p>
<p>I mentioned that the code for this is open source, you can take a look at it <a target="_blank" href="https://github.com/spatie/event-server">over here</a>. I'm looking forward to hearing your feedback, on <a target="_blank" href="https://www.reddit.com/r/PHP/comments/fk3qne/event_driven_application_server_in_php/?">Reddit</a>, via <a target="_blank" href="https://twitter.com/brendt_gd">Twitter</a> or <a href="mailto:brendt@stitcher.io">e-mail</a>.</p>
 ]]></summary>

                <updated>2020-03-13T00:00:00+00:00</updated>
            </entry>
                                <entry>
                <title><![CDATA[ Bitwise booleans in PHP ]]></title>

                <link rel="alternate" href="https://stitcher.io/blog/bitwise-booleans-in-php"/>

                <id>https://www.stitcher.io/blog/bitwise-booleans-in-php</id>

                <author>
                    <name><![CDATA[ Brent Roose ]]></name>
                </author>

                <summary type="html"><![CDATA[ <p>In my <a href="/blog/enums-without-enums">previous post</a> I wrote about applying enum patterns in PHP, without native enum support.</p>
<p>In that post, I gave the example of a "date range boundaries" enum, one that represents which boundaries are included in the range, and which are not. It had four possible values:</p>
<ul>
<li>
<code>Boundaries::INCLUDE_NONE();</code>
</li>
<li>
<code>Boundaries::INCLUDE_START();</code>
</li>
<li>
<code>Boundaries::INCLUDE_END();</code>
</li>
<li>
<code>Boundaries::INCLUDE_ALL();</code>
</li>
</ul>
<p>To represent these boundaries, I stored two boolean flags on the enum value classes: <code>$startIncluded</code> and <code>$endIncluded</code>.</p>
<p>In this post, I want to show another way to store these two boolean flags, using bitmasks.</p>
<p><div class="ad-container">
    <script async type="text/javascript" src="//cdn.carbonads.com/carbon.js?serve=CK7ICK3W&placement=stitcherio" id="_carbonads_js"></script>
</div>
</p>
<p>Here's a quick recap of what (part of) our enum class looked like:</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Boundaries</span>
</span>{
    <span class="hljs-keyword">private</span> <span class="hljs-highlight  type">bool</span> $startIncluded = <span class="hljs-keyword">false</span>;
    <span class="hljs-keyword">private</span> <span class="hljs-highlight  type">bool</span> $endIncluded = <span class="hljs-keyword">false</span>;

    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">startIncluded</span><span class="hljs-params">()</span>: <span class="hljs-title">bool</span> 
    </span>{
        <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;startIncluded;
    }

    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">endIncluded</span><span class="hljs-params">()</span>: <span class="hljs-title">bool</span> 
    </span>{
        <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;endIncluded;
    }

    <span class="hljs-comment">// …</span>
}</code></pre>
<p>In this case, we're using <em>two</em> variables to store <em>two</em> boolean values.</p>
<p>Them being booleans though, means they can only have one of two values: <code>true</code> or <code>false</code>; <code>1</code> or <code>0</code>. Instead of using a whole byte, we only need one bit to store this value.</p>
<p>Hang on though, a whole byte? — It's actually a lot more: 16 bytes to be exact. PHP stores all variables in a structure called a <code>zval</code>, which reserves memory not only for the payload, but also type information, bit flags and what not. You can take a look at it <a target="_blank" href="https://github.com/php/php-src/blob/master/Zend/zend_types.h#L302-L328">here</a>.</p>
<p>Of those 16 bytes, there's 8 reserved per <code>zval</code> to store a payload in; that's 64 bits!</p>
<p>Now, as a precursor, let's make clear that you probably will never need these kinds of micro-optimisations. Boolean bitmasks are often used in game development, compilers and the like, because they are very memory-efficient. In web applications, though, you can be assured you will probably never need them.</p>
<p>Nevertheless, it's a cool, geeky thing to know, and possible in PHP.</p>
<p>So let's store these two flags in one variable.</p>
<pre><code class="language-angelscript hljs angelscript" data-lang="angelscript"><span class="hljs-highlight  keyword"><span class="hljs-keyword">abstract</span></span> <span class="hljs-highlight  keyword"><span class="hljs-keyword">class</span>&lt;/<span class="hljs-symbol">hljs&gt; &lt;<span class="hljs-symbol">hljs <span class="hljs-symbol">type&gt;<span class="hljs-symbol">Boundaries</span>&lt;/<span class="hljs-symbol">hljs&gt;
{
    <span class="hljs-highlight  keyword"><span class="hljs-keyword">protected</span></span> <span class="hljs-highlight  type"><span class="hljs-built_in">int<span class="hljs-keyword"></span></span></span> $inclusionMask = <span class="hljs-highlight  textgrey"><span class="hljs-number">0</span>b</span><span class="hljs-number">00</span>;
}</code></pre>
<p>What's happening here? We're making use of the <a target="_blank" href="https://www.php.net/manual/en/language.types.integer.php#language.types.integer.syntax">binary notation</a> of integers to easily work with individual bits. If you ever learned about binary systems in school or somewhere else, you know that <code>0b00</code> equals 0, <code>0b01</code> equals 1, <code>0b10</code> equals 2 and <code>0b11</code> equals 3. <code>0b</code> is a prefix that PHP uses to know you're writing binary, and <code>00</code> are the two actual bits.</p>
<p>Now that we've got two bits to work with, it's easy to store two boolean values in them. Let's say that the rightmost bit represents <code>endIncluded</code>, and the leftmost bit represents <code>startIncluded</code>.</p>
<p>So <code>0b01</code> means that the start boundary is not included, while the end boundary is; <code>0b11</code> means both are included — you get the gist.</p>
<p>Now that we know how to store data in bits, we still need a way of reading the information in our <code>startIncluded()</code> and <code>endIncluded()</code> methods: we don't want to program everything in binary.</p>
<p>Here's where <a target="_blank" href="https://www.php.net/manual/en/language.operators.bitwise.php">bitwise operators</a> come into play, more specifically the <code>and</code> operator.</p>
<p>Take the following two binary values:</p>
<pre><code class="language-xml hljs xml" data-lang="xml"><span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>0b<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>0100101;
<span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>0b<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>1010101;</code></pre>
<p>What happens when we apply an <code>and</code> operation on both of these values? The result will have all bits set to <code>1</code> wherever both bits were <code>1</code> in the two original values:</p>
<pre><code class="language-xml hljs xml" data-lang="xml"><span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>0b<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>0<span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">type&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>00<span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">green&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>0<span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">green&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>;
<span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>0b<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">type&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>0<span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">type&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>0<span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">green&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>0<span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">green&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>;</code></pre>
<p>This is the end result:</p>
<pre><code class="language-xml hljs xml" data-lang="xml"><span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>0b<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>0000<span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">green&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>0<span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">green&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>;</code></pre>
<p>Back to our boundaries example. How can we know whether the start is included or not? Since the start boundary is represented by the leftmost bit, we can apply a bitmask on our inclusion variable. If we want to know whether the start bit is set, we simply need to do an <code>and</code> operation between the inclusion mask, and the binary value <code>0b10</code>.</p>
<p>How so? Since we're only interested in knowing the value of the start boundary, we'll make a mask for that bit only. If we apply an <code>and</code> operation between these two values, the result will always be <code>0b00</code>, unless the start bit was actually set.</p>
<p>Here's an example where the start bit is <code>0</code>:</p>
<pre><code class="language-xml hljs xml" data-lang="xml"><span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>0b<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">type&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>0; <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>// The mask we're applying<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>0b<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>0<span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">type&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>; <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>// The inclusion mask<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>

<span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>0b<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>00; <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>// The result<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span></code></pre>
<p>And here's one where the start bit is <code>1</code>:</p>
<pre><code class="language-xml hljs xml" data-lang="xml"><span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>0b<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">green&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>0; <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>// The mask we're applying<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>0b<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">green&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>0; <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>// The inclusion mask<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>

<span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>0b<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">green&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>0; <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>// The result<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span></code></pre>
<p>The end bit will always be <code>0</code> in this case, because the mask we're applying has it set to <code>0</code>. Hence, whatever value is stored for the end boundary in the inclusion mask, will always result in <code>0</code>.</p>
<p>So how to do this in PHP? By using the binary <code>and</code> operator, which is a single <code>&</code>:</p>
<pre><code class="language-xml hljs xml" data-lang="xml"><span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">keyword&gt;</span>public<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">keyword&gt;</span>function<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">prop&gt;</span>startIncluded<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>(): <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">type&gt;</span>bool<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span> 
{
    <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">keyword&gt;</span>return<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">keyword&gt;</span>$this<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>-&gt;inclusionMask &amp; <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>0b<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>10;
}

<span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">keyword&gt;</span>public<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">keyword&gt;</span>function<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">prop&gt;</span>endIncluded<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>(): <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">type&gt;</span>bool<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span> 
{
    <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">keyword&gt;</span>return<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">keyword&gt;</span>$this<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>-&gt;inclusionMask &amp; <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>0b<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>01;
}</code></pre>
<p>PHP's dynamic type system will automatically cast the result, <code>0</code> or a numeric value, to a boolean. If you want to be more explicit though, you can write it like so:</p>
<pre><code class="language-xml hljs xml" data-lang="xml"><span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">keyword&gt;</span>public<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">keyword&gt;</span>function<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">prop&gt;</span>startIncluded<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>(): <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">type&gt;</span>bool<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span> 
{
    <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">keyword&gt;</span>return<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span> (<span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">keyword&gt;</span>$this<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>-&gt;inclusionMask &amp; <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>0b<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>10) !== 0;
}

<span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">keyword&gt;</span>public<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">keyword&gt;</span>function<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">prop&gt;</span>endIncluded<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>(): <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">type&gt;</span>bool<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span> 
{
    <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">keyword&gt;</span>return<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span> (<span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">keyword&gt;</span>$this<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>-&gt;inclusionMask &amp; <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>0b<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>01) !== 0;
}</code></pre>
<p><div class="author">
    Noticed a tpyo? You can submit a
    <a href="https://github.com/brendt/stitcher.io" target="_blank" rel="noopener noreferrer">PR</a> to fix it.

    If you want to stay up to date about what's happening on this blog, you can follow me
    <a href="https://mobile.twitter.com/brendt_gd" target="_blank" rel="noopener noreferrer">on Twitter</a> or subscribe to my newsletter:

    <form action="https://mail.stitcher.io/subscribe/81fa83d0-4a0b-4eff-b897-f6ce51dfb7f0" method="post" class="newsletter-form">
        <label for="newsletter-email-56">Email</label>
        <input type="email" name="email" id="newsletter-email-56"/>
        <button type="submit" class="cta cta-small">Subscribe</button>
    </form>
</div>
</p>
<p>Let's make clear that you shouldn't be doing this for performance motivations in PHP. There might even be edge cases where this approach would be less optimal, because our inclusion mask can't be garbage collected unless there are no reference anymore to <em>any</em> of the boolean flags.</p>
<p><em>However</em>, if you're working with several boolean flags at once, it might be useful to store them in one variable instead of several, to reduce cognitive load. You could think of "storing the boolean values" as a behind-the-scenes implementation detail, while the public API of a class still provides a clear way of working with them.</p>
<p>So, who knows, there might be cases where this technique is useful. If you have some real-life use cases, be sure to let me know on <a target="_blank" href="https://twitter.com/brendt_gd">Twitter</a> or via <a href="mailto:brendt@stitcher.io">e-mail</a>.</p>
 ]]></summary>

                <updated>2020-02-14T00:00:00+00:00</updated>
            </entry>
                                <entry>
                <title><![CDATA[ Enums without enums in PHP ]]></title>

                <link rel="alternate" href="https://stitcher.io/blog/enums-without-enums"/>

                <id>https://www.stitcher.io/blog/enums-without-enums</id>

                <author>
                    <name><![CDATA[ Brent Roose ]]></name>
                </author>

                <summary type="html"><![CDATA[ <p>Enums are still lacking in PHP, yet there is a clean way to have enum-like behaviour in your code bases, without using  external dependencies. Take the example of <a href="/blog/comparing-dates">date range boundaries</a>: its boundaries can be included or excluded. Here's how a <code>Boundaries</code> enum would be used:</p>
<pre><code class="language-php hljs php" data-lang="php">$dateRange = <span class="hljs-highlight  type">DateRange</span>::<span class="hljs-highlight  prop">make</span>(
    <span class="hljs-string">'2020-02-01'</span>, 
    <span class="hljs-string">'2020-03-01'</span>, 
    <span class="hljs-highlight  type">Boundaries</span>::<span class="hljs-highlight  prop">INCLUDE_ALL</span>()
);</code></pre>
<p><div class="ad-container">
    <script async type="text/javascript" src="//cdn.carbonads.com/carbon.js?serve=CK7ICK3W&placement=stitcherio" id="_carbonads_js"></script>
</div>
</p>
<p>This is what the constructor signature of <code>DateRange</code> looks like:</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span><span class="hljs-params">($start, $end, <span class="hljs-highlight  type">Boundaries</span> $boundaries)</span></span>;</code></pre>
<p>That's the first requirement: <strong>we want to use the type system to ensure only valid enum values are used</strong>.</p>
<p>Next, we want to be able to ask the enum which boundaries are included, like so:</p>
<pre><code class="language-php hljs php" data-lang="php">$dateRange-&gt;boundaries-&gt;<span class="hljs-highlight  prop">startIncluded</span>();
$dateRange-&gt;boundaries-&gt;<span class="hljs-highlight  prop">endIncluded</span>();</code></pre>
<p>This means that each enum value should support its own implementation of <code>startIncluded</code> and <code>endIncluded</code>.</p>
<p>That's the second requirement: <strong>we want our enums to support value-specific behaviour</strong>.</p>
<p>On first sight, the easiest solution is to have a <code>Boundaries</code> class, and implement <code>startIncluded</code> and <code>endIncluded</code> like so:</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-keyword">final</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Boundaries</span>
</span>{
    <span class="hljs-keyword">private</span> <span class="hljs-keyword">const</span> INCLUDE_NONE = <span class="hljs-string">'none'</span>;
    <span class="hljs-keyword">private</span> <span class="hljs-keyword">const</span> INCLUDE_START = <span class="hljs-string">'start'</span>;
    <span class="hljs-keyword">private</span> <span class="hljs-keyword">const</span> INCLUDE_END = <span class="hljs-string">'end'</span>;
    <span class="hljs-keyword">private</span> <span class="hljs-keyword">const</span> INCLUDE_ALL = <span class="hljs-string">'all'</span>;

    <span class="hljs-keyword">private</span> string $value;

    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">INCLUDE_START</span><span class="hljs-params">()</span>: <span class="hljs-title">self</span>
    </span>{
        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-keyword">self</span>(<span class="hljs-keyword">self</span>::INCLUDE_START);
    }

    <span class="hljs-keyword">private</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span><span class="hljs-params">(<span class="hljs-highlight  type">string</span> $value)</span> 
    </span>{
        <span class="hljs-keyword">$this</span>-&gt;value = $value;
    }

    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">startIncluded</span><span class="hljs-params">()</span>: <span class="hljs-title">bool</span>
    </span>{
        <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;value === <span class="hljs-keyword">self</span>::INCLUDE_START
            || <span class="hljs-keyword">$this</span>-&gt;value === <span class="hljs-keyword">self</span>::INCLUDE_ALL;
    }
    
    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">endIncluded</span><span class="hljs-params">()</span>: <span class="hljs-title">bool</span>
    </span>{
        <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;value === <span class="hljs-keyword">self</span>::INCLUDE_END
            || <span class="hljs-keyword">$this</span>-&gt;value === <span class="hljs-keyword">self</span>::INCLUDE_ALL;
    }
}</code></pre>
<p>In short: using conditionals on an enum's value to add behaviour.</p>
<p>For this example, it's a clean enough solution. However: it doesn't scale that well. Imagine our enum needs more complex value-specific functionality; you often end up with large functions containing large conditional blocks.</p>
<p>The more conditionals, the more paths your code can take, the more complex it is to understand and maintain, and the more prone to bugs.</p>
<p>That's the third requirement: <strong>we want to avoid using conditionals on enum values</strong>.</p>
<p>In summary, we want our enums to match these three requirements:</p>
<ul>
<li>Enum values should be strongly typed, so that the type system can do checks on them</li>
<li>Enums should support value-specific behaviour</li>
<li>Value-specific conditions should be avoided at all costs</li>
</ul>
<p>Polymorphism can offer a solution here: each enum value can be represented by its own class, extending the <code>Boundaries</code> enum. Therefore, each value can implement its own version of <code>startIncluded</code> and <code>endIncluded</code>, returning a simple boolean.</p>
<p>Maybe we'd make something like this:</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Boundaries</span>
</span>{
    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">INCLUDE_NONE</span><span class="hljs-params">()</span>: <span class="hljs-title">IncludeNone</span>
    </span>{
        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-highlight  type">IncludeNone</span>();
    }
    
    <span class="hljs-comment">// …</span>
    
    <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">startIncluded</span><span class="hljs-params">()</span>: <span class="hljs-title">bool</span></span>;

    <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">endIncluded</span><span class="hljs-params">()</span>: <span class="hljs-title">bool</span></span>;
}</code></pre>
<p>And have a concrete implementation of <code>Boundaries</code> like this — you can imagine what the other three would look like:</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-keyword">final</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">IncludeNone</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Boundaries</span>
</span>{
    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">startIncluded</span><span class="hljs-params">()</span>: <span class="hljs-title">bool</span>
    </span>{
        <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;
    }

    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">endIncluded</span><span class="hljs-params">()</span>: <span class="hljs-title">bool</span>
    </span>{
        <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;
    }
} </code></pre>
<p>While there's more initial work to program these enums, we now meet all requirements.</p>
<p>There's one more improvement to be made. There's no need to use dedicated classes for specific values; they will never be used on their own. So instead of making four classes extending <code>Boundaries</code>, we could use anonymous classes:</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Boundaries</span>
</span>{
    <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">startIncluded</span><span class="hljs-params">()</span>: <span class="hljs-title">bool</span></span>;

    <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">endIncluded</span><span class="hljs-params">()</span>: <span class="hljs-title">bool</span></span>;

    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">INCLUDE_NONE</span><span class="hljs-params">()</span>: <span class="hljs-title">Boundaries</span>
    </span>{
        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Boundaries</span> 
        </span>{
            <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">startIncluded</span><span class="hljs-params">()</span>: <span class="hljs-title">bool</span> </span>{
                <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>; 
            }

            <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">endIncluded</span><span class="hljs-params">()</span>: <span class="hljs-title">bool</span> </span>{
                <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>; 
            }
        };
    }

    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">INCLUDE_START</span><span class="hljs-params">()</span>: <span class="hljs-title">Boundaries</span>
    </span>{
        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Boundaries</span> 
        </span>{
            <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">startIncluded</span><span class="hljs-params">()</span>: <span class="hljs-title">bool</span> </span>{
                <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>; 
            }

            <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">endIncluded</span><span class="hljs-params">()</span>: <span class="hljs-title">bool</span> </span>{
                <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>; 
            }
        };
    }

    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">INCLUDE_END</span><span class="hljs-params">()</span>: <span class="hljs-title">Boundaries</span>
    </span>{
        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Boundaries</span> 
        </span>{
            <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">startIncluded</span><span class="hljs-params">()</span>: <span class="hljs-title">bool</span> </span>{
                <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>; 
            }

            <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">endIncluded</span><span class="hljs-params">()</span>: <span class="hljs-title">bool</span> </span>{
                <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>; 
            }
        };
    }

    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">INCLUDE_ALL</span><span class="hljs-params">()</span>: <span class="hljs-title">Boundaries</span>
    </span>{
        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Boundaries</span> 
        </span>{
            <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">startIncluded</span><span class="hljs-params">()</span>: <span class="hljs-title">bool</span> </span>{
                <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>; 
            }

            <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">endIncluded</span><span class="hljs-params">()</span>: <span class="hljs-title">bool</span> </span>{
                <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>; 
            }
        };
    }
}</code></pre>
<p>Ok, I was mistaken: there were two more improvements to be made. This is a lot of repeated code! But again there's a solution for that! Let's simply define two properties on each value-specific class (<code>$startIncluded</code> and <code>$endIncluded</code>) and let's implement their getters on the abstract <code>Boundaries</code> class instead!</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Boundaries</span>
</span>{
    <span class="hljs-keyword">protected</span> <span class="hljs-highlight  type">bool</span> $startIncluded;
    <span class="hljs-keyword">protected</span> <span class="hljs-highlight  type">bool</span> $endIncluded;
    
    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">startIncluded</span><span class="hljs-params">()</span>: <span class="hljs-title">bool</span> 
    </span>{
        <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;startIncluded;
    }
    
    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">endIncluded</span><span class="hljs-params">()</span>: <span class="hljs-title">bool</span> 
    </span>{
        <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;endIncluded;
    }

    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">INCLUDE_NONE</span><span class="hljs-params">()</span>: <span class="hljs-title">Boundaries</span>
    </span>{
        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Boundaries</span> 
        </span>{
            <span class="hljs-keyword">protected</span> <span class="hljs-highlight  type">bool</span> $startIncluded = <span class="hljs-keyword">false</span>;
            <span class="hljs-keyword">protected</span> <span class="hljs-highlight  type">bool</span> $endIncluded = <span class="hljs-keyword">false</span>;
        };
    }

    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">INCLUDE_START</span><span class="hljs-params">()</span>: <span class="hljs-title">Boundaries</span>
    </span>{
        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Boundaries</span>
        </span>{
            <span class="hljs-keyword">protected</span> <span class="hljs-highlight  type">bool</span> $startIncluded = <span class="hljs-keyword">true</span>;
            <span class="hljs-keyword">protected</span> <span class="hljs-highlight  type">bool</span> $endIncluded = <span class="hljs-keyword">false</span>;
        };
    }

    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">INCLUDE_END</span><span class="hljs-params">()</span>: <span class="hljs-title">Boundaries</span>
    </span>{
        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Boundaries</span>
        </span>{
            <span class="hljs-keyword">protected</span> <span class="hljs-highlight  type">bool</span> $startIncluded = <span class="hljs-keyword">false</span>;
            <span class="hljs-keyword">protected</span> <span class="hljs-highlight  type">bool</span> $endIncluded = <span class="hljs-keyword">true</span>;
        };
    }

    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">INCLUDE_ALL</span><span class="hljs-params">()</span>: <span class="hljs-title">Boundaries</span>
    </span>{
        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Boundaries</span>
        </span>{
            <span class="hljs-keyword">protected</span> <span class="hljs-highlight  type">bool</span> $startIncluded = <span class="hljs-keyword">true</span>;
            <span class="hljs-keyword">protected</span> <span class="hljs-highlight  type">bool</span> $endIncluded = <span class="hljs-keyword">true</span>;
        };
    }
}</code></pre>
<p>The above is my favourite approach to implement enums in PHP. If there's one downside I can think of, it's that they require a little setup work, though I find that this is a small, one-off cost, that pays off highly in the long run.</p>
 ]]></summary>

                <updated>2020-02-01T00:00:00+00:00</updated>
            </entry>
                                <entry>
                <title><![CDATA[ 09. Test factories ]]></title>

                <link rel="alternate" href="https://stitcher.io/blog/laravel-beyond-crud-09-test-factories"/>

                <id>https://www.stitcher.io/blog/laravel-beyond-crud-09-test-factories</id>

                <author>
                    <name><![CDATA[ Brent Roose ]]></name>
                </author>

                <summary type="html"><![CDATA[ <p>Note: this chapter mostly addresses domain-related code. We'll come back to the application layer in future chapters.</p>
<div class="author footnotes">
<p>I'm working on a brand new version of this series, it will contain a video course, ebook and a project built from the ground up with these principles!
</p>
<br>
<p><a class="cta cta-small cta-bold" target="_blank" rel="noopener noreferrer" href="https://laravel-beyond-crud.com/">Read more</a></p>
</div>
<p>In this chapter of <a href="/blog/laravel-beyond-crud">Laravel beyond CRUD</a>, we're going to look at how we can manage domain data for tests. Test factories in Laravel are a known concept, though they lack in many areas: they aren't very flexible and are also kind of a black box to the user.</p>
<p>Take the example of factory states, a powerful pattern, yet poorly implemented in Laravel.</p>
<pre><code class="language-php hljs php" data-lang="php">$factory-&gt;<span class="hljs-highlight  prop">state</span>(<span class="hljs-highlight  type">Invoice</span>::class, <span class="hljs-string">'pending'</span>, [
    <span class="hljs-string">'status'</span> =&gt; <span class="hljs-highlight  type">PaidInvoiceState</span>::class,
]);</code></pre>
<p>First of all: your IDE has no clue what kind of object <code>$factory</code> actually is. It magically exists in factory files, though there's no autocompletion on it. A quick fix is to add this docblock, though that's cumbersome.</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-comment">/** <span class="hljs-doctag">@var</span> \Illuminate\Database\Eloquent\Factory $factory */</span>
$factory-&gt;<span class="hljs-highlight  prop">state</span>(<span class="hljs-comment">/* … */</span>);</code></pre>
<p>Second, states are defined as strings, making them a black box when actually using a factory in tests.</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test_case</span><span class="hljs-params">()</span>
</span>{
    $invoice = <span class="hljs-highlight  prop">factory</span>(<span class="hljs-highlight  type">Invoice</span>::class)
        -&gt;<span class="hljs-highlight  prop">states</span>(<span class="hljs-comment">/* what states are actually available here? */</span>)
        -&gt;<span class="hljs-highlight  prop">create</span>();
}</code></pre>
<p>Third, there's no type hinting on the result of a factory, your IDE doesn't know that <code>$invoice</code> actually is an <code>Invoice</code> model; again: a black box.</p>
<p>And finally, given a large enough domain, you might need more than just a few states in your test suite, which become difficult to manage over time.</p>
<p>In this chapter we'll look at an alternative way of implementing this factory pattern, to allow much more flexibility and improve their user experience significantly. The actual goal of these factory classes is to help you write integration tests, without having to spend too much time on setting up the system for it.</p>
<p>Note that I say "integration tests" and not "unit tests": when we're testing our domain code, we're testing the core business logic. More often than not, testing this business logic means we won't be testing an isolated piece of a class, but rather a complex and intricate business rule which requires some (or lots of) data to be present in the database.</p>
<p>As I've mentioned before: we're talking about large and complex systems in this book; it's important to keep that in mind. In particular, that's why I decided to call these tests <em>integration</em> tests in this chapter; it was in order to avoid going into discussions about what unit tests are and what they aren't.</p>
<h2 id="a-basic-factory"><a href="#a-basic-factory" class="heading-anchor">#</a> A basic factory</h2>
<p>A test factory is nothing more than a simple class. There's no package to require, no interfaces to implement or abstract classes to extend. The power of a factory is not the complexity of the code, but rather one or two patterns properly applied.</p>
<p>Here's what such a class looks like, simplified:</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">InvoiceFactory</span>
</span>{
    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">new</span><span class="hljs-params">()</span>: <span class="hljs-title">self</span>
    </span>{
        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-keyword">self</span>();
    }
    
    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">create</span><span class="hljs-params">(<span class="hljs-highlight  type">array</span> $extra = [])</span>: <span class="hljs-title">Invoice</span>
    </span>{
        <span class="hljs-keyword">return</span> <span class="hljs-highlight  type">Invoice</span>::<span class="hljs-highlight  prop">create</span>(<span class="hljs-highlight  prop">array_merge</span>(
            [
                <span class="hljs-string">'number'</span> =&gt; <span class="hljs-string">'I-1'</span>,
                <span class="hljs-string">'status'</span> =&gt; <span class="hljs-highlight  type">PendingInvoiceState</span>::class,
                <span class="hljs-comment">// …</span>
            ],
            $extra
        ));   
    }
}</code></pre>
<p>Let's discuss a few design decisions.</p>
<p>First of all, the static constructor <code>new</code>. You might be confused as to why we need it, as we could simply make the <code>create</code> method static. I'll answer that question in depth later in this chapter, but for now you should know that we want this factory to be highly configurable before actually creating an invoice. So rest assured, it will become clearer soon.</p>
<p>Secondly, why the name <code>new</code> for the static constructor? The answer is a practical one: within the context of factories, <code>make</code> and <code>create</code> are often associated with a factory actually producing a result. <code>new</code> helps us avoid unnecessary confusion.</p>
<p>Finally, the <code>create</code> method: it takes an optional array of extra data to ensure we can always make some last-minute changes in our tests.</p>
<p>With our simple example, we can now create invoices like so:</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test_case</span><span class="hljs-params">()</span>
</span>{
    $invoice = <span class="hljs-highlight  type">InvoiceFactory</span>::<span class="hljs-highlight  prop"><span class="hljs-keyword">new</span></span>()-&gt;<span class="hljs-highlight  prop">create</span>();
}</code></pre>
<p>Before looking at configurability, let's address a little improvement we can make right away: invoice numbers should be unique, so if we create two invoices in one test case, it will break. We don't want to worry about keeping track of invoice numbers in most cases though, so let's have the factory take care of those:</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">InvoiceFactory</span>
</span>{
    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-highlight  type">int</span> $number = <span class="hljs-number">0</span>;

    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">create</span><span class="hljs-params">(<span class="hljs-highlight  type">array</span> $extra = [])</span>: <span class="hljs-title">Invoice</span>
    </span>{
        <span class="hljs-keyword">self</span>::$number += <span class="hljs-number">1</span>;

        <span class="hljs-keyword">return</span> <span class="hljs-highlight  type">Invoice</span>::<span class="hljs-highlight  prop">create</span>(<span class="hljs-highlight  prop">array_merge</span>(
            [
                <span class="hljs-string">'number'</span> =&gt; <span class="hljs-string">'I-'</span> . <span class="hljs-keyword">self</span>::$number,
                <span class="hljs-comment">// …</span>
            ],
            $extra
        ));   
    }
}</code></pre>
<h2 id="factories-in-factories"><a href="#factories-in-factories" class="heading-anchor">#</a> Factories in factories</h2>
<p>In the original example, I showed that we might want to create a paid invoice. I was a little naive previously when I assumed this simply meant changing the status field on the invoice model. We also need an actual payment to be saved in the database! Laravel's default factories can handle this with callbacks, which trigger after a model was created; though imagine what happens if you're managing several, maybe even tens of states, each with their own side effects. A simple <code>$factory->afterCreating</code> hook just isn't robust enough to manage all this in a sane way.</p>
<p>So, let's turn things around. Let's properly configure our invoice factory, <em>before</em> creating the actual invoice.</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">InvoiceFactory</span>
</span>{
    <span class="hljs-keyword">private</span> <span class="hljs-highlight  type">string</span> $status = <span class="hljs-keyword">null</span>;

    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">create</span><span class="hljs-params">(<span class="hljs-highlight  type">array</span> $extra = [])</span>: <span class="hljs-title">Invoice</span>
    </span>{
        $invoice = <span class="hljs-highlight  type">Invoice</span>::<span class="hljs-highlight  prop">create</span>(<span class="hljs-highlight  prop">array_merge</span>(
            [
                <span class="hljs-string">'status'</span> =&gt; <span class="hljs-keyword">$this</span>-&gt;status ?? <span class="hljs-highlight  type">PendingInvoiceState</span>::class
            ],
            $extra
        ));
        
        <span class="hljs-keyword">if</span> ($invoice-&gt;status-&gt;<span class="hljs-highlight  prop">isPaid</span>()) {
            <span class="hljs-highlight  type">PaymentFactory</span>::<span class="hljs-highlight  prop"><span class="hljs-keyword">new</span></span>()-&gt;<span class="hljs-highlight  prop">forInvoice</span>($invoice)-&gt;<span class="hljs-highlight  prop">create</span>();
        }
        
        <span class="hljs-keyword">return</span> $invoice;
    }

    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">paid</span><span class="hljs-params">()</span>: <span class="hljs-title">self</span>
    </span>{
        $clone = <span class="hljs-keyword">clone</span> <span class="hljs-keyword">$this</span>;
        
        $clone-&gt;status = <span class="hljs-highlight  type">PaidInvoiceState</span>::class;
        
        <span class="hljs-keyword">return</span> $clone;
    }
}</code></pre>
<p>If you're wondering about that <code>clone</code> by the way, we'll look at it later.</p>
<p>The thing we've made configurable is the invoice status, just like factory states in Laravel would do, but in our case there's the advantage that our IDE actually knows what we're dealing with:</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test_case</span><span class="hljs-params">()</span>
</span>{
    $invoice = <span class="hljs-highlight  type">InvoiceFactory</span>::<span class="hljs-highlight  prop"><span class="hljs-keyword">new</span></span>()
        -&gt;<span class="hljs-highlight  prop">paid</span>()
        -&gt;<span class="hljs-highlight  prop">create</span>();
}</code></pre>
<p>Still, there's room for improvement. Have you seen that check we do after the invoice is created?</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-keyword">if</span> ($invoice-&gt;status-&gt;<span class="hljs-highlight  prop">isPaid</span>()) {
    <span class="hljs-highlight  type">PaymentFactory</span>::<span class="hljs-highlight  prop"><span class="hljs-keyword">new</span></span>()-&gt;<span class="hljs-highlight  prop">forInvoice</span>($invoice)-&gt;<span class="hljs-highlight  prop">create</span>();
}</code></pre>
<p>This can be made more flexible still. We're using a <code>PaymentFactory</code> underneath, but what if we want more fine-grained control about how that payment was made? You can imagine there are some business rules about paid invoices that behave differently depending on the type of payment, for example.</p>
<p>Also, we want to avoid passing too much configuration directly into the <code>InvoiceFactory</code>, because it will become a mess very quickly. So how do we solve this?</p>
<p>Here's the answer: we allow the developer to optionally pass a <code>PaymentFactory</code> to <code>InvoiceFactory</code> so that this factory can be configured however the developer wants. Here's how that looks:</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">paid</span><span class="hljs-params">(<span class="hljs-highlight  type">PaymentFactory</span> $paymentFactory = null)</span>: <span class="hljs-title">self</span>
</span>{
    $clone = <span class="hljs-keyword">clone</span> <span class="hljs-keyword">$this</span>;
    
    $clone-&gt;status = <span class="hljs-highlight  type">PaidInvoiceState</span>::class;
    $clone-&gt;paymentFactory = $paymentFactory ?? <span class="hljs-highlight  type">PaymentFactory</span>::<span class="hljs-highlight  prop"><span class="hljs-keyword">new</span></span>();
    
    <span class="hljs-keyword">return</span> $clone;
}</code></pre>
<p>And here's how it's used in the <code>create</code> method:</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-keyword">if</span> (<span class="hljs-keyword">$this</span>-&gt;paymentFactory) {
    <span class="hljs-keyword">$this</span>-&gt;paymentFactory-&gt;<span class="hljs-highlight  prop">forInvoice</span>($invoice)-&gt;<span class="hljs-highlight  prop">create</span>();
}</code></pre>
<p>By doing so, a lot of possibilities arise. In this example we're making an invoice that's paid, specifically with a Bancontact payment.</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test_case</span><span class="hljs-params">()</span>
</span>{
    $invoice = <span class="hljs-highlight  type">InvoiceFactory</span>::<span class="hljs-highlight  prop"><span class="hljs-keyword">new</span></span>()
        -&gt;<span class="hljs-highlight  prop">paid</span>(
            <span class="hljs-highlight  type">PaymentFactory</span>::<span class="hljs-highlight  prop"><span class="hljs-keyword">new</span></span>()-&gt;<span class="hljs-highlight  prop">type</span>(<span class="hljs-highlight  type">BancontactPaymentType</span>::class)
        )
        -&gt;<span class="hljs-highlight  prop">create</span>();
}</code></pre>
<p>Another example: we want to test how an invoice is handled when it has been paid, but only after the invoice expiration date:</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test_case</span><span class="hljs-params">()</span>
</span>{
    $invoice = <span class="hljs-highlight  type">InvoiceFactory</span>::<span class="hljs-highlight  prop"><span class="hljs-keyword">new</span></span>()
        -&gt;<span class="hljs-highlight  prop">expiresAt</span>(<span class="hljs-string">'2020-01-01'</span>)
        -&gt;<span class="hljs-highlight  prop">paid</span>(
            <span class="hljs-highlight  type">PaymentFactory</span>::<span class="hljs-highlight  prop"><span class="hljs-keyword">new</span></span>()-&gt;<span class="hljs-highlight  prop">at</span>(<span class="hljs-string">'2020-01-20'</span>)
        )
        -&gt;<span class="hljs-highlight  prop">create</span>();
}</code></pre>
<p>With just a few lines of code, we get a lot more flexibility.</p>
<h2 id="immutable-factories"><a href="#immutable-factories" class="heading-anchor">#</a> Immutable factories</h2>
<p>Now what about that cloning earlier? Why is it important to make factories immutable? See, sometimes you need to make several models with the same factory, but with small differences. Instead of creating a new factory object for each model, you could reuse the original factory object, and only change the things you need.</p>
<p>If you're not using immutable factories though, there's a chance that you'll end up with data you didn't actually want. Take the example of the invoice payments: say we need two invoices on the same date, one paid and one pending.</p>
<pre><code class="language-php hljs php" data-lang="php">$invoiceFactory = <span class="hljs-highlight  type">InvoiceFactory</span>::<span class="hljs-highlight  prop"><span class="hljs-keyword">new</span></span>()
    -&gt;<span class="hljs-highlight  prop">expiresAt</span>(<span class="hljs-highlight  type">Carbon</span>::<span class="hljs-highlight  prop">make</span>(<span class="hljs-string">'2020-01-01'</span>));

$invoiceA = $invoiceFactory-&gt;<span class="hljs-highlight  prop">paid</span>()-&gt;<span class="hljs-highlight  prop">create</span>();
$invoiceB = $invoiceFactory-&gt;<span class="hljs-highlight  prop">create</span>();</code></pre>
<p>If our <code>paid</code> method wasn't immutable, it would mean that <code>$invoiceB</code> would also be a paid invoice! Sure, we could micro-manage every model creation, but that takes away from the flexibility of this pattern. That's why immutable functions are great: you can set up a base factory, and reuse it throughout your tests, without worrying about unintended side effects!</p>
<div class="author footnotes">
<p>I'm working on a brand new version of this series, it will contain a video course, ebook and a project built from the ground up with these principles!
</p>
<br>
<p><a class="cta cta-small cta-bold" target="_blank" rel="noopener noreferrer" href="https://laravel-beyond-crud.com/">Read more</a></p>
</div>
<hr />
<p>Built upon these two principles (configuring factories within factories and making them immutable), a lot of possibilities arise. Sure, it takes some time to actually write these factories, but they also <em>save</em> lots of time over the course of development. In my experience, they are well worth the overhead, as there's much more to gain from them compared to their cost.</p>
<p>Ever since using this pattern, I never looked back at Laravel's built-in factories. There's just too much to gain from this approach.</p>
<p>One downside I can come up with is that you'll need a little more extra code to create several models at once. If you want to, however, you can easily add a small piece of code in a base factory class such as this:</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Factory</span>
</span>{
    <span class="hljs-comment">// Concrete factory classes should add a return type </span>
    <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">create</span><span class="hljs-params">(<span class="hljs-highlight  type">array</span> $extra = [])</span></span>;

    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">times</span><span class="hljs-params">(<span class="hljs-highlight  type">int</span> $times, <span class="hljs-highlight  type">array</span> $extra = [])</span>: <span class="hljs-title">Collection</span>
    </span>{
        <span class="hljs-keyword">return</span> <span class="hljs-highlight  prop">collect</span>()
            -&gt;<span class="hljs-highlight  prop">times</span>($times)
            -&gt;<span class="hljs-highlight  prop">map</span>(<span class="hljs-highlight  keyword">fn</span>() =&gt; <span class="hljs-keyword">$this</span>-&gt;<span class="hljs-highlight  prop">create</span>($extra));
    }
}</code></pre>
<p>Also keep in mind that you can use these factories for other stuff too, not just models. I've been also using them extensively to set up <a href="/blog/laravel-beyond-crud-02-working-with-data">DTOs</a>, and sometimes even request classes.</p>
<p>I'd suggest to play around with them the next time you're in need of test factories. I can assure you they will not disappoint!</p>
 ]]></summary>

                <updated>2020-01-29T00:00:00+00:00</updated>
            </entry>
                                <entry>
                <title><![CDATA[ PHP in 2020 ]]></title>

                <link rel="alternate" href="https://stitcher.io/blog/php-in-2020"/>

                <id>https://www.stitcher.io/blog/php-in-2020</id>

                <author>
                    <name><![CDATA[ Brent Roose ]]></name>
                </author>

                <summary type="html"><![CDATA[ <p>It's no secret among web developers and programmers in general: PHP doesn't have the best reputation. Despite still being one of the most used languages to build web applications; over the years PHP has managed to get itself a reputation of messy codebases, inexperienced developers, insecure code, an inconsistent core library, and what not.</p>
<p>While many of the arguments against PHP still stand today, there's also a bright side: you <em>can</em> write clean and maintainable, fast and reliable applications in PHP.</p>
<p>In this post, I want to look at this bright side of PHP development. I want to show you that, despite its many shortcomings, PHP is a worthwhile language to learn. I want you to know that the PHP 5 era is coming to an end. That, if you want to, you can write modern and clean PHP code, and leave behind much of the mess it was 10 years ago.</p>
<p><div class="ad-container">
    <script async type="text/javascript" src="//cdn.carbonads.com/carbon.js?serve=CK7ICK3W&placement=stitcherio" id="_carbonads_js"></script>
</div>
</p>
<p>So let's look at how the language has changed, matured even, over the past few years.
I want to ask you to set aside any prejudice for just a few minutes, and possibly be surprised by what PHP is today.</p>
<p>Let's dive in.</p>
<p><div class="author">
    Noticed a tpyo? You can submit a
    <a href="https://github.com/brendt/stitcher.io" target="_blank" rel="noopener noreferrer">PR</a> to fix it.

    If you want to stay up to date about what's happening on this blog, you can follow me
    <a href="https://mobile.twitter.com/brendt_gd" target="_blank" rel="noopener noreferrer">on Twitter</a> or subscribe to my newsletter:

    <form action="https://mail.stitcher.io/subscribe/81fa83d0-4a0b-4eff-b897-f6ce51dfb7f0" method="post" class="newsletter-form">
        <label for="newsletter-email-57">Email</label>
        <input type="email" name="email" id="newsletter-email-57"/>
        <button type="submit" class="cta cta-small">Subscribe</button>
    </form>
</div>
</p>
<h2 id="history-summarized"><a href="#history-summarized" class="heading-anchor">#</a> History summarized</h2>
<p>Before diving into details, let's review how PHP, the language, is developed these days.
We're at version 7.4 now, and <a href="/blog/new-in-php-8">PHP 8</a> will be the next version after that, at the end of 2020.</p>
<p>Ever since the late 5.* era, the core team tries to keep a <a target="_blank" href="https://www.php.net/supported-versions.php">consistent yearly release cycle</a>,
and have succeeded in doing so for the past four years.</p>
<p>In general, every new release is actively supported for two years,
and gets another year of "security fixes only".
The goal is to motivate developers to stay up-to-date as much as possible:
small upgrades every year are easier than making the jump between 5.4 to 7.0, for example.</p>
<p>Lastly, PHP 5.6 was the latest 5.* release, with 7.0 being the next one.
If you want to know what happened to PHP 6, you can listen to this episode of the <a target="_blank" href="https://www.phproundtable.com/episode/what-happened-to-php-6">PHP Roundtable podcast</a>.</p>
<p>PHP's development these days is done by a group of volunteers, some of them are paid by their employers to work on the core full time. Most discussion of how the language is evolved happens on a <a target="_blank" href="https://externals.io/">mailing list</a>.</p>
<p>With all of that out of the way, let's debunk some common misconceptions about modern PHP.</p>
<h2 id="php's-type-system"><a href="#php's-type-system" class="heading-anchor">#</a> PHP's type system</h2>
<p>PHP started out as a very weakly and dynamically typed language, which had its benefits at the time. Ever since people started to use PHP for larger projects though, the shortcomings of its type system became clear, and the need for stronger type support arose.</p>
<p>Today, PHP is a rather unique language: it still allows you to write completely dynamically and weakly typed code, but also has a much stronger, opt-in type system. Combined with static analysis, tools like <a target="_blank" href="https://github.com/vimeo/psalm">Psalm</a>, <a target="_blank" href="https://github.com/phan/phan">Phan</a> and <a target="_blank" href="https://github.com/phpstan/phpstan">PHPStan</a>, you can write secure, strongly typed and statically analysed code.</p>
<p>Take, for example, a look at this snippet of PHP code, using its modern type system in full:</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-meta">&lt;?php</span>

<span class="hljs-keyword">declare</span>(<span class="hljs-highlight  type">strict_types</span>=<span class="hljs-number">1</span>);

<span class="hljs-keyword">final</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Foo</span>
</span>{
    <span class="hljs-keyword">public</span> <span class="hljs-highlight  type">int</span> $intProperty = <span class="hljs-number">2</span>;

    <span class="hljs-keyword">public</span> <span class="hljs-highlight  type">?string</span> $nullableString = <span class="hljs-keyword">null</span>;

    <span class="hljs-keyword">private</span> <span class="hljs-highlight  type">Bar</span> $bar;

    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span><span class="hljs-params">(<span class="hljs-highlight  type">Bar</span> $bar)</span> </span>{
        <span class="hljs-keyword">$this</span>-&gt;bar = $bar;
    }
    
    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">withInt</span><span class="hljs-params">(<span class="hljs-highlight  type">int</span> $value)</span>: <span class="hljs-highlight  type"><span class="hljs-title">self</span></span>
    </span>{
        $clone = <span class="hljs-keyword">clone</span> <span class="hljs-keyword">$this</span>;
    
        $clone-&gt;intProperty = $value;

        <span class="hljs-keyword">return</span> $clone;
    }
    
    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">unionTypes</span><span class="hljs-params">(<span class="hljs-highlight  type">int|float</span> $input)</span>: <span class="hljs-highlight  type"><span class="hljs-title">void</span></span>
    </span>{
        <span class="hljs-comment">// Union types will be added in PHP 8</span>
    }
}</code></pre>
<p>Truth be told, there's one important feature still missing in PHP's type system: generics. There's hope they will be added, but there's nothing concrete yet. In case of typed arrays, you'll need to rely on docblocks to get proper IDE support:</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-comment">/** <span class="hljs-doctag">@var</span> <span class="hljs-highlight  type">int[]</span> */</span>
<span class="hljs-keyword">public</span> <span class="hljs-highlight  type"><span class="hljs-keyword">array</span></span> $arrayOfInts = [];</code></pre>
<p>And while typed arrays are a common use case for generics, solveable with docblocks, there's a lot more functionality we're missing out on because they are not in the language… yet.</p>
<p><div class="sidenote">
    <p>
        Tired of managing servers?
        Check out <a href="https://gumroad.com/a/575280243" ping="https://analytics.stitcher.io/r" target="_blank" rel="noopener noreferrer">Serverless Visually Explained</a> by Matthieu Napoli and learn how to create scalable PHP applications on AWS.
    </p>
</div>
</p>
<h2 id="php's-syntax"><a href="#php's-syntax" class="heading-anchor">#</a> PHP's syntax</h2>
<p>The 7.* era has done many good things in terms of making PHP a more mature language when it comes to syntax. To illustrate this I've made a non-exhaustive list of new things in PHP.</p>
<p>Array <a href="/blog/array-destructuring-with-list-in-php">destructuring</a>:</p>
<pre><code class="language-php hljs php" data-lang="php">[$a, $b] = $array;</code></pre>
<p>The <a href="/blog/shorthand-comparisons-in-php">null coalescing</a> operator:</p>
<pre><code class="language-php hljs php" data-lang="php">$value = $object-&gt;<span class="hljs-highlight  prop">property</span> ?? <span class="hljs-string">'fallback if null'</span>;

$value = $array[<span class="hljs-string">'foo'</span>] ?? <span class="hljs-string">"fallback if key doesn't exists"</span>; </code></pre>
<p>The null coalescing assignment operator:</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">get</span><span class="hljs-params">(<span class="hljs-highlight  type">string</span> $input)</span>: <span class="hljs-title">string</span> 
</span>{
    <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;<span class="hljs-highlight  prop">cache</span>[$input] ??= <span class="hljs-keyword">$this</span>-&gt;<span class="hljs-highlight  prop">sanitize</span>($input);
}</code></pre>
<p>Array spreading:</p>
<pre><code class="language-php hljs php" data-lang="php">$a = [<span class="hljs-comment">/* … */</span>];
$b = [<span class="hljs-comment">/* … */</span>];

$mergedArray = [...$a, ...$b];</code></pre>
<p>Variadic functions:</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">get</span><span class="hljs-params">(<span class="hljs-highlight  type">Foo</span> ...$foos)</span>: <span class="hljs-title">void</span>
</span>{
    <span class="hljs-keyword">foreach</span>($foos <span class="hljs-keyword">as</span> $foo) {
        <span class="hljs-comment">// …</span>
    }
}</code></pre>
<p>Argument unpacking:</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-keyword">$this</span>-&gt;<span class="hljs-highlight  prop">get</span>(...$arrayOfFoo);</code></pre>
<p><a href="/blog/typed-properties-in-php-74">Typed properties</a>:</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-keyword">public</span> <span class="hljs-highlight  type">int</span> $intProperty;</code></pre>
<p><a href="/blog/short-closures-in-php">Arrow functions</a>, also called short closures:</p>
<pre><code class="language-php hljs php" data-lang="php">$ids = <span class="hljs-highlight  prop">array_map</span>(<span class="hljs-highlight  keyword">fn</span>(<span class="hljs-highlight  type">Post</span> $post): <span class="hljs-highlight  type">int</span> =&gt; $post-&gt;<span class="hljs-highlight  prop">id</span>, $posts);</code></pre>
<p>Generators:</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">make</span><span class="hljs-params">(<span class="hljs-highlight  type">array</span> $input)</span>: <span class="hljs-highlight  type"><span class="hljs-title">Generator</span></span>
</span>{
    <span class="hljs-keyword">foreach</span> ($input <span class="hljs-keyword">as</span> $item) {
        <span class="hljs-keyword">yield</span> <span class="hljs-keyword">$this</span>-&gt;<span class="hljs-highlight  prop">doSomethingWith</span>($item);
    }
}</code></pre>
<p>And quite a lot more. I hope that it's clear from this list that PHP is still evolving today, and you can be sure there's more good stuff to come.</p>
<h2 id="php's-performance"><a href="#php's-performance" class="heading-anchor">#</a> PHP's performance</h2>
<p>Back in the 5.* days, PHP's performance was… average at best.
With 7.0 though, large parts of PHP's core were rewritten from the ground up,
resulting in two or three times performance increases.
Furthermore, each 7.* release has had a positive impact on performance.</p>
<p>Words don't suffice though. Let's look at benchmarks.
Luckily other people have spent lots of time in benchmarking PHP performance.
I find that <a target="_blank" href="https://kinsta.com/blog/php-benchmarks/">Kinsta</a> has a good updated list.</p>
<p>The latest performance related feature is called <a href="/blog/preloading-in-php-74">preloading</a>, which basically allows you to store compiled parts of your PHP code in memory. You can look at some benchmarks <a href="/blog/php-preload-benchmarks">over here</a>.</p>
<p>When <a href="/blog/new-in-php-8">PHP 8</a> arrives, we'll also have a <a href="/blog/php-jit">JIT compiler</a> at our disposal, promising interesting performance improvements, and allowing PHP to enter new areas besides web development.</p>
<h2 id="frameworks-and-ecosystem"><a href="#frameworks-and-ecosystem" class="heading-anchor">#</a> Frameworks and ecosystem</h2>
<p>Moving on to what's done by the community <em>with</em> PHP. Let's be clear: PHP isn't just WordPress anymore, on the contrary.</p>
<p>In general there are two major web application frameworks, and a few smaller ones: <a target="_blank" href="https://symfony.com/">Symfony</a> and <a target="_blank" href="https://laravel.com/">Laravel</a>.
Sure there's also Laminas, Yii, Cake, Code Igniter etc.
— but if you want to know what modern PHP development looks like, you're good with one of the first two.</p>
<p>Both frameworks have a large ecosystem of packages and products.
Ranging from admin panels and CRMs to standalone packages, CI to profilers,
numerous services like web sockets servers, queuing managers, payment integrations;
honestly there's too much to list.</p>
<p>These frameworks are meant for actual development;
if you're instead in need of pure content management,
platforms like WordPress, CraftCMS and Statamic are improving more and more.</p>
<p>One way to measure the current state of PHP's ecosystem is to look at Packagist, the main package repository for PHP.
It has seen exponential growth.
With ±25 million downloads a day, it's fair to say that the PHP ecosystem isn't the small underdog it used to be.</p>
<p>Take a look at this graph, listing the amount of packages and versions over time.
It can also be found on <a target="_blank" href="https://packagist.org/statistics">the Packagist website</a>.</p>
<p><img src="/resources/img/blog/php-in-2020/packagist.png" srcset="/resources/img/blog/php-in-2020/packagist-2374x1011.png 2374w, /resources/img/blog/php-in-2020/packagist-1501x639.png 1501w, /resources/img/blog/php-in-2020/packagist-1061x452.png 1061w, /resources/img/blog/php-in-2020/packagist-2123x905.png 2123w, /resources/img/blog/php-in-2020/packagist-1838x783.png 1838w" sizes="" alt=""></img></p>
<p>Besides application frameworks and CMSs, we've also seen the rise of asynchronous frameworks the past years.
These are frameworks and servers, written in PHP or other languages,
that allow users to run truly asynchronous PHP code.
Some major players are <a target="_blank" href="https://www.swoole.co.uk/">Swoole</a>, <a target="_blank" href="https://amphp.org/">Amp</a> and <a target="_blank" href="https://reactphp.org/">ReactPHP</a>.</p>
<p>Since we've ventured into the async world,
stuff like web sockets and applications with lots of IO have become actually relevant in the PHP world.</p>
<p>There has also been talk on the internals mailing list to <a target="_blank" href="https://externals.io/message/102415#102415">add libuv to the core</a>.
For those unaware of libuv: it's the same library Node.js uses to allow all its asynchronicity.
Who knows? PHP 8 might be the version adding it to the core!</p>
<h2 id="in-closing"><a href="#in-closing" class="heading-anchor">#</a> In closing</h2>
<p>I hope I was able to show you that PHP has evolved tremendously over the past years, and you're perfectly able to write clean and maintainable code with it.</p>
<p>If you're interested in what PHP code looks like in the wild these days, you can check out <a target="_blank" href="https://github.com/brendt/aggregate.stitcher.io">the source code</a> of one of my own projects, as well as many <a target="_blank" href="https://spatie.be/open-source/packages">open source packages</a> we personally maintain.</p>
<p>So while the language definitely has its drawbacks and 20 years of legacy to carry with it;
I can say with confidence that I enjoy working with it.</p>
<p>In my experience, I'm able to create reliable, maintainable and quality software.
The clients I work for are happy with the end result, as am I.
While it's still possible to do lots of messed up things with PHP,
I'd say it's a great choice for web development if used wisely and correctly.</p>
<p>Don't you agree? Let me know why!
You can reach me via <a target="_blank" href="https://twitter.com/brendt_gd">Twitter</a> or <a href="mailto:brendt@stitcher.io">e-mail</a>.</p>
 ]]></summary>

                <updated>2020-01-17T00:00:00+00:00</updated>
            </entry>
                                <entry>
                <title><![CDATA[ Preloading benchmarks in PHP 7.4 ]]></title>

                <link rel="alternate" href="https://stitcher.io/blog/php-preload-benchmarks"/>

                <id>https://www.stitcher.io/blog/php-preload-benchmarks</id>

                <author>
                    <name><![CDATA[ Brent Roose ]]></name>
                </author>

                <summary type="html"><![CDATA[ <p>After writing about <a href="/blog/preloading-in-php-74">how preloading works</a>, it's time to measure its impact in practice.
Before diving into results, we need to make sure we're all on the same page: what we're measuring, and what not.</p>
<p>Because I want to know whether preloading will have a practical impact on my projects, I'll be running benchmarks on a real project, on the homepage of my hobby project <a target="_blank" href="https://aggregate.stitcher.io/">aggregate.stitcher.io</a>.</p>
<p>This project is a Laravel project, and will obviously do some database calls, view rendering etc. I want to make clear that these benchmarks don't tell anything about the performance of Laravel projects, they <em>only</em> measure the relative performance gains preloading could offer.</p>
<p>Let me repeat that again, just to make sure no one draws wrong conclusions from these results: my benchmarks will <em>only</em> measure whether preloading has a relative performance impact compared to not using it. These benchmarks say nothing about how much performance gain there is. This will depend on several variables: server load, the code being executed, what page you're on, etc.</p>
<p>Let's set the stage.</p>
<p><div class="ad-container">
    <script async type="text/javascript" src="//cdn.carbonads.com/carbon.js?serve=CK7ICK3W&placement=stitcherio" id="_carbonads_js"></script>
</div>
</p>
<h2 id="preloading-setup"><a href="#preloading-setup" class="heading-anchor">#</a> Preloading Setup</h2>
<p>Since I don't want to measure how much exactly will be gained by using preloading or not, I decided to run these benchmarks on my local machine, using Apache Bench. I'll be sending 5000 requests, with 50 concurrent requests at a time.
The webserver is nginx, using php-fpm. Because there were some bugs in early versions of preloading, we're only able to successfully run our benchmarks as early as PHP 7.4.2.</p>
<p>I'll be benchmarking three scenarios: one with preloading disabled, one with all Laravel and application code preloaded, and one with an optimised list of preloaded classes. The reasoning for that latter one is that preloading also comes with a memory overhead, if we're only preloading "hot" classes — classes that are used very often — we might be able to find a sweet spot between performance gain and memory usage.</p>
<h2 id="preloading-disabled"><a href="#preloading-disabled" class="heading-anchor">#</a> Preloading disabled</h2>
<p>We start php-fpm and run our benchmarks:</p>
<pre><code class="language-vim hljs vim" data-lang="vim">./php-<span class="hljs-number">7</span>_4_2/sbin/php-fpm --nodaemonize

<span class="hljs-keyword">ab</span> -n <span class="hljs-number">5000</span> -<span class="hljs-keyword">c</span> <span class="hljs-number">50</span> -<span class="hljs-keyword">l</span> http://aggregate.stitcher.io.tes<span class="hljs-variable">t:8080</span>/discover</code></pre>
<p>These were the results: we're able to process <code>64.79</code> requests per second, with an average time of <code>771ms</code> per request.
This is our baseline scenario, we can compare the next results to this one.</p>
<h2 id="naive-preloading"><a href="#naive-preloading" class="heading-anchor">#</a> Naive preloading</h2>
<p>Next we'll preload all Laravel and application code. This is the naive approach, because we're never using all Laravel classes in a request. Because we're preloading many more files than strictly needed, we'll have to pay a penalty for it. In this case 1165 classes and their dependencies were preloaded, resulting in a total of 1366 functions and 1256 classes to be preloaded.</p>
<p>Like I mentioned before,you can read that info from <code><span class="hljs-highlight  prop">opcache_get_status</span></code>:</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-highlight  prop">opcache_get_status</span>()[<span class="hljs-string">'preload_statistics'</span>];</code></pre>
<p>Another metric we get from <code><span class="hljs-highlight  prop">opcache_get_status</span></code> is the memory used for preloaded scripts. In this case it's 17.43 MB.
Even though we're preloading more code than we actually need, naive preloading already has a positive impact on performance.</p>
<table>
<tr class="table-head">
    <td></td>
    <td class="right">requests/second</td>
    <td class="right">time per request</td>
</tr>
<tr>
    <td>No preloading</td>
    <td class="right">64.79</td>
    <td class="right">771ms</td>
</tr>
<tr>
    <td>Naive preloading</td>
    <td class="right">79.69</td>
    <td class="right">627ms</td>
</tr>
</table>
<p>You can already see a performance gain: we're able to manage more requests per second, and the average amount of time to process one request has dropped with ±20%.</p>
<p><div class="author">
    Noticed a tpyo? You can submit a
    <a href="https://github.com/brendt/stitcher.io" target="_blank" rel="noopener noreferrer">PR</a> to fix it.

    If you want to stay up to date about what's happening on this blog, you can follow me
    <a href="https://mobile.twitter.com/brendt_gd" target="_blank" rel="noopener noreferrer">on Twitter</a> or subscribe to my newsletter:

    <form action="https://mail.stitcher.io/subscribe/81fa83d0-4a0b-4eff-b897-f6ce51dfb7f0" method="post" class="newsletter-form">
        <label for="newsletter-email-59">Email</label>
        <input type="email" name="email" id="newsletter-email-59"/>
        <button type="submit" class="cta cta-small">Subscribe</button>
    </form>
</div>
</p>
<h2 id="optimised"><a href="#optimised" class="heading-anchor">#</a> Optimised</h2>
<p>Finally we want to compare the performance gain when we're using an optimised preloading list. For testing purposes I started the server without preloading enabled, and dumped all classes that are used within that request:</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-highlight  prop">get_declared_classes</span>();</code></pre>
<p>Next, I only preloaded these classes, 427 in total. Together with all their dependencies this makes for 643 classes and 1034 functions being preloaded, occupying about 11.76 MB of memory.</p>
<p>These are the benchmark results for this setup:</p>
<table>
<tr class="table-head">
    <td></td>
    <td class="right">requests/second</td>
    <td class="right">time per request</td>
</tr>
<tr>
    <td>No preloading</td>
    <td class="right">64.79</td>
    <td class="right">771ms</td>
</tr>
<tr>
    <td>Naive preloading</td>
    <td class="right">79.69</td>
    <td class="right">627ms</td>
</tr>
<tr>
    <td>Optimised preloading</td>
    <td class="right">86.12</td>
    <td class="right">580ms</td>
</tr>
</table>
<p>That's around a 25% performance gain compared to not using preloading, and an 8% gain compared to using the naive approach. There's a flaw with this setup though, since I generated an optimised preloading list for one specific page. In practice you would probably need to preload more code, if you want all your pages covered.</p>
<p>Another approach could be to monitor which classes are loaded how many times over the period of several hours or days on your production server, and compile a preload list based on those metrics
It's safe to say that preloading — even using the naive "preload everything" approach — has a positive performance impact, also on real-life projects built upon a full-blown framework.
How much exactly there is to be gained will depend on your code, your server and the framework you're using. I'd say go try it out!</p>
 ]]></summary>

                <updated>2020-01-10T00:00:00+00:00</updated>
            </entry>
                                <entry>
                <title><![CDATA[ 08. View models ]]></title>

                <link rel="alternate" href="https://stitcher.io/blog/laravel-beyond-crud-08-view-models"/>

                <id>https://www.stitcher.io/blog/laravel-beyond-crud-08-view-models</id>

                <author>
                    <name><![CDATA[ Brent Roose ]]></name>
                </author>

                <summary type="html"><![CDATA[ <div class="author footnotes">
<p>I'm working on a brand new version of this series, it will contain a video course, ebook and a project built from the ground up with these principles!
</p>
<br>
<p><a class="cta cta-small cta-bold" target="_blank" rel="noopener noreferrer" href="https://laravel-beyond-crud.com/">Read more</a></p>
</div>
<p>In this chapter of my <a href="/blog/laravel-beyond-crud">Laravel beyond CRUD</a> series, we take a deep dive in the application layer. A major trend throughout the series is to keep code clean, concise and manageable. This chapter won't be any different, as we'll look at how to keep controllers clean and to-the-point.</p>
<p>The pattern we'll use to help us is called the view model pattern.
As its name suggests, these classes are models to your view files; they are responsible for providing data to a view, which would otherwise come directly from the controller or the domain model.
In addition, they allow a better separation of concerns, and provide more flexibility for the developer.</p>
<p>In essence, view models are simple classes that take some data,
and transform it into something usable for the view.
In this chapter I'll show you the basic principles of the pattern,
we'll take a look at how they integrate in Laravel projects,
and finally I'll show you how we use the pattern in one of our projects.</p>
<p>Let's get started.</p>
<p>Say you have a form to create a blog post with a category.
You'll need a way to fill the select box in the view with category options.
The controller has to provide those.</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">create</span><span class="hljs-params">()</span>
</span>{
    <span class="hljs-keyword">return</span> <span class="hljs-highlight  prop">view</span>(<span class="hljs-string">'blog.form'</span>, [
        <span class="hljs-string">'categories'</span> =&gt; <span class="hljs-highlight  type">Category</span>::<span class="hljs-highlight  prop">all</span>(),
    ]);
}</code></pre>
<p>The above example works for the create method,
but let's not forget we should also be able to edit existing posts.</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">edit</span><span class="hljs-params">(<span class="hljs-highlight  type">Post</span> $post)</span>
</span>{
    <span class="hljs-keyword">return</span> <span class="hljs-highlight  prop">view</span>(<span class="hljs-string">'blog.form'</span>, [
        <span class="hljs-string">'post'</span> =&gt; $post,
        <span class="hljs-string">'categories'</span> =&gt; <span class="hljs-highlight  type">Category</span>::<span class="hljs-highlight  prop">all</span>(),
    ]);
}</code></pre>
<p>Next there's a new business requirement:
users should be restricted in which categories they are allowed to post in.
In other words: the category selection should be restricted based on the user.</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-keyword">return</span> <span class="hljs-highlight  prop">view</span>(<span class="hljs-string">'blog.form'</span>, [
    <span class="hljs-string">'categories'</span> =&gt; <span class="hljs-highlight  type">Category</span>::<span class="hljs-highlight  prop">allowedForUser</span>(
        <span class="hljs-highlight  prop">current_user</span>()
    )-&gt;<span class="hljs-highlight  prop">get</span>(),
]);</code></pre>
<p>This approach doesn't scale.
You'll have to change code both in the <code>create</code> and <code>edit</code> method.
Can you imagine what happens when you need to add tags to a post?
Or if there's another special admin form for creating and editing posts?</p>
<p>The next solution is to have the post model itself provide the categories, like so:</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Post</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Model</span>
</span>{
    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">allowedCategories</span><span class="hljs-params">()</span>: <span class="hljs-title">Collection</span> 
    </span>{
        <span class="hljs-keyword">return</span> <span class="hljs-highlight  type">Category</span>::<span class="hljs-highlight  prop">query</span>()
            -&gt;<span class="hljs-highlight  prop">allowedForUser</span>(<span class="hljs-highlight  prop">current_user</span>())
            -&gt;<span class="hljs-highlight  prop">get</span>();
    }
}</code></pre>
<p>There are numerous reasons why this is a bad idea, though it happens often in Laravel projects.
Let's focus on the most relevant problem for our case: it still allows for duplication.</p>
<p>Say there's a new model <code>News</code> which also needs the same category selection.
This again causes duplication, but on the model level instead of in the controllers.</p>
<p>Another option is to put the method on the <code>User</code> model.
This makes the most sense, but also makes maintenance harder.
Imagine we're using tags as mentioned before.
They don't rely on the user.
Now we need to get the categories from the user model, and tags from somewhere else.</p>
<p>I hope it's clear that using models as data providers for views also isn't the silver bullet.</p>
<p>In summary, wherever you try to get the categories from,
there always seems to be some code duplication.
This makes it harder to maintain and reason about the code.</p>
<p>This is where view models come into play.
They encapsulate all this logic so that it can be reused in different places.
They have one responsibility and one responsibility only: providing the view with the correct data.</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PostFormViewModel</span>
</span>{
    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span><span class="hljs-params">(<span class="hljs-highlight  type">User</span> $user, <span class="hljs-highlight  type">Post</span> $post = null)</span> 
    </span>{
        <span class="hljs-keyword">$this</span>-&gt;user = $user;
        <span class="hljs-keyword">$this</span>-&gt;post = $post;
    }
    
    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">post</span><span class="hljs-params">()</span>: <span class="hljs-title">Post</span>
    </span>{
        <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;post ?? <span class="hljs-keyword">new</span> <span class="hljs-highlight  type">Post</span>();
    }
    
    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">categories</span><span class="hljs-params">()</span>: <span class="hljs-title">Collection</span>
    </span>{
        <span class="hljs-keyword">return</span> <span class="hljs-highlight  type">Category</span>::<span class="hljs-highlight  prop">allowedForUser</span>(<span class="hljs-keyword">$this</span>-&gt;user)-&gt;<span class="hljs-highlight  prop">get</span>();
    }
}</code></pre>
<p>Let's name a few key features of such a class:</p>
<ul>
<li>All dependencies are injected, this gives the most flexibility to the outside context.</li>
<li>The view model exposes some methods that can be used by the view.</li>
<li>There will either be a new or existing post provided by the <code>post</code> method,
depending on whether you are creating or editing a post.</li>
</ul>
<p>This is what the controller looks like:</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PostsController</span>
</span>{
    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">create</span><span class="hljs-params">()</span>
    </span>{
        $viewModel = <span class="hljs-keyword">new</span> <span class="hljs-highlight  type">PostFormViewModel</span>(
            <span class="hljs-highlight  prop">current_user</span>()
        );
        
        <span class="hljs-keyword">return</span> <span class="hljs-highlight  prop">view</span>(<span class="hljs-string">'blog.form'</span>, <span class="hljs-highlight  prop">compact</span>(<span class="hljs-string">'viewModel'</span>));
    }
    
    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">edit</span><span class="hljs-params">(Post $post)</span>
    </span>{
        $viewModel = <span class="hljs-keyword">new</span> <span class="hljs-highlight  type">PostFormViewModel</span>(
            <span class="hljs-highlight  prop">current_user</span>(), 
            $post
        );
    
        <span class="hljs-keyword">return</span> <span class="hljs-highlight  prop">view</span>(<span class="hljs-string">'blog.form'</span>, <span class="hljs-highlight  prop">compact</span>(<span class="hljs-string">'viewModel'</span>));
    }
}</code></pre>
<p>And finally, it can be used in the view like so:</p>
<pre><code class="language-txt">&lt;<span class="hljs-highlight  keyword">input</span> <span class="hljs-highlight  prop">value</span>=&quot;{{ $viewModel-&gt;<span class="hljs-highlight  prop">post</span>()-&gt;title }}&quot; /&gt;
&lt;<span class="hljs-highlight  keyword">input</span> <span class="hljs-highlight  prop">value</span>=&quot;{{ $viewModel-&gt;<span class="hljs-highlight  prop">post</span>()-&gt;body }}&quot; /&gt;

&lt;<span class="hljs-highlight  keyword">select</span>&gt;
    @<span class="hljs-highlight  type">foreach</span> ($viewModel-&gt;<span class="hljs-highlight  prop">categories</span>() as $category)
        &lt;<span class="hljs-highlight  keyword">option</span> <span class="hljs-highlight  prop">value</span>=&quot;{{ $category-&gt;id }}&quot;&gt;
            {{ $category-&gt;name }}
        &lt;/<span class="hljs-highlight  keyword">option</span>&gt;
    @<span class="hljs-highlight  type">endforeach</span>
&lt;/<span class="hljs-highlight  keyword">select</span>&gt;</code></pre>
<h2 id="view-models-in-laravel"><a href="#view-models-in-laravel" class="heading-anchor">#</a> View models in Laravel</h2>
<p>The previous example showed a simple class with some methods as our view model.
This is sufficient to use the pattern,
but within Laravel projects there are a few more niceties we can add.</p>
<p>For example, you can pass a view model directly to the <code>view</code> function if the view model implements <code>Arrayable</code>.</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">create</span><span class="hljs-params">()</span>
</span>{
    $viewModel = <span class="hljs-keyword">new</span> <span class="hljs-highlight  type">PostFormViewModel</span>(
        <span class="hljs-highlight  prop">current_user</span>()
    );
    
    <span class="hljs-keyword">return</span> <span class="hljs-highlight  prop">view</span>(<span class="hljs-string">'blog.form'</span>, $viewModel);
}</code></pre>
<p>The view can now directly use the view model's properties like <code>$post</code> and <code>$categories</code>.
The previous example now looks like this:</p>
<pre><code class="language-txt">&lt;<span class="hljs-highlight  keyword">input</span> <span class="hljs-highlight  prop">value</span>=&quot;{{ $post-&gt;title }}&quot; /&gt;
&lt;<span class="hljs-highlight  keyword">input</span> <span class="hljs-highlight  prop">value</span>=&quot;{{ $post-&gt;body }}&quot; /&gt;

&lt;<span class="hljs-highlight  keyword">select</span>&gt;
    @<span class="hljs-highlight  type">foreach</span> ($categories as $category)
        &lt;<span class="hljs-highlight  keyword">option</span> <span class="hljs-highlight  prop">value</span>=&quot;{{ $category-&gt;id }}&quot;&gt;
            {{ $category-&gt;name }}
        &lt;/<span class="hljs-highlight  keyword">option</span>&gt;
    @<span class="hljs-highlight  type">endforeach</span>
&lt;/<span class="hljs-highlight  keyword">select</span>&gt;</code></pre>
<p>You can also return the view model itself as JSON data, by implementing <code>Responsable</code>.
This can be useful when you're saving the form via an AJAX call,
and want to repopulate it with up-to-date data after the call is done.</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">update</span><span class="hljs-params">(<span class="hljs-highlight  type">Request</span> $request, <span class="hljs-highlight  type">Post</span> $post)</span>
</span>{
    <span class="hljs-comment">// Update the post…</span>

    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-highlight  type">PostFormViewModel</span>(
        <span class="hljs-highlight  prop">current_user</span>(),
        $post
    );
}</code></pre>
<p>You might see a similarity between view models and Laravel resources.
Remember that resources map one-to-one on a model, whereas view models may provide whatever data they want.</p>
<p>In our projects, we're actually using resources and view models combined:</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PostViewModel</span>
</span>{
    <span class="hljs-comment">// …</span>
    
    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">values</span><span class="hljs-params">()</span>: <span class="hljs-title">array</span>
    </span>{
        <span class="hljs-keyword">return</span> <span class="hljs-highlight  type">PostResource</span>::<span class="hljs-highlight  prop">make</span>(
            <span class="hljs-keyword">$this</span>-&gt;post ?? <span class="hljs-keyword">new</span> <span class="hljs-highlight  type">Post</span>()
        )-&gt;<span class="hljs-highlight  prop">resolve</span>();
    }
}</code></pre>
<p>Finally, in this project we're working with Vue form components, which require JSON data.
We've made an abstraction that provides this JSON data instead of objects or arrays,
when calling the magic getter:</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ViewModel</span>
</span>{
    <span class="hljs-comment">// …</span>
    
    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__get</span><span class="hljs-params">($name)</span>: ?<span class="hljs-title">string</span>
    </span>{
        $name = <span class="hljs-highlight  type">Str</span>::<span class="hljs-highlight  prop">camel</span>($name);
    
        <span class="hljs-comment">// Some validation…</span>
    
        $values = <span class="hljs-keyword">$this</span>-&gt;{$name}();
    
        <span class="hljs-keyword">if</span> (! <span class="hljs-highlight  prop">is_string</span>($values)) {
            <span class="hljs-keyword">return</span> <span class="hljs-highlight  prop">json_encode</span>($values);
        }
    
        <span class="hljs-keyword">return</span> $values;
    }
}</code></pre>
<p>Instead of calling the view model methods, we can call their properties and get JSON back.</p>
<pre><code class="language-txt">&lt;<span class="hljs-highlight  keyword">select-field</span>
    <span class="hljs-highlight  prop">label</span>=&quot;{{ __('Post category') }}&quot;
    <span class="hljs-highlight  prop">name</span>=&quot;post_category_id&quot;
    :<span class="hljs-highlight  prop">options</span>=&quot;{{ $postViewModel-&gt;post_categories }}&quot;
&gt;&lt;/<span class="hljs-highlight  keyword">select-field</span>&gt;</code></pre>
<h2 id="wait,-what-about-view-composers?"><a href="#wait,-what-about-view-composers?" class="heading-anchor">#</a> Wait, what about view composers?</h2>
<p>You might be thinking there's some overlap with Laravel's view composers, but don't be mistaken. The Laravel documentation explains view composers like so:</p>
<blockquote>
<p>View composers are callbacks or class methods that are called when a view is rendered.  If you have data that you want to be bound to a view each time that view is rendered, a view composer can help you organize that logic into a single location.</p>
</blockquote>
<p>View composers are registered like this (the example is taken from the <a href="https://laravel.com/docs/6.x/views#view-composers">Laravel docs</a>):</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ViewComposerServiceProvider</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">ServiceProvider</span>
</span>{
    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">boot</span><span class="hljs-params">()</span>
    </span>{
        <span class="hljs-highlight  type">View</span>::<span class="hljs-highlight  prop">composer</span>(
            <span class="hljs-string">'profile'</span>, <span class="hljs-highlight  type">ProfileComposer</span>::class
        );

        <span class="hljs-highlight  type">View</span>::<span class="hljs-highlight  prop">composer</span>(<span class="hljs-string">'dashboard'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">($view)</span> </span>{
            <span class="hljs-comment">// …</span>
        });
    }
    
    <span class="hljs-comment">// …</span>
}</code></pre>
<p>As you can see, you can both use a class and a closure which you can use to add variables to a view.</p>
<p>Here's how view composers are used in controllers.</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ProfileController</span>
</span>{
    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">index</span><span class="hljs-params">()</span>
    </span>{
        <span class="hljs-keyword">return</span> <span class="hljs-highlight  prop">view</span>(<span class="hljs-string">'profile'</span>);
    }
}</code></pre>
<p>Can you see them? Nope, of course not: view composers are registered somewhere in the global state,
and you don't know which variables are available to the view, without that implicit knowledge.</p>
<p>Now I <em>know</em> that this isn't a problem in small projects.
When you're the only developer and have 20 controllers and maybe 20 view composers,
it'll all fit in your head.</p>
<p>But what about the kind of projects we're writing about in this series? When you're working with several developers, in a codebase that counts thousands upon thousands lines of code, it won't all fit in your head anymore - certainly not on that scale. What's more, we haven't even considered your colleagues and the difficulties they will face, individually and as a team!</p>
<p>That's why the view model pattern is the preferred approach. It makes clear from the controller itself what variables are available to the view. On top of that, you can re-use the same view model for multiple contexts.</p>
<div class="author footnotes">
<p>I'm working on a brand new version of this series, it will contain a video course, ebook and a project built from the ground up with these principles!
</p>
<br>
<p><a class="cta cta-small cta-bold" target="_blank" rel="noopener noreferrer" href="https://laravel-beyond-crud.com/">Read more</a></p>
</div>
<p>One last benefit — one you might not have thought about —<br />
is that we can pass data into the view model explicitly.
If you want to use a route argument or bound model to determine data passed to the view,
it is done explicitly.</p>
<p>In conclusion: managing global state is a pain in large applications,
especially when you're working with multiple developers on the same project.
Also remember that just because two means have the same end result,
that doesn't mean that they are the same!</p>
 ]]></summary>

                <updated>2019-12-07T00:00:00+00:00</updated>
            </entry>
                                <entry>
                <title><![CDATA[ Upgrade to PHP 7.4 with Homebrew on Mac ]]></title>

                <link rel="alternate" href="https://stitcher.io/blog/php-74-upgrade-mac"/>

                <id>https://www.stitcher.io/blog/php-74-upgrade-mac</id>

                <author>
                    <name><![CDATA[ Brent Roose ]]></name>
                </author>

                <summary type="html"><![CDATA[ <p><div class="sidenote">
    <p>
        Tired of managing servers?
        Check out <a href="https://gumroad.com/a/575280243" ping="https://analytics.stitcher.io/r" target="_blank" rel="noopener noreferrer">Serverless Visually Explained</a> by Matthieu Napoli and learn how to create scalable PHP applications on AWS.
    </p>
</div>
</p>
<h2 id="upgrading-with-homebrew"><a href="#upgrading-with-homebrew" class="heading-anchor">#</a> Upgrading with Homebrew</h2>
<p>Start by making sure brew is up-to-date:</p>
<pre><code class="language-bash hljs bash" data-lang="bash">brew update</code></pre>
<p>Next, upgrade PHP:</p>
<pre><code class="language-bash hljs bash" data-lang="bash">brew upgrade php</code></pre>
<p>Check the current version by running <code>php -v</code>:</p>
<pre><code class="language-bash hljs bash" data-lang="bash">php -v</code></pre>
<p>Restart Nginx or Apache:</p>
<pre><code class="language-bash hljs bash" data-lang="bash">sudo nginx -s reload</code></pre>
<pre><code class="language-bash hljs bash" data-lang="bash">sudo apachectl restart</code></pre>
<p>And make sure that your local web server also uses PHP 7.4 by visiting this script:</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-comment"># index.php, accessible to your web server</span>

phpinfo(); <span class="hljs-keyword">die</span>();</code></pre>
<p>The version should show <code>7.4.x</code>.</p>
<p>Note: if you're using Laravel Valet, please keep on reading,
you need some extra steps in order for the web server to properly work.</p>
<h2 id="valet"><a href="#valet" class="heading-anchor">#</a> Valet</h2>
<p>If you're using Laravel Valet, you should do the following steps to upgrade it:</p>
<pre><code class="language-bash hljs bash" data-lang="bash">composer global update</code></pre>
<p>Now run <code>valet install</code>:</p>
<pre><code class="language-bash hljs bash" data-lang="bash">valet install</code></pre>
<h2 id="extensions"><a href="#extensions" class="heading-anchor">#</a> Extensions</h2>
<p>Homebrew doesn't support the installation of PHP extensions anymore, you should use pecl instead.
I personally use Imagick, Redis and Xdebug.</p>
<p>They can be installed like so:</p>
<pre><code class="language-bash hljs bash" data-lang="bash">pecl install imagick
pecl install redis
pecl install xdebug</code></pre>
<p>You can run <code>pecl list</code> to see which extensions are installed:</p>
<pre><code class="language-bash hljs bash" data-lang="bash">pecl list

<span class="hljs-comment"># Installed packages, channel pecl.php.net:</span>
<span class="hljs-comment"># =========================================</span>
<span class="hljs-comment"># Package Version State</span>
<span class="hljs-comment"># imagick 3.4.4   stable</span>
<span class="hljs-comment"># redis   5.1.1   stable</span>
<span class="hljs-comment"># xdebug  2.8.0   stable</span></code></pre>
<p>You can search for other extensions using <code>pecl search</code>:</p>
<pre><code class="language-bash hljs bash" data-lang="bash">pecl search pdf

<span class="hljs-comment"># Retrieving data...0%</span>
<span class="hljs-comment"># ..</span>
<span class="hljs-comment"># Matched packages, channel pecl.php.net:</span>
<span class="hljs-comment"># =======================================</span>
<span class="hljs-comment"># Package Stable/(Latest) Local</span>
<span class="hljs-comment"># pdflib  4.1.2 (stable)        Creating PDF on the fly with the PDFlib library</span></code></pre>
<p>Make sure to restart your web server after installing new packages:</p>
<pre><code class="language-bash hljs bash" data-lang="bash">sudo nginx -s reload</code></pre>
<pre><code class="language-bash hljs bash" data-lang="bash">sudo apachectl restart</code></pre>
<p>If you're using Laravel Valet, you should restart it as well.</p>
<pre><code class="language-bash hljs bash" data-lang="bash">valet restart</code></pre>
<p>Make sure all extensions are correctly installed and loaded by checking both your PHP webserver and CLI installs:</p>
<pre><code class="language-bash hljs bash" data-lang="bash">php -i | grep redis</code></pre>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-highlight  prop">var_dump</span>(<span class="hljs-highlight  prop">extension_loaded</span>(<span class="hljs-string">'redis'</span>));</code></pre>
<p>If extensions aren't properly loaded, there are two easy fixes.</p>
<p>First, make sure the extensions are added in the correct ini file. You can run <code>php --ini</code> to know which file is loaded:</p>
<pre><code class="language-groovy hljs groovy" data-lang="groovy">Configuration File (php.ini) <span class="hljs-string">Path:</span> <span class="hljs-highlight  blue"><span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/etc/</span>php<span class="hljs-regexp">/7.4&lt;/</span>hljs&gt;
Loaded Configuration <span class="hljs-string">File:</span>         <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/etc/</span>php<span class="hljs-regexp">/7.4/</span>php.ini
Scan <span class="hljs-keyword">for</span> additional .ini files <span class="hljs-string">in:</span> <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/etc/</span>php<span class="hljs-regexp">/7.4/</span>conf.d
Additional .ini files <span class="hljs-string">parsed:</span>      <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/etc/</span>php<span class="hljs-regexp">/7.4/</span>conf.d/ext-opcache.ini,
<span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/etc/</span>php<span class="hljs-regexp">/7.4/</span>conf.d/php-memory-limits.ini</code></pre>
<p>Now check the ini file:</p>
<pre><code class="language-ini hljs ini" data-lang="ini"><span class="hljs-attr">extension</span>=<span class="hljs-string">"redis.so"</span>
<span class="hljs-attr">extension</span>=<span class="hljs-string">"imagick.so"</span>
<span class="hljs-attr">extension</span>=<span class="hljs-string">"xdebug.so"</span></code></pre>
<p>Note that if you're testing installed extensions via the CLI, you don't need to restart nginx, apache or Valet.</p>
<p>The second thing you can do, if you're updating from an older PHP version which also used pecl to install extension; is to reinstall every extension individually.</p>
<pre><code class="language-bash hljs bash" data-lang="bash">pecl uninstall imagick
pecl install imagick</code></pre>
<h2 id="last-step"><a href="#last-step" class="heading-anchor">#</a> Last step</h2>
<p>Finally you should test and upgrade your projects for <a href="/blog/new-in-php-74">PHP 7.4 compatibility</a>.</p>
 ]]></summary>

                <updated>2019-11-28T00:00:00+00:00</updated>
            </entry>
                                <entry>
                <title><![CDATA[ What&#039;s new in PHP 7.4 ]]></title>

                <link rel="alternate" href="https://stitcher.io/blog/new-in-php-74"/>

                <id>https://www.stitcher.io/blog/new-in-php-74</id>

                <author>
                    <name><![CDATA[ Brent Roose ]]></name>
                </author>

                <summary type="html"><![CDATA[ <h1 id="what's-new-in-php-7.4"><a href="#what's-new-in-php-7.4" class="heading-anchor">#</a> What's new in PHP 7.4</h1>
<p>PHP 7.4 is the latest stable version of PHP. It was released on November 28, 2019 and it's the last version before <a href="/blog/new-in-php-8">PHP 8</a>. It brings lots of new features, syntax additions and fixes. In this post you'll find a list with everything that's new and changed to help you prepare for the upgrade. Let's start though with a few highlights, included in PHP 7.4:</p>
<ul>
<li>
<a href="#arrow-functions-rfc">Arrow functions</a> for cleaner one-liner functions</li>
<li>
<a href="#preloading-rfc">Preloading</a> to improve performance</li>
<li>
<a href="#typed-properties-rfc">Typed properties</a> in classes</li>
<li>
<a href="#improved-type-variance-rfc">Improved type variance</a>
</li>
<li>The <a href="#null-coalescing-assignment-operator-rfc">null coalescing assignment operator</a> as a shorthand</li>
<li>
<a href="#foreign-function-interface-rfc">FFI</a> for better extension development in PHP</li>
<li>Underscores can be used to <a href="#numeric-literal-separator-rfc">format numeric values</a>
</li>
<li>Spread operator <a href="#array-spread-operator-rfc">in arrays</a>
</li>
<li>And more, you can read about it here</li>
</ul>
<p><div class="ad-container">
    <script async type="text/javascript" src="//cdn.carbonads.com/carbon.js?serve=CK7ICK3W&placement=stitcherio" id="_carbonads_js"></script>
</div>
</p>
<h2 id="new-features"><a href="#new-features" class="heading-anchor">#</a> New features</h2>
<p>PHP 7.4 comes with a remarkable amount of new features. We'll start with a list of all new features, and then look at changes and deprecations.</p>
<p>A note before we dive in though: if you're still on a lower version of PHP,
you'll also want to read what's <a href="/blog/new-in-php-73">new in PHP 7.3</a>.</p>
<hr />
<h3 id="arrow-functions-rfc"><a href="#arrow-functions-rfc" class="heading-anchor">#</a> Arrow functions <small><a target="_blank" href="https://wiki.php.net/rfc/arrow_functions_v2">rfc</a></small></h3>
<p>Arrow functions, also called "short closures", allow for less verbose one-liner functions.</p>
<p>While you'd previously write this:</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-highlight  prop">array_map</span>(<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">(<span class="hljs-highlight  type">User</span> $user)</span> </span>{ 
    <span class="hljs-keyword">return</span> $user-&gt;id; 
}, $users)</code></pre>
<p>You can now write this:</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-highlight  prop">array_map</span>(<span class="hljs-highlight  keyword">fn</span> (<span class="hljs-highlight  type">User</span> $user) <span class="hljs-highlight  keyword">=&gt;</span> $user-&gt;id, $users)</code></pre>
<p>There are a few notes about arrow functions:</p>
<ul>
<li>They can always access the parent scope, there's no need for the <code>use</code> keyword.</li>
<li>
<code>$this</code> is available just like normal closures.</li>
<li>Arrow functions may only contain one expression, which is also the return statement.</li>
</ul>
<p>You can read about them in depth <a href="/blog/short-closures-in-php">here</a>.</p>
<hr />
<p><div class="sidenote">
    <p>
        Tired of managing servers?
        Check out <a href="https://gumroad.com/a/575280243" ping="https://analytics.stitcher.io/r" target="_blank" rel="noopener noreferrer">Serverless Visually Explained</a> by Matthieu Napoli and learn how to create scalable PHP applications on AWS.
    </p>
</div>
</p>
<hr />
<h3 id="typed-properties-rfc"><a href="#typed-properties-rfc" class="heading-anchor">#</a> Typed properties <small><a target="_blank" href="https://wiki.php.net/rfc/typed_properties_v2">rfc</a></small></h3>
<p>Class variables can be type hinted:</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span>
</span>{
    <span class="hljs-keyword">public</span> <span class="hljs-highlight  type">string</span> $name;
    
    <span class="hljs-keyword">public</span> <span class="hljs-highlight  type">?Foo</span> $foo;
}</code></pre>
<p>There's lots to tell about this feature, so I wrote a <a href="/blog/typed-properties-in-php-74">dedicated post</a> about them.</p>
<hr />
<h3 id="improved-type-variance-rfc"><a href="#improved-type-variance-rfc" class="heading-anchor">#</a> Improved type variance <small><a target="_blank" href="https://wiki.php.net/rfc/covariant-returns-and-contravariant-parameters">rfc</a></small></h3>
<p>I also wrote about PHP's type system in <a href="/blog/what-php-can-be">the past</a>,
so it's good to see some improvements are actually arriving in PHP's core.</p>
<p>Type variance is another topic worth its <a href="/blog/liskov-and-type-safety">own blog post</a>,
but in short: you'll be able use covariant return types –</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ParentType</span> </span>{}
<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ChildType</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">ParentType</span> </span>{}

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span>
</span>{
    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">covariantReturnTypes</span><span class="hljs-params">()</span>: <span class="hljs-title">ParentType</span>
    </span>{ <span class="hljs-comment">/* … */</span> }
}

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">B</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">A</span>
</span>{
    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">covariantReturnTypes</span><span class="hljs-params">()</span>: <span class="hljs-title">ChildType</span>
    </span>{ <span class="hljs-comment">/* … */</span> }
}</code></pre>
<p>– and contravariant arguments.</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span>
</span>{
    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">contraVariantArguments</span><span class="hljs-params">(<span class="hljs-highlight  type">ChildType</span> $type)</span>
    </span>{ <span class="hljs-comment">/* … */</span> }
}

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">B</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">A</span>
</span>{
    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">contraVariantArguments</span><span class="hljs-params">(<span class="hljs-highlight  type">ParentType</span> $type)</span>
    </span>{ <span class="hljs-comment">/* … */</span> }
}</code></pre>
<p><div class="author">
    Noticed a tpyo? You can submit a
    <a href="https://github.com/brendt/stitcher.io" target="_blank" rel="noopener noreferrer">PR</a> to fix it.

    If you want to stay up to date about what's happening on this blog, you can follow me
    <a href="https://mobile.twitter.com/brendt_gd" target="_blank" rel="noopener noreferrer">on Twitter</a> or subscribe to my newsletter:

    <form action="https://mail.stitcher.io/subscribe/81fa83d0-4a0b-4eff-b897-f6ce51dfb7f0" method="post" class="newsletter-form">
        <label for="newsletter-email-62">Email</label>
        <input type="email" name="email" id="newsletter-email-62"/>
        <button type="submit" class="cta cta-small">Subscribe</button>
    </form>
</div>
</p>
<h3 id="null-coalescing-assignment-operator-rfc"><a href="#null-coalescing-assignment-operator-rfc" class="heading-anchor">#</a> Null coalescing assignment operator <small><a target="_blank" href="https://wiki.php.net/rfc/null_coalesce_equal_operator">rfc</a></small></h3>
<p>Next is the null coalescing assignment operator, a shorthand for null coalescing operations. Instead of doing this:</p>
<pre><code class="language-php hljs php" data-lang="php">$data[<span class="hljs-string">'date'</span>] = $data[<span class="hljs-string">'date'</span>] ?? <span class="hljs-keyword">new</span> <span class="hljs-highlight  type">DateTime</span>();</code></pre>
<p>You can do this:</p>
<pre><code class="language-php hljs php" data-lang="php">$data[<span class="hljs-string">'date'</span>] ??= <span class="hljs-keyword">new</span> <span class="hljs-highlight  type">DateTime</span>();</code></pre>
<p>You can read more about this operator in my post about <a href="/blog/shorthand-comparisons-in-php">PHP shorthands</a>.</p>
<hr />
<h3 id="array-spread-operator-rfc"><a href="#array-spread-operator-rfc" class="heading-anchor">#</a> Array spread operator <small><a target="_blank" href="https://wiki.php.net/rfc/spread_operator_for_array">rfc</a></small></h3>
<p>Next up, it's now possible to use the spread operator in arrays:</p>
<pre><code class="language-php hljs php" data-lang="php">$arrayA = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>];

$arrayB = [<span class="hljs-number">4</span>, <span class="hljs-number">5</span>];

$result = [<span class="hljs-number">0</span>, ...$arrayA, ...$arrayB, <span class="hljs-number">6</span> ,<span class="hljs-number">7</span>];

<span class="hljs-comment">// [0, 1, 2, 3, 4, 5, 6, 7]</span></code></pre>
<p>Note that this only works with arrays with numerical keys, as of PHP 8.1 it's also possible to <a href="/blog/new-in-php-81#array-unpacking-with-string-keys-rfc">unpack arrays with string keys</a>.</p>
<hr />
<h3 id="numeric-literal-separator-rfc"><a href="#numeric-literal-separator-rfc" class="heading-anchor">#</a> Numeric Literal Separator <small><a target="_blank" href="https://wiki.php.net/rfc/numeric_literal_separator">rfc</a></small></h3>
<p>PHP 7.4 allows for underscores to be used to visually separate numeric values.
It looks like this:</p>
<pre><code class="language-php hljs php" data-lang="php">$unformattedNumber = <span class="hljs-number">107925284.88</span>;

$formattedNumber = <span class="hljs-highlight  numeric"><span class="hljs-number">107</span>_925_284<span class="hljs-number">.88</span></span>;</code></pre>
<p>The underscores are simply ignored by the engine.</p>
<hr />
<h3 id="foreign-function-interface-rfc"><a href="#foreign-function-interface-rfc" class="heading-anchor">#</a> Foreign function interface <small><a target="_blank" href="https://wiki.php.net/rfc/ffi">rfc</a></small></h3>
<p>Moving on to some more core-level features: foreign function interface or "FFI" in short, allows us to call C code from userland.
This means that PHP extensions could be written in pure PHP and loaded via composer.</p>
<p>It should be noted though that this is a complex topic.
You still need C knowledge to be able to properly use this feature.</p>
<hr />
<h3 id="preloading-rfc"><a href="#preloading-rfc" class="heading-anchor">#</a> Preloading <small><a target="_blank" href="https://wiki.php.net/rfc/preload">rfc</a></small></h3>
<p>Another lower-level feature is preloading.
It's is an amazing addition to PHP's core,
which can result in some significant performance improvements.</p>
<p>In short: if you're using a framework,
its files have to be loaded and linked on every request.
Preloading allows the server to load PHP files in memory on startup,
and have them permanently available to all subsequent requests.</p>
<p>The performance gain comes of course with a cost:
if the source of preloaded files are changed, the server has to be restarted.</p>
<p>Do you want to know more? I wrote a dedicated post about <a href="/blog/preloading-in-php-74">setting up and using preloading</a> and have also done some <a href="/blog/php-preload-benchmarks">preloading benchmarks</a>.</p>
<hr />
<h3 id="custom-object-serialization-rfc"><a href="#custom-object-serialization-rfc" class="heading-anchor">#</a> Custom object serialization <small><a target="_blank" href="https://wiki.php.net/rfc/custom_object_serialization">rfc</a></small></h3>
<p>Two new magic methods have been added: <code>__serialize</code> and <code>__unserialize</code>.
The difference between these methods and <code>__sleep</code> and <code>__wakeup</code> is discussed in the RFC.</p>
<hr />
<h3 id="reflection-for-references-rfc"><a href="#reflection-for-references-rfc" class="heading-anchor">#</a> Reflection for references <small><a target="_blank" href="https://wiki.php.net/rfc/reference_reflection">rfc</a></small></h3>
<p>Libraries like Symfony's var dumper rely heavily on the reflection API to reliably dump a variable.
Previously it wasn't possible to properly reflect references,
resulting in these libraries relying on hacks to detect them.</p>
<p>PHP 7.4 adds the <code>ReflectionReference</code> class which solves this issue.</p>
<hr />
<h3 id="weak-references-rfc"><a href="#weak-references-rfc" class="heading-anchor">#</a> Weak references <small><a target="_blank" href="https://wiki.php.net/rfc/weakrefs">rfc</a></small></h3>
<p>Weak references are references to objects, which don't prevent them from being destroyed.</p>
<hr />
<h3 id="mb_str_split-added-rfc"><a href="#mb_str_split-added-rfc" class="heading-anchor">#</a> <code>mb_str_split</code> added <small><a target="_blank" href="https://wiki.php.net/rfc/mb_str_split">rfc</a></small></h3>
<p>This function provides the same functionality as <code>str_split</code>, but on multi-byte strings.</p>
<hr />
<h3 id="password-hashing-registry-rfc"><a href="#password-hashing-registry-rfc" class="heading-anchor">#</a> Password Hashing Registry <small><a target="_blank" href="https://wiki.php.net/rfc/password_registry">rfc</a></small></h3>
<p>Internal changes have been made to how hashing libraries are used, so that it's easier for userland to use them.</p>
<p>More specifically, a new function <code>password_algos</code> has been added which returns a list of all registered password algorithms.</p>
<p>The RFC was a little unclear about the benefits, luckily Sara was able to provide <a target="_blank" href="https://www.reddit.com/r/PHP/comments/e4uqha/whats_new_in_php_74/f9gafhv/">some more context</a>:</p>
<blockquote>
<p>It means that ext/sodium (or anyone really) can register password hashing algorithms dynamically. The upshot of which is that argon2i and argon2id will be more commonly available moving forward</p>
</blockquote>
<hr />
<h2 id="changes-and-deprecations"><a href="#changes-and-deprecations" class="heading-anchor">#</a> Changes and deprecations</h2>
<p>Besides new features, there are also lots of changes to the language. Most of these changes are non-breaking, though some might have an effect on your code bases.</p>
<p>Note that deprecation warnings aren't per definition "breaking", but merely a notice to the developer that functionality will be removed or changed in the future. It would be good not to ignore deprecation warnings, and to fix them right away; as it will make the upgrade path for PHP 8.0 more easy.</p>
<hr />
<h3 id="left-associative-ternary-operator-deprecation-rfc"><a href="#left-associative-ternary-operator-deprecation-rfc" class="heading-anchor">#</a> Left-associative ternary operator deprecation <small><a target="_blank" href="https://wiki.php.net/rfc/ternary_associativity">rfc</a></small></h3>
<p>The ternary operator has <a href="/blog/shorthand-comparisons-in-php#ternary-operator">some weird quirks</a> in PHP.
This RFC adds a deprecation warning for nested ternary statements.
In PHP 8, this deprecation will be converted to a compile time error.</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-number">1</span> ? <span class="hljs-number">2</span> : <span class="hljs-number">3</span> ? <span class="hljs-number">4</span> : <span class="hljs-number">5</span>;   <span class="hljs-comment">// deprecated</span>
(<span class="hljs-number">1</span> ? <span class="hljs-number">2</span> : <span class="hljs-number">3</span>) ? <span class="hljs-number">4</span> : <span class="hljs-number">5</span>; <span class="hljs-comment">// ok</span></code></pre>
<hr />
<h3 id="exceptions-allowed-in-__tostring-rfc"><a href="#exceptions-allowed-in-__tostring-rfc" class="heading-anchor">#</a> Exceptions allowed in <code>__toString</code> <small><a target="_blank" href="https://wiki.php.net/rfc/tostring_exceptions">rfc</a></small></h3>
<p>Previously, exceptions could not be thrown in <code>__toString</code>.
They were prohibited because of a workaround for some old core error handling mechanisms,
but Nikita pointed out that this "solution" didn't actually solve the problem it tried to address.</p>
<p>This behaviour is now changed, and exceptions can be thrown from <code>__toString</code>.</p>
<hr />
<h3 id="concatenation-precedence-rfc"><a href="#concatenation-precedence-rfc" class="heading-anchor">#</a> Concatenation precedence <small><a target="_blank" href="https://wiki.php.net/rfc/concatenation_precedence">rfc</a></small></h3>
<p>If you'd write something like this:</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-keyword">echo</span> <span class="hljs-string">"sum: "</span> . $a + $b;</code></pre>
<p>PHP would previously interpret it like this:</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-keyword">echo</span> (<span class="hljs-string">"sum: "</span> . $a) + $b;</code></pre>
<p>PHP 8 will make it so that it's interpreted like this:</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-keyword">echo</span> <span class="hljs-string">"sum: "</span> . ($a + $b);</code></pre>
<p>PHP 7.4 adds a deprecation warning when encountering an unparenthesized expression containing a <code>.</code> before a <code>+</code> or <code>-</code> sign.</p>
<hr />
<h3 id="array_merge-without-arguments-upgrading"><a href="#array_merge-without-arguments-upgrading" class="heading-anchor">#</a> <code>array_merge</code> without arguments <small><a target="_blank" href="https://github.com/php/php-src/blob/PHP-7.4/UPGRADING#L276">upgrading</a></small></h3>
<p>Since the addition of the spread operator, there might be cases where you'd want to use <code>array_merge</code> like so:</p>
<pre><code class="language-php hljs php" data-lang="php">$merged = <span class="hljs-highlight  prop">array_merge</span>(...$arrayOfArrays);</code></pre>
<p>To support the edge case where <code>$arrayOfArrays</code> would be empty, both <code>array_merge</code> and <code>array_merge_recursive</code> now allow an empty parameter list.
An empty array will be returned if no input was passed.</p>
<hr />
<h3 id="curly-brackets-for-array-and-string-access-rfc"><a href="#curly-brackets-for-array-and-string-access-rfc" class="heading-anchor">#</a> Curly brackets for array and string access <small><a target="_blank" href="https://wiki.php.net/rfc/deprecate_curly_braces_array_access">rfc</a></small></h3>
<p>It was possible to access arrays and string offsets using curly brackets:</p>
<pre><code class="language-php hljs php" data-lang="php">$array{<span class="hljs-number">1</span>};
$string{<span class="hljs-number">3</span>};</code></pre>
<p>This has been deprecated.</p>
<hr />
<h3 id="invalid-array-access-notices-rfc"><a href="#invalid-array-access-notices-rfc" class="heading-anchor">#</a> Invalid array access notices <small><a target="_blank" href="https://wiki.php.net/rfc/notice-for-non-valid-array-container">rfc</a></small></h3>
<p>If you were to use the array access syntax on, say, an integer; PHP would previously return <code>null</code>.
As of PHP 7.4, a notice will be emitted.</p>
<pre><code class="language-php hljs php" data-lang="php">$i = <span class="hljs-number">1</span>;

$i[<span class="hljs-number">0</span>]; <span class="hljs-comment">// Notice</span></code></pre>
<hr />
<h3 id="proc_open-improvements-upgrading"><a href="#proc_open-improvements-upgrading" class="heading-anchor">#</a> <code>proc_open</code> improvements <small><a target="_blank" href="https://github.com/php/php-src/blob/PHP-7.4/UPGRADING#L319">upgrading</a></small></h3>
<p>Changes were made to <code>proc_open</code> so that it can execute programs without going through a shell. This is done by passing an array instead of a string for the command.</p>
<hr />
<h3 id="strip_tags-also-accepts-arrays-upgrading"><a href="#strip_tags-also-accepts-arrays-upgrading" class="heading-anchor">#</a> <code>strip_tags</code> also accepts arrays <small><a target="_blank" href="https://github.com/php/php-src/blob/PHP-7.4/UPGRADING#L259">upgrading</a></small></h3>
<p>You used to only be able to strip multiple tags like so:</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-highlight  prop">strip_tags</span>($string, <span class="hljs-string">'&lt;a&gt;&lt;p&gt;'</span>)</code></pre>
<p>PHP 7.4 also allows the use of an array:</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-highlight  prop">strip_tags</span>($string, [<span class="hljs-string">'a'</span>, <span class="hljs-string">'p'</span>])</code></pre>
<hr />
<h3 id="ext-hash-always-enabled-rfc"><a href="#ext-hash-always-enabled-rfc" class="heading-anchor">#</a> <code>ext-hash</code> always enabled <small><a target="_blank" href="https://wiki.php.net/rfc/permanent_hash_ext">rfc</a></small></h3>
<p>This extension is now permanently available in all PHP installations.</p>
<hr />
<h3 id="pear-not-enabled-by-default-externals"><a href="#pear-not-enabled-by-default-externals" class="heading-anchor">#</a> PEAR not enabled by default <small><a target="_blank" href="https://externals.io/message/103977">externals</a></small></h3>
<p>Because PEAR isn't actively maintained anymore, the core team decided to remove its default installation with PHP 7.4.</p>
<hr />
<h3 id="several-small-deprecations-rfc"><a href="#several-small-deprecations-rfc" class="heading-anchor">#</a> Several small deprecations <small><a target="_blank" href="https://wiki.php.net/rfc/deprecations_php_7_4">rfc</a></small></h3>
<p>This RFC bundles lots of small deprecations, each with their own vote.
Be sure to read a more detailed explanation on the RFC page, though here's a list of deprecated things:</p>
<ul>
<li>The <code>real</code> type</li>
<li>Magic quotes legacy</li>
<li>
<code>array_key_exists()</code> with objects</li>
<li>
<code>FILTER_SANITIZE_MAGIC_QUOTES</code> filter</li>
<li>Reflection <code>export()</code> methods</li>
<li>
<code>mb_strrpos()</code> with encoding as 3rd argument</li>
<li>
<code>implode()</code> parameter order mix</li>
<li>Unbinding <code>$this</code> from non-static closures</li>
<li>
<code>hebrevc()</code> function</li>
<li>
<code>convert_cyr_string()</code> function</li>
<li>
<code>money_format()</code> function</li>
<li>
<code>ezmlm_hash()</code> function</li>
<li>
<code>restore_include_path()</code> function</li>
<li>
<code>allow_url_include</code> ini directive</li>
</ul>
<hr />
<h3 id="other-changes-upgrading"><a href="#other-changes-upgrading" class="heading-anchor">#</a> Other changes <small><a target="_blank" href="https://github.com/php/php-src/blob/PHP-7.4/UPGRADING">upgrading</a></small></h3>
<p>You should always take a look at the full <a target="_blank" href="https://github.com/php/php-src/blob/PHP-7.4/UPGRADING">UPGRADING document</a>
when upgrading PHP versions.</p>
<hr />
<p>Here are some changes highlighted:</p>
<ul>
<li>Calling <code>parent::</code> in a class without a parent is deprecated.</li>
<li>Calling <code>var_dump</code> on a <code>DateTime</code> or <code>DateTimeImmutable</code> instance will no longer
leave behind accessible properties on the object.</li>
<li>
<code>openssl_random_pseudo_bytes</code> will throw an exception in error situations.</li>
<li>Attempting to serialise a <code>PDO</code> or <code>PDOStatement</code> instance will generate
an <code>Exception</code> instead of a <code>PDOException</code>.</li>
<li>Calling <code>get_object_vars()</code> on an <code>ArrayObject</code> instance will return
the properties of the <code>ArrayObject</code> itself, and not the values of the wrapped array or object.
Note that <code>(array)</code> casts are not affected.</li>
<li>
<code>ext/wwdx</code> has been deprecated.</li>
</ul>
<hr />
<h3 id="rfc-voting-process-improvements"><a href="#rfc-voting-process-improvements" class="heading-anchor">#</a> RFC voting process improvements</h3>
<p>This is technically not an update related to PHP 7.4, though it's worth mentioning:
the voting rules for RFC's have been changed.</p>
<ul>
<li>They always need a <a target="_blank" href="https://wiki.php.net/rfc/abolish-narrow-margins">2/3 majority</a> in order to pass.</li>
<li>There are not more short voting periods, all RFCs must be open for at least <a target="_blank" href="https://wiki.php.net/rfc/abolish-short-votes">2 weeks</a>.</li>
</ul>
<hr />
<p><div class="sidenote">
    <p>
        Tired of managing servers?
        Check out <a href="https://gumroad.com/a/575280243" ping="https://analytics.stitcher.io/r" target="_blank" rel="noopener noreferrer">Serverless Visually Explained</a> by Matthieu Napoli and learn how to create scalable PHP applications on AWS.
    </p>
</div>
</p>
 ]]></summary>

                <updated>2019-11-26T00:00:00+00:00</updated>
            </entry>
                                <entry>
                <title><![CDATA[ Preloading in PHP 7.4 ]]></title>

                <link rel="alternate" href="https://stitcher.io/blog/preloading-in-php-74"/>

                <id>https://www.stitcher.io/blog/preloading-in-php-74</id>

                <author>
                    <name><![CDATA[ Brent Roose ]]></name>
                </author>

                <summary type="html"><![CDATA[ <p>With PHP 7.4, support for preloading was added, a feature that could improve the performance of your code significantly.</p>
<p>In a nutshell, this is how it works:</p>
<ul>
<li>In order to preload files, you need to write a custom PHP script</li>
<li>This script is executed once on server startup</li>
<li>All preloaded files are available in memory for all requests</li>
<li>Changes made to preloaded files won't have any effect, until the server is restarted</li>
</ul>
<p>Let's look at it in depth.</p>
<h2 id="opcache,-but-more"><a href="#opcache,-but-more" class="heading-anchor">#</a> Opcache, but more</h2>
<p>While preloading is built on top of opcache, it's not exactly the same.
Opcache will take your PHP source files, compile it to "opcodes", and store those compiled files on disk.</p>
<p>You can think of opcodes as a low-level representation of your code, that can be easily interpreted at runtime.
So opcache skips the translation step between your source files and what the PHP interpreter actually needs at runtime. A huge win!</p>
<p>But there's more to be gained. Opcached files don't know about other files. If you've got a class <code>A</code> extending from class <code>B</code>, you'd still need to link them together at runtime. Furthermore, opcache performs checks to see whether the source files were modified, and will invalidate its caches based on that.</p>
<p>So this is where preloading comes into play: it will not only compile source files to opcodes, but also link related classes, traits and interfaces together. It will then keep this "compiled" blob of runnable code — that is: code usable by the PHP interpreter — in memory.</p>
<p>When a request arrives at the server, it can now use parts of the codebase that were already loaded in memory, without any overhead.</p>
<p>So, what "parts of the codebase" are we talking about?</p>
<h2 id="preloading-in-practice"><a href="#preloading-in-practice" class="heading-anchor">#</a> Preloading in practice</h2>
<p>For preloading to work, you — developers — have to tell the server which files to load. This is done with a simple PHP script, there really isn't anything difficult to it.</p>
<p>The rules are simple:</p>
<ul>
<li>You provide a preload script and link to it in your php.ini file using <code>opcache.preload</code>
</li>
<li>Every PHP file you want to be preloaded should be passed to <code>opcache_compile_file()</code> or be required once, from within the preload script</li>
</ul>
<p>Say you want to preload a framework, Laravel for example. Your script will have to loop over all PHP files in the <code>vendor/laravel</code> directory, and include them one by one.</p>
<p>Here's how you'd link to this script in php.ini:</p>
<pre><code class="language-ini hljs ini" data-lang="ini"><span class="hljs-highlight  prop">opcache.preload</span>=/path/to/project/preload.php</code></pre>
<p>And here's a dummy implementation:</p>
<pre><code class="language-php hljs php" data-lang="php">$files = <span class="hljs-comment">/* An array of files you want to preload */</span>;

<span class="hljs-keyword">foreach</span> ($files <span class="hljs-keyword">as</span> $file) {
    <span class="hljs-highlight  prop">opcache_compile_file</span>($file);
}</code></pre>
<h3 id="warning:-can't-preload-unlinked-class"><a href="#warning:-can't-preload-unlinked-class" class="heading-anchor">#</a> Warning: Can't preload unlinked class</h3>
<p>Hang on though, there's a caveat! In order for files to be preloaded, their dependencies — interfaces, traits and parent classes — must also be preloaded.</p>
<p>If there are any problems with the class dependencies, you'll be notified of it on server start up:</p>
<pre><code class="language-txt">Can't preload unlinked class 
<span class="hljs-highlight  type">Illuminate\Database\Query\JoinClause</span>: 
Unknown parent 
<span class="hljs-highlight  type">Illuminate\Database\Query\Builder</span></code></pre>
<p>See, <code>opcache_compile_file()</code> will parse a file, but not execute it. This means that if a class has dependencies that aren't preloaded, itself can also not be preloaded.</p>
<p>This isn't a fatal problem, your server will work just fine; but you won't have all the preloaded files you actually wanted.</p>
<p>Luckily, there's a way to ensure linked files are loaded as well: instead of using <code>opcache_compile_file</code> you can use <code>require_once</code>, and let the registered autoloader (probably composer's) take care of the rest.</p>
<pre><code class="language-php hljs php" data-lang="php">$files = <span class="hljs-comment">/* All files in eg. vendor/laravel */</span>;

<span class="hljs-keyword">foreach</span> ($files <span class="hljs-keyword">as</span> $file) {
    <span class="hljs-keyword">require_once</span>($file);
}</code></pre>
<p>There are some caveats still. If you're trying to preload Laravel for example, there are some classes within the framework that have dependencies on other classes that don't exist yet. For example, the filesystem cache class <code>\Illuminate\Filesystem\Cache</code> has a dependency on <code>\League\Flysystem\Cached\Storage\AbstractCache</code>, which might not be installed in your project if you're never using filesystem caches.</p>
<p>You might run into "class not found" errors trying to preload everything. Luckily, in a default Laravel installation, there's only a handful of these classes, which can easily be ignored.
For convenience, I wrote a little <a target="_blank" href="https://github.com/brendt/laravel-preload/blob/master/preload.php">preloader class</a> to make ignoring files more easy, here's what it looks like:</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Preloader</span>
</span>{
    <span class="hljs-keyword">private</span> <span class="hljs-highlight  type"><span class="hljs-keyword">array</span></span> $ignores = [];

    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-highlight  type">int</span> $count = <span class="hljs-number">0</span>;

    <span class="hljs-keyword">private</span> <span class="hljs-highlight  type"><span class="hljs-keyword">array</span></span> $paths;

    <span class="hljs-keyword">private</span> <span class="hljs-highlight  type"><span class="hljs-keyword">array</span></span> $fileMap;

    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span><span class="hljs-params">(<span class="hljs-highlight  type">string</span> ...$paths)</span>
    </span>{
        <span class="hljs-keyword">$this</span>-&gt;paths = $paths;

        <span class="hljs-comment">// We'll use composer's classmap</span>
        <span class="hljs-comment">// to easily find which classes to autoload,</span>
        <span class="hljs-comment">// based on their filename</span>
        $classMap = <span class="hljs-keyword">require</span> <span class="hljs-keyword">__DIR__</span> . <span class="hljs-string">'/vendor/composer/autoload_classmap.php'</span>;

        <span class="hljs-keyword">$this</span>-&gt;fileMap = <span class="hljs-highlight  prop">array_flip</span>($classMap);
    }
    
    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">paths</span><span class="hljs-params">(<span class="hljs-highlight  type">string</span> ...$paths)</span>: <span class="hljs-title">Preloader</span>
    </span>{
        <span class="hljs-keyword">$this</span>-&gt;paths = <span class="hljs-highlight  prop">array_merge</span>(
            <span class="hljs-keyword">$this</span>-&gt;paths,
            $paths
        );

        <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>;
    }

    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">ignore</span><span class="hljs-params">(<span class="hljs-highlight  type">string</span> ...$names)</span>: <span class="hljs-title">Preloader</span>
    </span>{
        <span class="hljs-keyword">$this</span>-&gt;ignores = <span class="hljs-highlight  prop">array_merge</span>(
            <span class="hljs-keyword">$this</span>-&gt;ignores,
            $names
        );

        <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>;
    }

    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">load</span><span class="hljs-params">()</span>: <span class="hljs-title">void</span>
    </span>{
        <span class="hljs-comment">// We'll loop over all registered paths</span>
        <span class="hljs-comment">// and load them one by one</span>
        <span class="hljs-keyword">foreach</span> (<span class="hljs-keyword">$this</span>-&gt;paths <span class="hljs-keyword">as</span> $path) {
            <span class="hljs-keyword">$this</span>-&gt;<span class="hljs-highlight  prop">loadPath</span>(<span class="hljs-highlight  prop">rtrim</span>($path, <span class="hljs-string">'/'</span>));
        }

        $count = <span class="hljs-keyword">self</span>::$count;

        <span class="hljs-keyword">echo</span> <span class="hljs-string">"[Preloader] Preloaded {$count} classes"</span> . PHP_EOL;
    }

    <span class="hljs-keyword">private</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">loadPath</span><span class="hljs-params">(<span class="hljs-highlight  type">string</span> $path)</span>: <span class="hljs-title">void</span>
    </span>{
        <span class="hljs-comment">// If the current path is a directory,</span>
        <span class="hljs-comment">// we'll load all files in it </span>
        <span class="hljs-keyword">if</span> (<span class="hljs-highlight  prop">is_dir</span>($path)) {
            <span class="hljs-keyword">$this</span>-&gt;<span class="hljs-highlight  prop">loadDir</span>($path);

            <span class="hljs-keyword">return</span>;
        }

        <span class="hljs-comment">// Otherwise we'll just load this one file</span>
        <span class="hljs-keyword">$this</span>-&gt;<span class="hljs-highlight  prop">loadFile</span>($path);
    }

    <span class="hljs-keyword">private</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">loadDir</span><span class="hljs-params">(<span class="hljs-highlight  type">string</span> $path)</span>: <span class="hljs-title">void</span>
    </span>{
        $handle = <span class="hljs-highlight  prop">opendir</span>($path);

        <span class="hljs-comment">// We'll loop over all files and directories</span>
        <span class="hljs-comment">// in the current path,</span>
        <span class="hljs-comment">// and load them one by one</span>
        <span class="hljs-keyword">while</span> ($file = <span class="hljs-highlight  prop">readdir</span>($handle)) {
            <span class="hljs-keyword">if</span> (<span class="hljs-highlight  prop">in_array</span>($file, [<span class="hljs-string">'.'</span>, <span class="hljs-string">'..'</span>])) {
                <span class="hljs-keyword">continue</span>;
            }

            <span class="hljs-keyword">$this</span>-&gt;<span class="hljs-highlight  prop">loadPath</span>(<span class="hljs-string">"{$path}/{$file}"</span>);
        }

        <span class="hljs-highlight  prop">closedir</span>($handle);
    }

    <span class="hljs-keyword">private</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">loadFile</span><span class="hljs-params">(<span class="hljs-highlight  type">string</span> $path)</span>: <span class="hljs-title">void</span>
    </span>{
        <span class="hljs-comment">// We resolve the classname from composer's autoload mapping</span>
        $class = <span class="hljs-keyword">$this</span>-&gt;fileMap[$path] ?? <span class="hljs-keyword">null</span>;

        <span class="hljs-comment">// And use it to make sure the class shouldn't be ignored</span>
        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">$this</span>-&gt;<span class="hljs-highlight  prop">shouldIgnore</span>($class)) {
            <span class="hljs-keyword">return</span>;
        }

        <span class="hljs-comment">// Finally we require the path,</span>
        <span class="hljs-comment">// causing all its dependencies to be loaded as well</span>
        <span class="hljs-keyword">require_once</span>($path);

        <span class="hljs-keyword">self</span>::$count++;

        <span class="hljs-keyword">echo</span> <span class="hljs-string">"[Preloader] Preloaded `{$class}`"</span> . PHP_EOL;
    }

    <span class="hljs-keyword">private</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">shouldIgnore</span><span class="hljs-params">(?<span class="hljs-highlight  type">string</span> $name)</span>: <span class="hljs-title">bool</span>
    </span>{
        <span class="hljs-keyword">if</span> ($name === <span class="hljs-keyword">null</span>) {
            <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;
        }

        <span class="hljs-keyword">foreach</span> (<span class="hljs-keyword">$this</span>-&gt;ignores <span class="hljs-keyword">as</span> $ignore) {
            <span class="hljs-keyword">if</span> (<span class="hljs-highlight  prop">strpos</span>($name, $ignore) === <span class="hljs-number">0</span>) {
                <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;
            }
        }

        <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;
    }
}</code></pre>
<p>By adding this class in the same preload script, we're now able to load the whole Laravel framework like so:</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-comment">// …</span>

(<span class="hljs-keyword">new</span> <span class="hljs-highlight  type">Preloader</span>())
    -&gt;<span class="hljs-highlight  prop">paths</span>(<span class="hljs-keyword">__DIR__</span> . <span class="hljs-string">'/vendor/laravel'</span>)
    -&gt;<span class="hljs-highlight  prop">ignore</span>(
        <span class="hljs-highlight  type">\Illuminate\Filesystem\Cache</span>::class,
        <span class="hljs-highlight  type">\Illuminate\Log\LogManager</span>::class,
        <span class="hljs-highlight  type">\Illuminate\Http\Testing\File</span>::class,
        <span class="hljs-highlight  type">\Illuminate\Http\UploadedFile</span>::class,
        <span class="hljs-highlight  type">\Illuminate\Support\Carbon</span>::class,
    )
    -&gt;<span class="hljs-highlight  prop">load</span>();</code></pre>
<div class="author">
At the moment, there's <a href="https://bugs.php.net/bug.php?id=78918" target="_blank">a bug</a> in the core which prevents <code>require_once</code> from working correctly. Let's hope it'll get fixed soon.
</div>
<h2 id="does-it-work?"><a href="#does-it-work?" class="heading-anchor">#</a> Does it work?</h2>
<p>That's of course the most important question: were all files correctly loaded? You can simply test it by restarting the server, and dump the output of <code>opcache_get_status()</code> in a PHP script. You'll see it has a key called <code>preload_statistics</code>, which will list all preloaded functions, classes and scripts; as well as the memory consumed by the preloaded files.</p>
<h2 id="composer-support"><a href="#composer-support" class="heading-anchor">#</a> Composer support</h2>
<p>One promising feature is probably an automated preloading solution based on composer, which is used by most modern day PHP projects already.
People are working to add a preload configuration option in <code>composer.json</code>, which in turn will generate the preload file for you! At the moment, this feature is still a work in progress, but you can follow it <a target="_blank" href="https://github.com/composer/composer/issues/7777">here</a>.</p>
<h2 id="server-requirements"><a href="#server-requirements" class="heading-anchor">#</a> Server requirements</h2>
<p>There's two more important things to mention about the devops side when using preloading.</p>
<p>You already know that you need to specify an entry in php.ini in order for preloading to work. This means that if you're using shared hosting, you won't be able to freely configure PHP however you want.
In practice, you'll need a dedicated (virtual) server to be able to optimise the preloaded files for a single project. So keep that in mind.</p>
<p>Also remember you'll need to restart the server (<code>php-fpm</code> is sufficient if you're using it) every time you want to reload the in-memory files. This might seem obvious for most, but still worth the mention.</p>
<h2 id="performance"><a href="#performance" class="heading-anchor">#</a> Performance</h2>
<p>Now to the most important question: does preloading actually improve performance?</p>
<p>The answer is yes, of course: Ben Morel shared some benchmarks, which can be found in the same <a target="_blank" href="https://github.com/composer/composer/issues/7777#issuecomment-440268416">composer issue</a> linked to earlier.
I also did my own benchmarks within a real-life Laravel project. You can read about them <a href="/blog/php-preload-benchmarks">here</a>.</p>
<p>Interestingly enough, you could decide to only preload "hot classes" — classes that are used often in your codebase. Ben's benchmarks shows that only loading around 100 hot classes, actually yields better performance gains than preloading everything. It's a difference of a 13% and 17% performance increase.</p>
<p>Which classes should be preloaded relies of course on your specific project. It would be wise to simply preload as much as possible at the start. If you really need the few percentage increases, you would have to monitor your code while running.</p>
<p>All of this can of course also be automated, and will probably be done in the future.</p>
<p>For now, most important to remember is that composer will add support, so that you don't have to make preload files yourself, and that this feature is very easy to setup on your server, given that you've got full control over it.</p>
<p><div class="author">
    Noticed a tpyo? You can submit a
    <a href="https://github.com/brendt/stitcher.io" target="_blank" rel="noopener noreferrer">PR</a> to fix it.

    If you want to stay up to date about what's happening on this blog, you can follow me
    <a href="https://mobile.twitter.com/brendt_gd" target="_blank" rel="noopener noreferrer">on Twitter</a> or subscribe to my newsletter:

    <form action="https://mail.stitcher.io/subscribe/81fa83d0-4a0b-4eff-b897-f6ce51dfb7f0" method="post" class="newsletter-form">
        <label for="newsletter-email-64">Email</label>
        <input type="email" name="email" id="newsletter-email-64"/>
        <button type="submit" class="cta cta-small">Subscribe</button>
    </form>
</div>
</p>
<p>Will you be using preloading once PHP 7.4 arrives? Any remarks or thoughts after reading this post? Let me know via <a target="_blank" href="https://twitter.com/brendt_gd">Twitter</a> or <a href="mailto:brendt@stitcher.io">e-mail</a>.</p>
 ]]></summary>

                <updated>2019-07-05T00:00:00+00:00</updated>
            </entry>
                                <entry>
                <title><![CDATA[ Arrow functions in PHP 7.4 ]]></title>

                <link rel="alternate" href="https://stitcher.io/blog/short-closures-in-php"/>

                <id>https://www.stitcher.io/blog/short-closures-in-php</id>

                <author>
                    <name><![CDATA[ Brent Roose ]]></name>
                </author>

                <summary type="html"><![CDATA[ <p>Short closures, also called arrow functions, are a way of writing shorter functions in PHP.
This notation is useful when passing closures to functions like <code>array_map</code> or <code>array_filter</code>.</p>
<p><div class="ad-container">
    <script async type="text/javascript" src="//cdn.carbonads.com/carbon.js?serve=CK7ICK3W&placement=stitcherio" id="_carbonads_js"></script>
</div>
</p>
<p>This is what they look like:</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-comment">// A collection of Post objects</span>
$posts = [<span class="hljs-comment">/* … */</span>];

$ids = <span class="hljs-highlight  prop">array_map</span>(<span class="hljs-highlight  keyword">fn</span>($post) =&gt; $post-&gt;<span class="hljs-highlight  prop">id</span>, $posts);</code></pre>
<p>Previously, you'd had to write this:</p>
<pre><code class="language-php hljs php" data-lang="php">$ids = <span class="hljs-highlight  prop">array_map</span>(<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">($post)</span> </span>{
    <span class="hljs-keyword">return</span> $post-&gt;<span class="hljs-highlight  prop">id</span>;
}, $posts);</code></pre>
<p>Let's summarize how short closures can be used.</p>
<ul>
<li>They are available as of PHP 7.4</li>
<li>They start with the <code>fn</code> keyword</li>
<li>They can only have <em>one</em> expression, which is the return statement</li>
<li>No <code>return</code> keyword allowed</li>
<li>Arguments and return types can be type hinted</li>
</ul>
<p>A more strictly typed way of writing the example above could be this:</p>
<pre><code class="language-php hljs php" data-lang="php">$ids = <span class="hljs-highlight  prop">array_map</span>(<span class="hljs-highlight  keyword">fn</span>(<span class="hljs-highlight  type">Post</span> $post): <span class="hljs-highlight  type">int</span> =&gt; $post-&gt;<span class="hljs-highlight  prop">id</span>, $posts);</code></pre>
<p>Two more things to mention:</p>
<ul>
<li>The spread operator is also allowed</li>
<li>References are allowed, both for the arguments as the return values</li>
</ul>
<p>If you want to return a value by reference, the following syntax should be used:</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-highlight  keyword">fn</span>&amp;($x) =&gt; $x</code></pre>
<p>In short, short closures allow the same functionality you'd expect from normal closures,
with the exception of only allowing one expression.</p>
<p><div class="sidenote">
    <p>
        Tired of managing servers?
        Check out <a href="https://gumroad.com/a/575280243" ping="https://analytics.stitcher.io/r" target="_blank" rel="noopener noreferrer">Serverless Visually Explained</a> by Matthieu Napoli and learn how to create scalable PHP applications on AWS.
    </p>
</div>
</p>
<h2 id="no-multi-line"><a href="#no-multi-line" class="heading-anchor">#</a> No multi-line</h2>
<p>You read it right: short closures can only have <em>one</em> expression; that one expression may be spread over multiple lines for formatting, but it must always be one expression.</p>
<p>The reasoning is as follows: the goal of short closures is to reduce verbosity.
<code>fn</code> is of course shorter than <code>function</code> in all cases.
Nikita Popov, the creator of the RFC, however argued that if you're dealing with multi-line functions,
there is less to be gained by using short closures.</p>
<p>After all, multi-line closures are by definition already more verbose;
so being able to skip two keywords (<code>function</code> and <code>return</code>) wouldn't make much of a difference.</p>
<p>Whether you agree with this sentiment is up to you.
While I can think of many one-line closures in my projects,
there are also plenty of multi-line ones, and I'll personally miss the short syntax in those cases.</p>
<p>There's hope though: it is possible to add multi-line short closures in the future,
but that's an RFC on its own.</p>
<p><div class="author">
    Noticed a tpyo? You can submit a
    <a href="https://github.com/brendt/stitcher.io" target="_blank" rel="noopener noreferrer">PR</a> to fix it.

    If you want to stay up to date about what's happening on this blog, you can follow me
    <a href="https://mobile.twitter.com/brendt_gd" target="_blank" rel="noopener noreferrer">on Twitter</a> or subscribe to my newsletter:

    <form action="https://mail.stitcher.io/subscribe/81fa83d0-4a0b-4eff-b897-f6ce51dfb7f0" method="post" class="newsletter-form">
        <label for="newsletter-email-66">Email</label>
        <input type="email" name="email" id="newsletter-email-66"/>
        <button type="submit" class="cta cta-small">Subscribe</button>
    </form>
</div>
</p>
<h2 id="values-from-outer-scope"><a href="#values-from-outer-scope" class="heading-anchor">#</a> Values from outer scope</h2>
<p>Another significant difference between short and normal closures is that the short ones don't
require the <code>use</code> keyword to be able to access data from the outer scope.</p>
<pre><code class="language-php hljs php" data-lang="php">$modifier = <span class="hljs-number">5</span>;

<span class="hljs-highlight  prop">array_map</span>(<span class="hljs-highlight  keyword">fn</span>($x) =&gt; $x * $modifier, $numbers);</code></pre>
<p>It's important to note that you're not allowed to modify variables from the outer scope.
Values are bound by value and not by reference.
This means that you <em>could</em> change <code>$modifier</code> within the short closure,
though it wouldn't have effect on the <code>$modifier</code> variable in the outer scope.</p>
<p>One exception is of course the <code>$this</code> keyword, which acts exactly the same as normal closures:</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-highlight  prop">array_map</span>(<span class="hljs-highlight  keyword">fn</span>($x) =&gt; $x * <span class="hljs-keyword">$this</span>-&gt;modifier, $numbers);</code></pre>
<h2 id="future-possibilities"><a href="#future-possibilities" class="heading-anchor">#</a> Future possibilities</h2>
<p>I already mentioned multi-line short closures, which is still a future possibility.
Another idea floating around is allowing the short closure syntax in classes, for example for getters and setters:</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Post</span> </span>{
    <span class="hljs-keyword">private</span> $title;
 
    <span class="hljs-highlight  keyword">fn</span> <span class="hljs-highlight  prop">getTitle</span>() =&gt; <span class="hljs-keyword">$this</span>-&gt;title;
}</code></pre>
<p>All in all, short closures are a welcome feature, though there is still room for improvement.
The biggest one probably being multi-line short closures.</p>
<p>Do you have any thoughts you'd like to share?
Feel free to send a <a target="_blank" href="https://twitter.com/brendt_gd">tweet</a> or an <a href="mailto:brendt@stitcher.io">email</a> my way!</p>
 ]]></summary>

                <updated>2019-05-02T00:00:00+00:00</updated>
            </entry>
                                <entry>
                <title><![CDATA[ Typed properties in PHP 7.4 ]]></title>

                <link rel="alternate" href="https://stitcher.io/blog/typed-properties-in-php-74"/>

                <id>https://www.stitcher.io/blog/typed-properties-in-php-74</id>

                <author>
                    <name><![CDATA[ Brent Roose ]]></name>
                </author>

                <summary type="html"><![CDATA[ <p>Typed class properties have been added in <abbr>PHP 7.4</abbr> and provide a major improvement to <abbr>PHP</abbr>'s type system.
These changes are fully opt-in and non breaking to previous versions.</p>
<p>In this post we'll look at the feature in-depth, but first let's start by summarising the most important points:</p>
<ul>
<li>They are available as of <abbr>PHP 7.4</abbr>, which is scheduled to be released in November of 2019</li>
<li>They are only available in classes and require an access modifier: <code>public</code>, <code>protected</code> or <code>private</code>; or <code>var</code>
</li>
<li>All types are allowed, except <code>void</code> and <code>callable</code>
</li>
</ul>
<p><div class="ad-container">
    <script async type="text/javascript" src="//cdn.carbonads.com/carbon.js?serve=CK7ICK3W&placement=stitcherio" id="_carbonads_js"></script>
</div>
</p>
<p>This is what they look like in action:</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Foo</span>
</span>{
    <span class="hljs-keyword">public</span> <span class="hljs-highlight  type">int</span> $a;

    <span class="hljs-keyword">public</span> <span class="hljs-highlight  type">?string</span> $b = <span class="hljs-string">'foo'</span>;

    <span class="hljs-keyword">private</span> <span class="hljs-highlight  type">Foo</span> $prop;

    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">static</span> <span class="hljs-highlight  type">string</span> $static = <span class="hljs-string">'default'</span>;
}</code></pre>
<p>If you're unsure about the added benefit of types, I'd recommend you reading <a href="/blog/tests-and-types">this post</a> first.</p>
<h2 id="uninitialized"><a href="#uninitialized" class="heading-anchor">#</a> Uninitialized</h2>
<p>Before looking at the fun stuff, there's an important aspect about typed properties that's essential to talk about first.</p>
<p>Despite what you might think on first sight, the following code is valid:</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Foo</span>
</span>{
    <span class="hljs-keyword">public</span> <span class="hljs-highlight  type">int</span> $bar;
}

$foo = <span class="hljs-keyword">new</span> <span class="hljs-highlight  type">Foo</span>;</code></pre>
<p>Even though the value of <code>$bar</code> isn't an integer after making an object of <code>Foo</code>, <abbr>PHP</abbr> will only throw an error when <code>$bar</code> is accessed:</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-highlight  prop">var_dump</span>($foo-&gt;bar);

<span class="hljs-highlight  full error">Fatal error: Uncaught Error: Typed property Foo::$bar 
must not be accessed before initialization</span></code></pre>
<p>As you can read from the error message,
there's a new kind of "variable state": uninitialized.</p>
<p>If <code>$bar</code> didn't have a type, its value would simply be <code>null</code>.
Types can be nullable though, so it's not possible to determine whether a typed nullable property was set, or simply forgotten.
That's why "uninitialized" was added.</p>
<p>There are four important things to remember about uninitialized:</p>
<ul>
<li>You cannot read from uninitialized properties, doing so will result in a fatal error.</li>
<li>Because uninitialized state is checked when accessing a property, you're able to create an object with an uninitialized property, even though its type is non-nullable.</li>
<li>You can write to an uninitialized property before reading from it.</li>
<li>Using <code>unset</code> on a typed property will make it uninitialized, while unsetting an untyped property will make it <code>null</code>.</li>
</ul>
<p>Especially note that the following code, where an uninitialised, non-nullable property is set after constructing the object, is valid</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Foo</span>
</span>{
    <span class="hljs-keyword">public</span> <span class="hljs-highlight  type">int</span> $a;
}

$foo = <span class="hljs-keyword">new</span> <span class="hljs-highlight  type">Foo</span>;

$foo-&gt;a = <span class="hljs-number">1</span>;</code></pre>
<p>While uninitialized state is only checked when reading the value of a property, type validation is done when writing to it.
This means that you can be sure that no invalid type will ever end up as a property's value.</p>
<p><div class="sidenote">
    <p>
        Tired of managing servers?
        Check out <a href="https://gumroad.com/a/575280243" ping="https://analytics.stitcher.io/r" target="_blank" rel="noopener noreferrer">Serverless Visually Explained</a> by Matthieu Napoli and learn how to create scalable PHP applications on AWS.
    </p>
</div>
</p>
<h2 id="defaults-and-constructors"><a href="#defaults-and-constructors" class="heading-anchor">#</a> Defaults and constructors</h2>
<p>Let's take a closer look at how typed values can be initialized.
In case of scalar types, it's possible to provide a default value:</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Foo</span>
</span>{
    <span class="hljs-keyword">public</span> <span class="hljs-highlight  type">int</span> $bar = <span class="hljs-number">4</span>;
    
    <span class="hljs-keyword">public</span> <span class="hljs-highlight  type">?string</span> $baz = <span class="hljs-keyword">null</span>;
    
    <span class="hljs-keyword">public</span> <span class="hljs-highlight  type"><span class="hljs-keyword">array</span></span> $list = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>];
}</code></pre>
<p>Note that you can only use <code>null</code> as a default if the type is actually nullable.
This might seem obvious, but there's some legacy behaviour with parameter defaults where the following is allowed:</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">passNull</span><span class="hljs-params">(<span class="hljs-highlight  type">int</span> $i = null)</span>
</span>{ <span class="hljs-comment">/* … */</span> }

<span class="hljs-highlight  prop">passNull</span>(<span class="hljs-keyword">null</span>);</code></pre>
<p>Luckily this confusing behaviour is not allowed with typed properties.</p>
<p>Also note that it's impossible to have default values with <code>object</code> or class types.
You should use the constructor to set their defaults.</p>
<p>The obvious place to initialize typed values would of course be the constructor:</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Foo</span>
</span>{
    <span class="hljs-keyword">private</span> <span class="hljs-highlight  type">int</span> $a;

    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span><span class="hljs-params">(<span class="hljs-highlight  type">int</span> $a)</span>
    </span>{
        <span class="hljs-keyword">$this</span>-&gt;a = $a;
    }
}</code></pre>
<p>But also remember what I mentioned before: it's valid to write to an uninitialized property, outside of the constructor. As long as there are nothing is reading from a property, the uninitialized check is not performed.</p>
<h2 id="types-of-types"><a href="#types-of-types" class="heading-anchor">#</a> Types of types</h2>
<p>So what exactly can be typed and how? I already mentioned that typed properties will only work in classes (for now),
and that they need an access modifier or the <code>var</code> key word in front of them.</p>
<p>As of available types, almost all types can be used, except <code>void</code> and <code>callable</code>.</p>
<p>Because <code>void</code> means the absence of a value, it makes sense that it cannot be used to type a value.
<code>callable</code> however is a little more nuanced.</p>
<p>See, a "callable" in <abbr>PHP</abbr> can be written like so:</p>
<pre><code class="language-php hljs php" data-lang="php">$callable = [<span class="hljs-keyword">$this</span>, <span class="hljs-string">'method'</span>];</code></pre>
<p>Say you'd have the following (broken) code:</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Foo</span>
</span>{
    <span class="hljs-keyword">public</span> <span class="hljs-highlight  striped">callable</span> $callable;
    
    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span><span class="hljs-params">(<span class="hljs-highlight  striped">callable</span> $callable)</span>
    </span>{ <span class="hljs-comment">/* … */</span> }
}

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Bar</span>
</span>{
    <span class="hljs-keyword">public</span> <span class="hljs-highlight  type">Foo</span> $foo;
    
    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span><span class="hljs-params">()</span>
    </span>{
        <span class="hljs-keyword">$this</span>-&gt;foo = <span class="hljs-keyword">new</span> <span class="hljs-highlight  type">Foo</span>([<span class="hljs-keyword">$this</span>, <span class="hljs-string">'method'</span>])
    }
    
    <span class="hljs-keyword">private</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">method</span><span class="hljs-params">()</span>
    </span>{ <span class="hljs-comment">/* … */</span> }
}

$bar = <span class="hljs-keyword">new</span> <span class="hljs-highlight  type">Bar</span>;

($bar-&gt;foo-&gt;<span class="hljs-highlight  striped">callable</span>)();</code></pre>
<p>In this example, <code>$callable</code> refers to the private <code>Bar::method</code>, but is called within the context of <code>Foo</code>.
Because of this problem, it was decided not to add <code>callable</code> support.</p>
<p>It's no big deal though, because <code>Closure</code> is a valid type, which will remember the <code>$this</code> context where it was constructed.</p>
<p>With that out of the way, here's a list of all available types:</p>
<ul>
<li>bool</li>
<li>int</li>
<li>float</li>
<li>string</li>
<li>array</li>
<li>iterable</li>
<li>object</li>
<li>? (nullable)</li>
<li>self & parent</li>
<li>Classes & interfaces</li>
</ul>
<h2 id="coercion-and-strict-types"><a href="#coercion-and-strict-types" class="heading-anchor">#</a> Coercion and strict types</h2>
<p><abbr>PHP</abbr>, being the dynamic language we love and hate, will try to coerce or convert types whenever possible.
Say you pass a string where you expect an integer, <abbr>PHP</abbr> will try and convert that string automatically:</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">coerce</span><span class="hljs-params">(<span class="hljs-highlight  type">int</span> $i)</span>
</span>{ <span class="hljs-comment">/* … */</span> }

<span class="hljs-highlight  prop">coerce</span>(<span class="hljs-string">'1'</span>); <span class="hljs-comment">// 1</span></code></pre>
<p>The same principles apply to typed properties. The following code is valid and will convert <code>'1'</code> to <code>1</code>.</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Bar</span>
</span>{
    <span class="hljs-keyword">public</span> <span class="hljs-highlight  type">int</span> $i;
}

$bar = <span class="hljs-keyword">new</span> <span class="hljs-highlight  type">Bar</span>;

$bar-&gt;i = <span class="hljs-string">'1'</span>; <span class="hljs-comment">// 1</span></code></pre>
<p>If you don't like this behaviour you can disabled it by declaring strict types:</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-keyword">declare</span>(strict_types=<span class="hljs-number">1</span>);

$bar = <span class="hljs-keyword">new</span> <span class="hljs-highlight  type">Bar</span>;

$bar-&gt;i = <span class="hljs-string">'1'</span>; <span class="hljs-comment">// 1</span>

<span class="hljs-highlight  error full">Fatal error: Uncaught TypeError: 
Typed property Bar::$i must be int, string used</span></code></pre>
<h2 id="type-variance-and-inheritance"><a href="#type-variance-and-inheritance" class="heading-anchor">#</a> Type variance and inheritance</h2>
<p>Even though <abbr>PHP 7.4</abbr> introduced <a href="/blog/new-in-php-74#improved-type-variance-rfc">improved type variance</a>, typed properties are still invariant. This means that the following is not valid:</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span> </span>{}
<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">B</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">A</span> </span>{}

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Foo</span>
</span>{
    <span class="hljs-keyword">public</span> A $prop;
}

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Bar</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Foo</span>
</span>{
    <span class="hljs-keyword">public</span> <span class="hljs-highlight  striped">B</span> $prop;
}

<span class="hljs-highlight  full error text">Fatal error: Type of Bar::$prop must be A (<span class="hljs-keyword">as</span> in <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Foo</span>)</span></code></pre>
<p>If the above example doesn't seem significant, you should take a look at the following:</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Foo</span>
</span>{
    <span class="hljs-keyword">public</span> <span class="hljs-highlight  type"><span class="hljs-keyword">self</span></span> $prop;
}

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Bar</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Foo</span>
</span>{
    <span class="hljs-keyword">public</span> <span class="hljs-highlight  type"><span class="hljs-keyword">self</span></span> $prop;
}</code></pre>
<p><abbr>PHP</abbr> will replace <code>self</code> behind the scenes with the concrete class it refers to, before running the code.
This means that the same error will be thrown in this example.
The only way to handle it, is by doing the following:</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Foo</span>
</span>{
    <span class="hljs-keyword">public</span> <span class="hljs-highlight  type">Foo</span> $prop;
}

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Bar</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Foo</span>
</span>{
    <span class="hljs-keyword">public</span> <span class="hljs-highlight  type">Foo</span> $prop;
}</code></pre>
<p>Speaking of inheritance, you might find it hard to come up with any good use cases to overwrite the types of inherited properties.</p>
<p>While I agree with that sentiment, it's worth noting that it is possible to change the type of an inherited property, but only if the access modifier also changes from <code>private</code> to <code>protected</code> or <code>public</code>.</p>
<p>The following code is valid:</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Foo</span>
</span>{
    <span class="hljs-keyword">private</span> <span class="hljs-highlight  type">int</span> $prop;
}

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Bar</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Foo</span>
</span>{
    <span class="hljs-keyword">public</span> <span class="hljs-highlight  type">string</span> $prop;
}</code></pre>
<p>However, changing a type from nullable to non-nullable or reverse, is not allowed.</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Foo</span>
</span>{
    <span class="hljs-keyword">public</span> <span class="hljs-highlight  type">int</span> $a;
    <span class="hljs-keyword">public</span> <span class="hljs-highlight  type">?int</span> $b;
}

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Bar</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Foo</span>
</span>{
    <span class="hljs-keyword">public</span> <span class="hljs-highlight  striped">?int</span> $a;
    <span class="hljs-keyword">public</span> <span class="hljs-highlight  striped">int</span> $b;
}

<span class="hljs-highlight  full error text">Fatal error: Type of Bar::$a must be int (<span class="hljs-keyword">as</span> in <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Foo</span>)</span></code></pre>
<p><div class="author">
    Noticed a tpyo? You can submit a
    <a href="https://github.com/brendt/stitcher.io" target="_blank" rel="noopener noreferrer">PR</a> to fix it.

    If you want to stay up to date about what's happening on this blog, you can follow me
    <a href="https://mobile.twitter.com/brendt_gd" target="_blank" rel="noopener noreferrer">on Twitter</a> or subscribe to my newsletter:

    <form action="https://mail.stitcher.io/subscribe/81fa83d0-4a0b-4eff-b897-f6ce51dfb7f0" method="post" class="newsletter-form">
        <label for="newsletter-email-68">Email</label>
        <input type="email" name="email" id="newsletter-email-68"/>
        <button type="submit" class="cta cta-small">Subscribe</button>
    </form>
</div>
</p>
<h2 id="there's-more!"><a href="#there's-more!" class="heading-anchor">#</a> There's more!</h2>
<p>Like a said at the start of this post, typed properties are a <em>major</em> addition to <abbr>PHP</abbr>.
There's lots more to say about them. I'd suggest you reading through the <a target="_blank" href="https://wiki.php.net/rfc/typed_properties_v2"><abbr>RFC</abbr></a> to know all the neat little details.</p>
<p>If you're new to <abbr>PHP 7.4</abbr>, you probably want to read the <a href="/blog/new-in-php-74">full list</a> of changes made and features added. To be honest, it's one of the best releases in a long time, and worth your time!</p>
<p>Finally, if you have any thoughts you want to share on the topic, I'd love to hear from you!
You can reach me via <a target="_blank" href="https://twitter.com/brendt_gd">Twitter</a> or <a href="mailto:brendt@stitcher.io">e-mail</a>.</p>
<p>Until next time!</p>
 ]]></summary>

                <updated>2019-06-30T00:00:00+00:00</updated>
            </entry>
                                <entry>
                <title><![CDATA[ 07. Entering the application layer ]]></title>

                <link rel="alternate" href="https://stitcher.io/blog/laravel-beyond-crud-07-entering-the-application-layer"/>

                <id>https://www.stitcher.io/blog/laravel-beyond-crud-07-entering-the-application-layer</id>

                <author>
                    <name><![CDATA[ Brent Roose ]]></name>
                </author>

                <summary type="html"><![CDATA[ <div class="author footnotes">
<p>I'm working on a brand new version of this series, it will contain a video course, ebook and a project built from the ground up with these principles!
</p>
<br>
<p><a class="cta cta-small cta-bold" target="_blank" rel="noopener noreferrer" href="https://laravel-beyond-crud.com/">Read more</a></p>
</div>
<p>Back in chapter 1, I stated that one of the characteristics of domain oriented Laravel projects is the following:</p>
<blockquote>
<p>[…] most important is that you start thinking in groups of related business concepts, rather than in groups of code with the same technical properties.</p>
</blockquote>
<p>In other words: group your code based on what it resembles in the real world, instead of its purpose in the code base.</p>
<p>I also wrote that domain- and application code are two separate things. Moreover, applications are allowed to use
several groups of the domain at once if they need to in exposing the domain functionality to the end user.</p>
<p>But what exactly belongs in this application layer? How do we group code over there? These questions will be answered in this chapter.</p>
<p>We're entering the application layer.</p>
<h2 id="several-applications"><a href="#several-applications" class="heading-anchor">#</a> Several applications</h2>
<p>The first important thing to understand is that one project can have several applications. In fact, every Laravel project already has two by default: the HTTP- and console apps. Still, there are several more parts of your project that can be thought of as a standalone app: every third party integration, a REST API, a front-facing client portal, an admin back office, and what-not.</p>
<p>All of these can be thought of as separate applications, exposing and presenting the domain for their own unique use cases. In fact, I tend to think of the artisan console as just another one in this list: it's an application used by developers to work with and manipulate the project.</p>
<p>Since we're in web development, our main focus will probably be within HTTP-related apps though. So what's included in them? Let's have a look:</p>
<ul>
<li>Controllers</li>
<li>Requests</li>
<li>Application-specific validation rules</li>
<li>Middleware</li>
<li>Resources</li>
<li>ViewModels</li>
<li>QueryBuilders — the ones that <a target="_blank" href="https://github.com/spatie/laravel-query-builder">parse URL queries</a>
</li>
</ul>
<p>I would even argue that blade views, JavaScript- and CSS files belong within an application, and shouldn't be put aside in a <code>resources</code> folder. I realise this is a step too far for many people, but I wanted to mention it, at least.</p>
<p>Remember, an application's goal is to get the user's input, pass it to the domain and represent the output in a usable way for the user. After several chapters deep in the domain code, it shouldn't be a surprise that most of the application code is merely structural, often boring code; passing data from one point to another.</p>
<p>Nevertheless there's lots to tell about several of the concepts mentioned above: ViewModels, third party integrations, what about jobs?; we will tackle these subjects in future chapters, but for now we want to focus on the main ideas behind the application layer, and a general overview of them.</p>
<h2 id="structuring-http-applications"><a href="#structuring-http-applications" class="heading-anchor">#</a> Structuring HTTP applications</h2>
<p>There's one very important point we need to discuss before moving on: how will an HTTP application generally be structured? Should we follow Laravel's conventions, or do we need to give it some more thought?</p>
<p>Since I'm dedicating a section of a chapter to this question, you can probably guess the answer. So let's look at what Laravel would recommend you doing by default.</p>
<pre><code class="language-php hljs php" data-lang="php">App/Admin
├── Http
│   ├── Controllers
│   ├── Kernel.php
│   └── Middleware
├── Requests
├── Resources
├── Rules
└── ViewModels</code></pre>
<p>This structure is fine in small projects, but honestly it doesn't scale well. To clarify what I mean by this, I'll show you the document structure of an admin application in one of our client projects. Obviously I can't reveal too much information about this project, so I blacked out most of the class names.
Since we've been using invoicing as the example throughout this series though, I highlighted some invoice related classes within the admin application. Have a look.</p>
<p>Oh and, happy scrolling!</p>
<pre><code class="language-xml hljs xml" data-lang="xml">App/Admin
├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">purple&gt;</span>Controllers<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>
│   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>█████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>
│   │   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>███████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   │   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>████████████████████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   │   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>███████████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   │   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>██████████████████████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   │   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>███████████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   │   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>█████████████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   │   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>███████████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   │   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>███████████████████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   │   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>██████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   │   └── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>
│   │   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>████████████████████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   │   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>
│   │   │   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>████████████████████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   │   │   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>█████████████████████████████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   │   │   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>██████████████████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   │   │   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>████████████████████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   │   │   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>███████████████████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   │   │   └── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>████████████████████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   │   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>█████████████████████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   │   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>██████████████████████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   │   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>█████████████████████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   │   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>██████████████████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   │   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>█████████████████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   │   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>█████████████████████████████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   │   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>█████████████████████████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   │   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>██████████████████████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   │   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>█████████████████████████████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   │   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>████████████████████████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   │   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>█████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>
│   │   │   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>█████████████████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   │   │   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>███████████████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   │   │   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>█████████████████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   │   │   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>███████████████████████████████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   │   │   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>███████████████████████████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   │   │   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>████████████████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   │   │   └── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>█████████████████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   │   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>██████████████████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   │   └── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>█████████████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>███<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>
│   │   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>████████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   │   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>██████████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   │   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>█████████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   │   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>█████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   │   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>█████████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   │   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>██████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   │   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>██████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   │   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>██████████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   │   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>██████████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   │   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>███████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   │   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>████████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   │   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>██████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   │   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>██████████████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   │   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>████████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   │   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>██████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   │   └── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>███████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>█████████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>
│   │   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>███████████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   │   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>██████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   │   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>████████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   │   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>████████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   │   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>████████████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>
│   │   │   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>█████████████████████████████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   │   │   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>██████████████████████████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   │   │   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>█████████████████████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   │   │   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>██████████████████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   │   │   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>███████████████████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   │   │   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>███████████████████████████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   │   │   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>███████████████████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   │   │   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>████████████████████████████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   │   │   └── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>█████████████████████████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   │   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">blue&gt;</span>Invoices<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>
│   │   │   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>████████████████████████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   │   │   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>█████████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   │   │   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">blue&gt;</span>IgnoreMissedInvoicesController<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   │   │   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>██████████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   │   │   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>████████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   │   │   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">blue&gt;</span>InvoiceStatusController<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   │   │   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">blue&gt;</span>InvoicesController<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   │   │   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">blue&gt;</span>MissedInvoicesController<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   │   │   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>████████████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   │   │   └── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">blue&gt;</span>RefreshMissedInvoicesController<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   │   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>
│   │   │   └── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>█████████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   │   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>██████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   │   └── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>██████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>███████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>
│   │   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>████████████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   │   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>████████████████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   │   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>███████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   │   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>████████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   │   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>████████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   │   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>██████████████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   │   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>███████████████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   │   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>██████████████████████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   │   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>███████████████████████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   │   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>██████████████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   │   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>███████████████████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   │   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>████████████████████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   │   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>████████████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   │   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>████████████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   │   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>█████████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   │   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>██████████████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   │   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>██████████████████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   │   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>██████████████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   │   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>███████████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   │   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>██████████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   │   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>████████████████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   │   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>███████████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   │   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>█████████████████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   │   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>██████████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   │   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>███████████████████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   │   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>███████████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   │   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>███████████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   │   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>███████████████████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   │   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>████████████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   │   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>██████████████████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   │   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>███████████████████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   │   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>█████████████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   │   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>██████████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   │   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>███████████████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   │   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>█████████████████████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   │   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>███████████████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   │   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>████████████████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   │   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>████████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   │   └── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>███████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>███████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>███████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>█████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>
│   │   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>█████████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   │   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>█████████████████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   │   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>████████████████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   │   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>███████████████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   │   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>██████████████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   │   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>██████████████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   │   └── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>█████████████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>██████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>█████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>█████████████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>██████████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>
│   │   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>███████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   │   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>███████████████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   │   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>█████████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   │   └── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>█████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>███████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>
│   │   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>█████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   │   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>███████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   │   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>██████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   │   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>████████████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   │   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>██████████████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   │   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>██████████████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   │   └── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>███████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>████████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>██████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>
│   │   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>███████████████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   │   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>██████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   │   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>███████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   │   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>███████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   │   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>████████████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   │   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>█████████████████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   │   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>████████████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   │   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>█████████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   │   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>████████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   │   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>████████████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   │   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>████████████████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   │   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>███████████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   │   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>███████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   │   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>███████████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   │   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   │   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>██████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   │   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>█████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   │   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>██████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   │   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>█████████████████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   │   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>██████████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   │   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>████████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   │   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>████████████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   │   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>███████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   │   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>███████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   │   └── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>██████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>███████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>
│   │   └── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   └── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>███████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">darkblue&gt;</span>Filters<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>
│   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>████████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>███████████████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>█████████████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>██████████████████████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>██████████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>█████████████████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>██████████████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>███████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>███████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">blue&gt;</span>InvoiceMonthFilter<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">blue&gt;</span>InvoiceOfferFilter<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">blue&gt;</span>InvoiceStatusFilter<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">blue&gt;</span>InvoiceYearFilter<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>█████████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>███████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   └── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>███████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">grey&gt;</span>Middleware<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>
│   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>██████████████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>█████████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>█████████████████████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>█████████████████████████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">blue&gt;</span>EnsureValidHabitantInvoiceCollectionSettingsMiddleware<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">blue&gt;</span>EnsureValidInvoiceDraftSettingsMiddleware<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>██████████████████████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">blue&gt;</span>EnsureValidOwnerInvoiceCollectionSettingsMiddleware<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>██████████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>█████████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>█████████████████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>█████████████████████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>████████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>███████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   └── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>█████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">cyan&gt;</span>Queries<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>
│   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>██████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>███████████████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>██████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>████████████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>██████████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>██████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>██████████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>███████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>████████████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>█████████████████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>████████████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>████████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>█████████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>███████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>████████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>█████████████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>██████████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>███████████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>██████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>██████████████████████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>███████████████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>█████████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">blue&gt;</span>InvoiceCollectionIndexQuery<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">blue&gt;</span>InvoiceIndexQuery<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>█████████████████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>███████████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>███████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>████████████████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>████████████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>██████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>█████████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>█████████████████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>████████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>██████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>█████████████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>████████████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>█████████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>██████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>███████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>███████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   └── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>███████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">yellow&gt;</span>Requests<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>
│   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>█████████████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>█████████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>██████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>██████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>██████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>██████████████████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>███████████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>███████████████████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>█████████████████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">blue&gt;</span>InvoiceRequest<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>██████████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>███████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>█████████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>████████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>████████████████████████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>██████████████████████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>██████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>███████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>██████████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>███████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   └── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>████████████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">green&gt;</span>Resources<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>
│   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>███████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>██████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>███████████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>█████████████████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>███████████████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>███████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>███████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>████████████████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>██████████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>████████████████████████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>████████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>█████████████████████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>███████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>█████████████████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>████████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>████████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>█████████████████████████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>████████████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>████████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>█████████████████████████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>███████████████████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>███████████████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>████████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>█████████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>█████████████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>█████████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>█████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>█████████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>██████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>█████████████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>█████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>████████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>███████████████████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>████████████████████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>████████████████████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>█████████████████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>███████████████████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>████████████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>████████████████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>█████████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>███████████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>█████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">blue&gt;</span>Invoices<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>
│   │   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">blue&gt;</span>InvoiceCollectionDataResource<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   │   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">blue&gt;</span>InvoiceCollectionResource<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   │   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">blue&gt;</span>InvoiceDataResource<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   │   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">blue&gt;</span>InvoiceDraftResource<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   │   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">blue&gt;</span>InvoiceLineDataResource<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   │   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">blue&gt;</span>InvoiceLineResource<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   │   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">blue&gt;</span>InvoiceResource<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   │   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>██████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   │   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>█████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   │   └── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>█████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">blue&gt;</span>InvoiceIndexResource<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">blue&gt;</span>InvoiceLabelResource<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">blue&gt;</span>InvoiceMainOverviewResource<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">blue&gt;</span>InvoiceeResource<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>████████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>█████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>███████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>██████████████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>████████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>██████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>██████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>█████████████████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>██████████████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>█████████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>█████████████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>█████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>██████████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>███████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>███████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>███████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>███████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>█████████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>█████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>█████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>███████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>███████████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>██████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>██████████████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>█████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>██████████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>█████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>█████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>███████████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>████████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>████████████████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>█████████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>██████████████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>█████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>█████████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>███████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
│   └── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>█████████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
└── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">red&gt;</span>ViewModels<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>
    ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>█████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
    ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>███████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
    ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>████████████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
    ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>█████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
    ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>████████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
    ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>█████████████████████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
    ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>████████████████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
    ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>██████████████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
    ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>██████████████████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
    ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>████████████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
    ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>█████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
    ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>██████████████████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
    ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>█████████████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
    ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>█████████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
    ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>█████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
    ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
    ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>██████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
    ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>█████████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
    ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>██████████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
    ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>██████████████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
    ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>██████████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
    ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>██████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
    ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>████████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
    ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>███████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
    ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>██████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
    ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>█████████████████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
    ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>██████████████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
    ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>█████████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
    ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>█████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
    ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>██████████████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
    ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>███████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
    ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>███████████████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
    ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>████████████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>
    │   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
    │   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>█████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
    │   ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>██████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
    │   └── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>███████████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
    ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>█████████████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
    ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>███████████████████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
    ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>███████████████████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
    ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>███████████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
    ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>██████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
    ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">blue&gt;</span>InvoiceCollectionHabitantContractPreviewViewModel<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
    ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">blue&gt;</span>InvoiceCollectionOwnerContractPreviewViewModel<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
    ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">blue&gt;</span>InvoiceCollectionPreviewViewModel<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
    ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">blue&gt;</span>InvoiceDraftViewModel<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
    ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">blue&gt;</span>InvoiceIndexViewModel<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
    ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">blue&gt;</span>InvoiceLabelsViewModel<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
    ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">blue&gt;</span>InvoiceStatusViewModel<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
    ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>█████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
    ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>█████████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
    ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>██████████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
    ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>█████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
    ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>██████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
    ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>███████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
    ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>██████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
    ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>██████████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
    ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>████████████████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
    ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>██████████████████████████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
    ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
    ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>█████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
    ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>████████████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
    ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>████████████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
    ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>█████████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
    ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>██████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
    ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>████████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
    ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>██████████████████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
    ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>█████████████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
    ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>███████████████████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
    ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>██████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
    ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>███████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
    ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>██████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
    ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>████████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
    ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>████████████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
    ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>█████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
    ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>█████████████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
    ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>██████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
    ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>████████████████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
    ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>█████████████████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
    ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>█████████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
    ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>██████████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
    ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>██████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
    ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>██████████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
    ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>█████████████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
    ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>██████████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
    ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>█████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
    ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>█████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
    ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>█████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
    ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>██████████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
    ├── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>█████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php
    └── <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>█████████████████<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.php</code></pre>
<p>Hi again!</p>
<p>That was quite a lot to scroll through. I'm not kidding though - this is what one of our projects actually looked like after a year and a half of development. And keep in mind that this is <em>only</em> the admin application code, it doesn't include anything domain related.</p>
<p>So what is the core problem here? It's actually the same as with our domain code back in chapter 1: we're grouping our code based on technical properties, instead of their real-world meaning; controllers with controllers, requests with requests, view models with view models, and so on.</p>
<p>Once again a concept like invoices is spread across multiple directories, and mixed with dozens of other classes. Even with the best IDE support, it's very difficult to wrap your head around the application as a whole and there's no way to get a general overview of what's happening.</p>
<p>The solution? No surprises here, I hope; it's the same as we did with domains: group together code that belongs together. In this example, invoices:</p>
<pre><code class="language-reasonml hljs reasonml" data-lang="reasonml">Admin
└── <span class="hljs-highlight  blue">Invoices</span>
    ├── <span class="hljs-highlight  purple">Controllers</span>
    │   ├── <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">IgnoreMissedInvoicesController</span>.</span></span>php
    │   ├── <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">InvoiceStatusController</span>.</span></span>php
    │   ├── <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">InvoicesController</span>.</span></span>php
    │   ├── <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">MissedInvoicesController</span>.</span></span>php
    │   └── <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">RefreshMissedInvoicesController</span>.</span></span>php
    ├── <span class="hljs-highlight  darkblue">Filters</span>
    │   ├── <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">InvoiceMonthFilter</span>.</span></span>php
    │   ├── <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">InvoiceOfferFilter</span>.</span></span>php
    │   ├── <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">InvoiceStatusFilter</span>.</span></span>php
    │   └── <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">InvoiceYearFilter</span>.</span></span>php
    ├── <span class="hljs-highlight  grey">Middleware</span>
    │   ├── <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">EnsureValidHabitantInvoiceCollectionSettingsMiddleware</span>.</span></span>php
    │   ├── <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">EnsureValidInvoiceDraftSettingsMiddleware</span>.</span></span>php
    │   └── <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">EnsureValidOwnerInvoiceCollectionSettingsMiddleware</span>.</span></span>php
    ├── <span class="hljs-highlight  cyan">Queries</span>
    │   ├── <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">InvoiceCollectionIndexQuery</span>.</span></span>php
    │   └── <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">InvoiceIndexQuery</span>.</span></span>php
    ├── <span class="hljs-highlight  yellow">Requests</span>
    │   └── <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">InvoiceRequest</span>.</span></span>php
    ├── <span class="hljs-highlight  green">Resources</span>
    │   ├── <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">InvoiceCollectionDataResource</span>.</span></span>php
    │   ├── <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">InvoiceCollectionResource</span>.</span></span>php
    │   ├── <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">InvoiceDataResource</span>.</span></span>php
    │   ├── <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">InvoiceDraftResource</span>.</span></span>php
    │   ├── <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">InvoiceIndexResource</span>.</span></span>php
    │   ├── <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">InvoiceLabelResource</span>.</span></span>php
    │   ├── <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">InvoiceLineDataResource</span>.</span></span>php
    │   ├── <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">InvoiceLineResource</span>.</span></span>php
    │   ├── <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">InvoiceMainOverviewResource</span>.</span></span>php
    │   ├── <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">InvoiceResource</span>.</span></span>php
    │   └── <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">InvoiceeResource</span>.</span></span>php
    └── <span class="hljs-highlight  red">ViewModels</span>
        ├── <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">InvoiceCollectionHabitantContractPreviewViewModel</span>.</span></span>php
        ├── <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">InvoiceCollectionOwnerContractPreviewViewModel</span>.</span></span>php
        ├── <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">InvoiceCollectionPreviewViewModel</span>.</span></span>php
        ├── <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">InvoiceDraftViewModel</span>.</span></span>php
        ├── <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">InvoiceIndexViewModel</span>.</span></span>php
        ├── <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">InvoiceLabelsViewModel</span>.</span></span>php
        └── <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">InvoiceStatusViewModel</span>.</span></span>php</code></pre>
<p>How about that? When you're working on invoices, you've got one place to go to know what code is available to you. I tend to call these groups "application modules", or "modules" for short; and I can tell you from experience that they make life a lot easier when you're working in projects of this scale.</p>
<p>Does this mean modules should be one-to-one mapped on the domain? Definitely not! Mind you, there could be some overlap, but it's not required. For example: we've got a settings module within the admin application, which touches several domain groups at once. It wouldn't make sense to have separate settings controllers, view models etc spread across multiple modules: when we're working on settings, it's one feature on its own; not one spread across several modules just to be in sync with the domain.</p>
<p>Another question that might arise looking at this structure, is what to do with general purpose classes. Stuff like a base request class, middleware that's used everywhere,… Remember the <code>Support</code> namespace back in chapter one? That's what it is for! <code>Support</code> holds all code that should be globally accessible but it could just as well have been part of the framework.</p>
<div class="author footnotes">
<p>I'm working on a brand new version of this series, it will contain a video course, ebook and a project built from the ground up with these principles!
</p>
<br>
<p><a class="cta cta-small cta-bold" target="_blank" rel="noopener noreferrer" href="https://laravel-beyond-crud.com/">Read more</a></p>
</div>
<p>Now that you have a general overview of how we can structure applications, it's time to look at some of the patterns we use over there to make our lives easier. We'll start with that next time, when we talk about view models.</p>
 ]]></summary>

                <updated>2019-11-22T00:00:00+00:00</updated>
            </entry>
                                <entry>
                <title><![CDATA[ 06. Managing domains ]]></title>

                <link rel="alternate" href="https://stitcher.io/blog/laravel-beyond-crud-06-managing-domains"/>

                <id>https://www.stitcher.io/blog/laravel-beyond-crud-06-managing-domains</id>

                <author>
                    <name><![CDATA[ Brent Roose ]]></name>
                </author>

                <summary type="html"><![CDATA[ <div class="author footnotes">
<p>I'm working on a brand new version of this series, it will contain a video course, ebook and a project built from the ground up with these principles!
</p>
<br>
<p><a class="cta cta-small cta-bold" target="_blank" rel="noopener noreferrer" href="https://laravel-beyond-crud.com/">Read more</a></p>
</div>
<p>In the previous chapters we looked at the three core building blocks of our domains: DTOs, actions and models. Today we take a breather from the low level technical stuff, and focus on the philosophical side: how do you start using domains, how to identify them, and how to manage them in the long run?</p>
<h2 id="teamwork"><a href="#teamwork" class="heading-anchor">#</a> Teamwork</h2>
<p>At the start of this series I claimed that all paradigms and principles I wrote about would serve a purpose: to help teams of developers in keeping their larger-than-average Laravel applications maintainable over the years.</p>
<p>Some people voiced their concern: wouldn't a new directory structure and the use of complex principles make it difficult for new developers to join right away?</p>
<p>If you're a developer acquainted with default Laravel projects and with how they are taught to beginners, then it's true that you'll need to spend some time learning about how these projects are handled. However, this is not as big a deal as some people might think.</p>
<p>Imagine a project with around 100 models, 300 actions, almost 500 routes. This is the scale of projects I'm thinking about. The main difficulty in these projects is not how the code is technically structured, rather it's about the massive amount of business knowledge there is to grasp. You can't expect new developers to understand all of the problems this project is solving, just in an instant. It takes time to get to know the code, but more importantly: the business. The less magic and indirections there are, the less room there is for confusion.</p>
<p>It's important to understand the goal of the architecture I'm unfolding in this series: it's not about writing the shortest amount of characters, it's not about the elegance of code; it's about making large codebases easier to navigate, to allow as little room as possible for confusion and to keep the project healthy for long periods of time.</p>
<p>We actually have experience with this process in practice: having worked with a team of three developers on one of our projects, my colleague Ruben joined as a new backend developer.</p>
<p>The architecture was new to him, even if he had experience with Laravel before. So we took the time to guide him through. After only a few hours of briefing and pair programming, he was already able to work in this project independently. It definitely took several weeks to get a thorough understanding of the scope of the project, but fortunately the architecture didn't stand in his way — on the contrary: it helped Ruben to focus on the business logic instead.</p>
<p>If you made it until this point in the blog series, I hope that you understand that this architecture is not meant to be the silver bullet for every project. There are many cases where a simpler approach could work better, and some cases where a more complex approach is required.</p>
<h2 id="identifying-domains"><a href="#identifying-domains" class="heading-anchor">#</a> Identifying domains</h2>
<p>With the knowledge we now have about the basic domain building blocks, the question arises as to how exactly we start writing actual code. There are lots of methodologies you can use to better understand what you're about to build, though I feel that there are two key points:</p>
<ul>
<li>Even though you're a developer, your primary goal is to understand the business problem and translate that into code. The code itself is merely a means to an end; always keep your focus on the problem you're solving.</li>
<li>Make sure you've got face-to-face time with your client. It will take time to extract the knowledge that you require to write a working program.</li>
</ul>
<p>I came to think of my job description more and more as "a translator between real world problems, and technical solutions", instead of "a programmer who writes code".
I firmly believe that this mindset is key if you're going to work on a long-running project. You don't just have to write the code - you need to understand the real-world problems you're trying to solve.</p>
<p>Depending on the size of your team, you might not need face-to-face interaction between <em>all</em> developers and the client, but nonetheless, all developers will need to understand the problems they are solving with code.</p>
<p>These team dynamics are such a complex topic that they deserve their own book. In fact there's a lot of literature out there specifically on this topic. For now I'll keep it at this, because from here on out we can talk about how we translate these problems into domains.</p>
<p>In chapter 1, I wrote that one of the goals of this architecture is to group code that belongs together, based on their meaning in the real world, instead of their technical properties. If you've got an open communication with your client, you'll note that it takes time — lots of time — to get a good idea of what their business is about. Often your client might not know it exactly themselves, and it's only by sitting down that they start thoroughly thinking about it.</p>
<p>That's why you shouldn't fear domain groups that change over time. You might start with an <code>Invoice</code> domain, but notice half a year later that it has grown too large for you and your team to fully grasp. Maybe invoice generation and payments are two complex systems on their own, and so they can be split into two domain groups down the line.</p>
<p>My point of view is that it's healthy to keep iterating over your domain structure, to keep refactoring it. Given the right tools, it's not difficult at all to change, split and refactor domains; Your IDE is your friend! My colleague Freek took the time to record a practical example in which he refactors a default Laravel application to the architecture described in this series. You can take a look at his live refactoring session below.</p>
<p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/yPiMzw-lLF8" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>
</p>
<p>In summary: don't be afraid to start using domains because you can always refactor them later.</p>
<p>So that's the approach I would take if you want to start using this domain oriented architecture: try to identify subsystems within your project, realising they can — and will — change over time. You can sit down with your client, you can ask them to write some things down, or you could even do event storming sessions with them. Together you form an image of what the project should be, and that image might very well be refined and even changed down the road.</p>
<p>And because our domain code has very little dependencies, it's very flexible, it doesn't cost much to move stuff around or refactor your code.</p>
<div class="author footnotes">
<p>I'm working on a brand new version of this series, it will contain a video course, ebook and a project built from the ground up with these principles!
</p>
<br>
<p><a class="cta cta-small cta-bold" target="_blank" rel="noopener noreferrer" href="https://laravel-beyond-crud.com/">Read more</a></p>
</div>
<p>Are you enjoying this series this far? Got any questions or feedback? Feel free to let me know via <a target="_blank" href="https://twitter.com/brendt_gd">Twitter</a> or <a href="mailto:brendt@stitcher.io">e-mail</a>.</p>
<p>Next week we'll dive back into code, and finally arrive at the application layer, looking forward to it!</p>
 ]]></summary>

                <updated>2019-11-17T00:00:00+00:00</updated>
            </entry>
                                <entry>
                <title><![CDATA[ 05. States ]]></title>

                <link rel="alternate" href="https://stitcher.io/blog/laravel-beyond-crud-05-states"/>

                <id>https://www.stitcher.io/blog/laravel-beyond-crud-05-states</id>

                <author>
                    <name><![CDATA[ Brent Roose ]]></name>
                </author>

                <summary type="html"><![CDATA[ <div class="author footnotes">
<p>I'm working on a brand new version of this series, it will contain a video course, ebook and a project built from the ground up with these principles!
</p>
<br>
<p><a class="cta cta-small cta-bold" target="_blank" rel="noopener noreferrer" href="https://laravel-beyond-crud.com/">Read more</a></p>
</div>
<blockquote>
<blockquote>
<p>The state pattern is one of the best ways to add state-specific behaviour to models, while still keeping them clean.</p>
</blockquote>
</blockquote>
<p>This chapter will talk about the state pattern, and specifically how to apply it to models. You can think of this chapter as an extension to <a href="/blog/laravel-beyond-crud-04-models">chapter 4</a>, where I wrote about how we aim to keep our model classes manageable by preventing them from handling business logic.</p>
<p>Moving business logic away from models poses a problem though with a very common use case: what to do with model states?</p>
<p>An invoice can be pending or paid, a payment can be failed or succeeded. Depending on the state, a model must behave differently; how do we bridge this gap between models and business logic?</p>
<p>States and transitions between them, are a frequent use case in large projects; so frequent that they deserve a chapter on their own.</p>
<h2 id="the-state-pattern"><a href="#the-state-pattern" class="heading-anchor">#</a> The state pattern</h2>
<p>At its core, the state pattern is a simple pattern, yet it allows for very powerful functionality. Let's take the example of invoices again: an invoice can be pending or paid. To start with, I will give a very simple example, because I want you to understand how the state pattern allows us lots of flexibility.</p>
<p>Say the invoice overview should show a badge representing the state of that invoice, it's coloured orange when pending and green when paid.</p>
<p>A naive fat model approach would do something like this:</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Invoice</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Model</span>
</span>{
    <span class="hljs-comment">// …</span>
    
    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getStateColour</span><span class="hljs-params">()</span>: <span class="hljs-title">string</span>
    </span>{
        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">$this</span>-&gt;state-&gt;<span class="hljs-highlight  prop">equals</span>(<span class="hljs-highlight  type">InvoiceState</span>::<span class="hljs-highlight  prop">PENDING</span>())) {
            <span class="hljs-keyword">return</span> <span class="hljs-string">'orange'</span>;
        }
    
        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">$this</span>-&gt;state-&gt;<span class="hljs-highlight  prop">equals</span>(<span class="hljs-highlight  type">InvoiceState</span>::<span class="hljs-highlight  prop">PAID</span>())) {
            <span class="hljs-keyword">return</span> <span class="hljs-string">'green'</span>;
        }

        <span class="hljs-keyword">return</span> <span class="hljs-string">'gray'</span>;
    }
}</code></pre>
<p>Since we're using some kind of enum class to represent the state value, we could improve on this like so:</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Invoice</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Model</span>
</span>{
    <span class="hljs-comment">// …</span>
    
    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getStateColour</span><span class="hljs-params">()</span>: <span class="hljs-title">string</span>
    </span>{
        <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;state-&gt;getColour();
    }
}</code></pre>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-comment">/**
 * <span class="hljs-doctag">@method</span> static self PENDING()
 * <span class="hljs-doctag">@method</span> static self PAID()
 */</span>
<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">InvoiceState</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Enum</span>
</span>{
    <span class="hljs-keyword">private</span> <span class="hljs-keyword">const</span> PENDING = <span class="hljs-string">'pending'</span>;
    <span class="hljs-keyword">private</span> <span class="hljs-keyword">const</span> PAID = <span class="hljs-string">'paid'</span>;

    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getColour</span><span class="hljs-params">()</span>: <span class="hljs-title">string</span>
    </span>{
        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">$this</span>-&gt;value === <span class="hljs-keyword">self</span>::PENDING) {
            <span class="hljs-keyword">return</span> <span class="hljs-string">'orange'</span>;
        }
    
        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">$this</span>-&gt;value === <span class="hljs-keyword">self</span>::PAID) {
            <span class="hljs-keyword">return</span> <span class="hljs-string">'green'</span>
        }

        <span class="hljs-keyword">return</span> <span class="hljs-string">'gray'</span>;
    }
}</code></pre>
<p>As a sidenote, I assume you'd be using the <a target="_blank" href="https://github.com/myclabs/php-enum">myclabs/php-enum</a> package in this case. One more improvement, for good measure, we could write the above a little shorter by using arrays.</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">InvoiceState</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Enum</span>
</span>{
    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getColour</span><span class="hljs-params">()</span>: <span class="hljs-title">string</span>
    </span>{
        <span class="hljs-keyword">return</span> [
            <span class="hljs-keyword">self</span>::PENDING =&gt; <span class="hljs-string">'orange'</span>,
            <span class="hljs-keyword">self</span>::PAID =&gt; <span class="hljs-string">'green'</span>,
        ][<span class="hljs-keyword">$this</span>-&gt;value] ?? <span class="hljs-string">'gray'</span>;
    }
}</code></pre>
<p>Whatever approach you prefer, in essence you're listing all available options, checking if one of them matches the current one, and doing something based on the outcome. It's a big if/else statement, whichever syntactic sugar you prefer.</p>
<p>Using this approach, we add a responsibility, either to the model or the enum class: <em>it</em> has to know what a specific state should do, <em>it</em> has to know how a state works. The state pattern turns this the other way around: it treats "a state" as a first-class citizen of our codebase. Every state is represented by a separate class, and each of these classes <em>acts</em> upon a subject.</p>
<p>Is that difficult to grasp? Let's take it step by step.</p>
<p>We start with an abstract class <code>InvoiceState</code>, this class describes all functionality that concrete invoice states can provide. In our case we want a state to provide a colour.</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">InvoiceState</span>
</span>{
    <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">colour</span><span class="hljs-params">()</span>: <span class="hljs-title">string</span></span>;
}</code></pre>
<p>Next, we make two classes, each represents a concrete state.</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PendingInvoiceState</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">InvoiceState</span>
</span>{
    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">colour</span><span class="hljs-params">()</span>: <span class="hljs-title">string</span>
    </span>{
        <span class="hljs-keyword">return</span> <span class="hljs-string">'orange'</span>;
    }
}</code></pre>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PaidInvoiceState</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">InvoiceState</span>
</span>{
    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">colour</span><span class="hljs-params">()</span>: <span class="hljs-title">string</span>
    </span>{
        <span class="hljs-keyword">return</span> <span class="hljs-string">'green'</span>;
    }
}</code></pre>
<p>The first thing to notice is that each of these classes can easily be unit tested on their own.</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">InvoiceStateTest</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">TestCase</span>
</span>{
    <span class="hljs-comment">/** <span class="hljs-doctag">@test</span> */</span>
    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">the_colour_of_pending_is_orange</span>
    </span>{   
        $state = <span class="hljs-keyword">new</span> <span class="hljs-highlight  type">PendingInvoiceState</span>();
        
        <span class="hljs-keyword">$this</span>-&gt;<span class="hljs-highlight  prop">assertEquals</span>(<span class="hljs-string">'orange'</span>, $state-&gt;<span class="hljs-highlight  prop">colour</span>());
    }
}</code></pre>
<p>Second, you should note that colours is a naive example used to explain the pattern. You might as well have more complex business logic encapsulated by a state. Take this example: must an invoice be paid? This of course depends on the state, whether it was already paid or not, but might as well depend on the type of invoice we're dealing with. Say our system supports credit notes which don't have to be paid, or it allows for invoices with a price of 0. This business logic can be encapsulated by the state classes.</p>
<p>There's one thing missing to make this functionality work though: we need to be able to look at the model from within our state class, if we're going to decide whether or not that invoice must be paid. This is why we have our abstract <code>InvoiceState</code> parent class; let's add the required methods over there.</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">InvoiceState</span>
</span>{
    <span class="hljs-comment">/** <span class="hljs-doctag">@var</span> Invoice */</span>
    <span class="hljs-keyword">protected</span> $invoice;

    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span><span class="hljs-params">(<span class="hljs-highlight  type">Invoice</span> $invoice)</span> </span>{ <span class="hljs-comment">/* … */</span> }

    <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">mustBePaid</span><span class="hljs-params">()</span>: <span class="hljs-title">bool</span></span>;
    
    <span class="hljs-comment">// …</span>
}</code></pre>
<p>And implement them for each concrete state.</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PendingInvoiceState</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">InvoiceState</span>
</span>{
    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">mustBePaid</span><span class="hljs-params">()</span>: <span class="hljs-title">bool</span>
    </span>{
        <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;invoice-&gt;total_price &gt; <span class="hljs-number">0</span>
            &amp;&amp; <span class="hljs-keyword">$this</span>-&gt;invoice-&gt;type-&gt;<span class="hljs-highlight  prop">equals</span>(<span class="hljs-highlight  type">InvoiceType</span>::<span class="hljs-highlight  prop">DEBIT</span>());
    }
    
    <span class="hljs-comment">// …</span>
}</code></pre>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PaidInvoiceState</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">InvoiceState</span>
</span>{
    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">mustBePaid</span><span class="hljs-params">()</span>: <span class="hljs-title">bool</span>
    </span>{
        <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;
    }
    
    <span class="hljs-comment">// …</span>
}</code></pre>
<p>Again we can write simple unit tests for each state, and our invoice model can simply do this.</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Invoice</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Model</span>
</span>{
    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getStateAttribute</span><span class="hljs-params">()</span>: <span class="hljs-title">InvoiceState</span>
    </span>{
        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-keyword">$this</span>-&gt;state_class(<span class="hljs-keyword">$this</span>);
    }
    
    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">mustBePaid</span><span class="hljs-params">()</span>: <span class="hljs-title">bool</span>
    </span>{
        <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;state-&gt;<span class="hljs-highlight  prop">mustBePaid</span>();
    } 
}</code></pre>
<p>Finally, in the database we can save the concrete model state class in the <code>state_class</code> field and we're done. Obviously doing this mapping manually (saving and loading from and to the database) gets tedious very quickly. That's why I wrote <a target="_blank" href="https://github.com/spatie/laravel-model-states">a package</a> which takes care of all the grunt work for you.</p>
<p>State-specific behaviour, in other words "the state pattern", is only half of the solution though; we still need to handle transitioning the invoice state from one to another, and ensuring only specific states may transition to others. So let's look at state transitions.</p>
<h2 id="transitions"><a href="#transitions" class="heading-anchor">#</a> Transitions</h2>
<p>Remember how I talked about moving business logic away from models, and only allowing them to provide data in a workable way from the database? The same thinking can be applied to states and transitions. We should avoid side effects when using states, things like making changes in the database, sending mails, etc. States should be used to <em>read</em> or provide data. Transitions on the other hand don't provide anything. Rather, they make sure our model state is correctly transitioned from one to another leading to acceptable side effects.</p>
<p>Splitting these two concerns in separate classes gives us the same advantages I wrote about again and again: better testability and reduced cognitive load. Allowing a class to only have one responsibility makes it easier to split a complex problem into several easy-to-grasp bits.</p>
<p>So transitions: a class which will take a model, an invoice in our case, and change that invoice's state — if allowed — to another one. In some cases there might be small side effects like writing a log message or sending a notification about the state transition. A naive implementation might look something like this.</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PendingToPaidTransition</span>
</span>{
    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__invoke</span><span class="hljs-params">(<span class="hljs-highlight  type">Invoice</span> $invoice)</span>: <span class="hljs-title">Invoice</span>
    </span>{
        <span class="hljs-keyword">if</span> (! $invoice-&gt;<span class="hljs-highlight  prop">mustBePaid</span>()) {
            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-highlight  type">InvalidTransitionException</span>(<span class="hljs-keyword">self</span>::class, $invoice);
        }

        $invoice-&gt;status_class = <span class="hljs-highlight  type">PaidInvoiceState</span>::class;
        $invoice-&gt;<span class="hljs-highlight  prop">save</span>();
    
        <span class="hljs-highlight  type">History</span>::<span class="hljs-highlight  prop">log</span>($invoice, <span class="hljs-string">"Pending to Paid"</span>);
    }
}</code></pre>
<p>Again there are many things you can do with this basic pattern:</p>
<ul>
<li>Define all allowed transitions on the model</li>
<li>Transition a state directly to another one, by using a transition class under the hood</li>
<li>Automatically determine what state to transition to based on a set of parameters</li>
</ul>
<p>Again the package I mentioned before adds support for transitions, as well as basic transition management. If you want complex state machines though, you might want to look at other packages. I listed an example in the footnotes below.</p>
<h2 id="states-without-transitions"><a href="#states-without-transitions" class="heading-anchor">#</a> States without transitions</h2>
<p>When we think of "state", we often think they cannot exist without transitions. However, that's not true: an object can have a state that never changes and transitions aren't required to apply the state pattern. Why is this important? Well, take a look again at our <code>PendingInvoiceState::mustBePaid</code> implementation:</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PendingInvoiceState</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">InvoiceState</span>
</span>{
    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">mustBePaid</span><span class="hljs-params">()</span>: <span class="hljs-title">bool</span>
    </span>{
        <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;invoice-&gt;total_price &gt; <span class="hljs-number">0</span>
            &amp;&amp; <span class="hljs-keyword">$this</span>-&gt;invoice-&gt;type-&gt;<span class="hljs-highlight  prop">equals</span>(<span class="hljs-highlight  type">InvoiceType</span>::<span class="hljs-highlight  prop">DEBIT</span>());
    }
}</code></pre>
<p>Since we want to use the state pattern to reduce brittle if/else blocks in our code, can you guess where I'm going with this? Have you considered that <code>$this->invoice->type->equals(InvoiceType::DEBIT())</code> is in fact an if statement in disguise?</p>
<p><code>InvoiceType</code> in fact could very well also apply the state pattern! It's simply a state that likely will never change for a given object. Take a look at this.</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">InvoiceType</span>
</span>{
    <span class="hljs-comment">/** <span class="hljs-doctag">@var</span> Invoice */</span>
    <span class="hljs-keyword">protected</span> $invoice;
    
    <span class="hljs-comment">// …</span>

    <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">mustBePaid</span><span class="hljs-params">()</span>: <span class="hljs-title">bool</span></span>;
}</code></pre>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CreditInvoiceType</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">InvoiceType</span>
</span>{
    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">mustBePaid</span><span class="hljs-params">()</span>: <span class="hljs-title">bool</span>
    </span>{
        <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>
    }
}</code></pre>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DebitInvoiceType</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">InvoiceType</span>
</span>{
    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">mustBePaid</span><span class="hljs-params">()</span>: <span class="hljs-title">bool</span>
    </span>{
        <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;
    }
}</code></pre>
<p>Now we can refactor our <code>PendingInvoiceState::mustBePaid</code> like so.</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PendingInvoiceState</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">InvoiceState</span>
</span>{
    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">mustBePaid</span><span class="hljs-params">()</span>: <span class="hljs-title">bool</span>
    </span>{
        <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;invoice-&gt;total_price &gt; <span class="hljs-number">0</span>
            &amp;&amp; <span class="hljs-keyword">$this</span>-&gt;invoice-&gt;type-&gt;<span class="hljs-highlight  prop">mustBePaid</span>();
    }
}</code></pre>
<p>Reducing if/else statements in our code allows that code to be more linear, which in turn is easier to reason about. I would highly recommend to take a look at <a target="_blank" href="https://www.youtube.com/watch?v=29MAL8pJImQ">Sandi Metz's talk</a> about this exact topic.</p>
<div class="author footnotes">
<p>I'm working on a brand new version of this series, it will contain a video course, ebook and a project built from the ground up with these principles!
</p>
<br>
<p><a class="cta cta-small cta-bold" target="_blank" rel="noopener noreferrer" href="https://laravel-beyond-crud.com/">Read more</a></p>
</div>
<p>The state pattern is, in my opinion, awesome. You're never stuck again writing huge if/else statements — in real life there are often more than two invoice states — and it allows for clean and testable code.</p>
<p>It's a pattern that you can incrementally introduce in your existing code bases, and I'm sure it will be a huge help keeping the project maintainable in the long run.</p>
 ]]></summary>

                <updated>2019-11-16T00:00:00+00:00</updated>
            </entry>
                                <entry>
                <title><![CDATA[ Relationship issues ]]></title>

                <link rel="alternate" href="https://stitcher.io/blog/laravel-custom-relation-classes"/>

                <id>https://www.stitcher.io/blog/laravel-custom-relation-classes</id>

                <author>
                    <name><![CDATA[ Brent Roose ]]></name>
                </author>

                <summary type="html"><![CDATA[ <blockquote>
<p>Or in other words, dealing with complex database relations and Laravel models.</p>
</blockquote>
<p>Recently I had to deal with a complex performance issue in one of our larger Laravel projects. Let me quickly set the scene.</p>
<p>We want an admin user to see an overview of all people in the system in a table, and we want a column in that table to list which contracts are active at that moment for each person.</p>
<p>The relation between <code>Contract</code> and <code>Person</code> is as follows:</p>
<pre><code class="language-fsharp hljs fsharp" data-lang="fsharp">&lt;hljs <span class="hljs-class"><span class="hljs-keyword">type&gt;<span class="hljs-title">Contract</span></span> &gt; <span class="hljs-highlight  type"><span class="hljs-title">HabitantContract</span></span> &gt; <span class="hljs-highlight  type"><span class="hljs-title">Habitant</span></span> &gt; <span class="hljs-highlight  type"><span class="hljs-title">Person</span></span></span></code></pre>
<p>I don't want to spend too much time going into details as to how we came to this relationship hierarchy. It's important for you to know that, yes, this hierarchy is important for our use cases: a <code>Contract</code> can have several <code>Habitants</code>, which are linked via a pivot model <code>HabitantContract</code>; and each <code>Habitant</code> has a relation to one <code>Person</code>.</p>
<p><div class="ad-container">
    <script async type="text/javascript" src="//cdn.carbonads.com/carbon.js?serve=CK7ICK3W&placement=stitcherio" id="_carbonads_js"></script>
</div>
</p>
<p>Since we're showing an overview of all people, we'd like to do something like this in our controller:</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PeopleController</span>
</span>{
    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">index</span><span class="hljs-params">()</span> 
    </span>{
        $people = <span class="hljs-highlight  type">PersonResource</span>::<span class="hljs-highlight  prop">collection</span>(<span class="hljs-highlight  prop">Person</span>::<span class="hljs-highlight  prop">paginate</span>());

        <span class="hljs-keyword">return</span> <span class="hljs-highlight  prop">view</span>(<span class="hljs-string">'people.index'</span>, <span class="hljs-highlight  prop">compact</span>(<span class="hljs-string">'people'</span>));
    }
}</code></pre>
<p>Let's make clear that this is an oversimplified example, though I hope you get the gist. Ideally, we'd want our resource class to look something like this:</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-comment">/** <span class="hljs-doctag">@mixin</span> \App\Domain\People\Models\Person */</span>
<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PersonResource</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">JsonResource</span>
</span>{
    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">toArray</span><span class="hljs-params">($request)</span>: <span class="hljs-title">array</span>
    </span>{
        <span class="hljs-keyword">return</span> [
            <span class="hljs-string">'name'</span> =&gt; <span class="hljs-keyword">$this</span>-&gt;name,

            <span class="hljs-string">'active_contracts'</span> =&gt; <span class="hljs-keyword">$this</span>-&gt;activeContracts
                -&gt;<span class="hljs-highlight  prop">map</span>(<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">(<span class="hljs-highlight  type">Contract</span> $contract)</span> </span>{
                    <span class="hljs-keyword">return</span> $contract-&gt;contract_number;
                })
                -&gt;<span class="hljs-highlight  prop">implode</span>(<span class="hljs-string">', '</span>),

            <span class="hljs-comment">// …</span>
        ];
    }
}</code></pre>
<p>Notice especially the <code>Person::activeContracts</code> relation. How could we make this work?</p>
<p>A first thought might be by using a <code>HasManyThrough</code> relation, but remember that we're 4 levels deep in our relation hierarchy. Besides that, I find <code>HasManyThrough</code> to be <a href="/blog/laravel-has-many-through">very confusing</a>.</p>
<p>We could query the contracts on the fly, one-by-one per person. The issue with that is that we're introducing an n+1 issue since there'll be an extra query <em>per</em> person. Imagine the performance impact if you're dealing with more than just a few models.</p>
<p>One last solution that came to mind was to load all people, all contracts, and map them together manually. In the end that's exactly what I ended up doing, though I did it in the cleanest possible way: using custom relations.</p>
<p>Let's dive in.</p>
<h2 id="configuring-the-person-model"><a href="#configuring-the-person-model" class="heading-anchor">#</a> Configuring the Person model</h2>
<p>Since we want our <code>$person->activeContracts</code> to work exactly like any other relation, there's little work to be done here: let's add a relation method to our model, just like any other.</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Model</span>
</span>{
    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">activeContracts</span><span class="hljs-params">()</span>: <span class="hljs-title">ActiveContractsRelation</span>
    </span>{
        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-highlight  type">ActiveContractsRelation</span>(<span class="hljs-keyword">$this</span>);
    }
}</code></pre>
<p>There's nothing more to do here. Of course we're only starting, since we haven't actually implemented <code>ActiveContractsRelation</code>!</p>
<h2 id="the-custom-relation-class"><a href="#the-custom-relation-class" class="heading-anchor">#</a> The custom relation class</h2>
<p>Unfortunately there's no documentation on making your own relation classes. Luckily you don't need much to learn about them: some code-diving skills and a little bit of time gets you pretty far. Oh an IDE also helps.</p>
<p>Looking at the existing relation classes provided by Laravel, we learn that there's one base relation that rules them all: <code>Illuminate\Database\Eloquent\Relations\Relation</code>. Extending it means you need to implement some abstract methods.</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ActiveContractsRelation</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Relation</span>
</span>{
    <span class="hljs-comment">/**
     * Set the base constraints on the relation query.
     *
     * <span class="hljs-doctag">@return</span> void
     */</span>
    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">addConstraints</span><span class="hljs-params">()</span> </span>{ <span class="hljs-comment">/* … */</span> }

    <span class="hljs-comment">/**
     * Set the constraints for an eager load of the relation.
     *
     * <span class="hljs-doctag">@param</span> array $models
     *
     * <span class="hljs-doctag">@return</span> void
     */</span>
    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">addEagerConstraints</span><span class="hljs-params">(array $models)</span> </span>{ <span class="hljs-comment">/* … */</span> }

    <span class="hljs-comment">/**
     * Initialize the relation on a set of models.
     *
     * <span class="hljs-doctag">@param</span> array $models
     * <span class="hljs-doctag">@param</span> string $relation
     *
     * <span class="hljs-doctag">@return</span> array
     */</span>
    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">initRelation</span><span class="hljs-params">(array $models, $relation)</span> </span>{ <span class="hljs-comment">/* … */</span> }

    <span class="hljs-comment">/**
     * Match the eagerly loaded results to their parents.
     *
     * <span class="hljs-doctag">@param</span> array $models
     * <span class="hljs-doctag">@param</span> \Illuminate\Database\Eloquent\Collection $results
     * <span class="hljs-doctag">@param</span> string $relation
     *
     * <span class="hljs-doctag">@return</span> array
     */</span>
    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">match</span><span class="hljs-params">(array $models, Collection $results, $relation)</span> </span>{ <span class="hljs-comment">/* … */</span> }

    <span class="hljs-comment">/**
     * Get the results of the relationship.
     *
     * <span class="hljs-doctag">@return</span> mixed
     */</span>
    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getResults</span><span class="hljs-params">()</span> </span>{ <span class="hljs-comment">/* … */</span> }
}</code></pre>
<p>The doc blocks get us on the way, though it's not always entirely clear what needs to happen. Again we're in luck, Laravel still has some existing relation classes where we can look to.</p>
<p>Let's go through building our custom relation class step by step. We'll start by overriding the constructor and adding some type hints to the existing properties. Just to make sure, the type system will prevent us from making stupid mistakes.</p>
<p>The abstract <code>Relation</code> constructor requires both specifically for  an eloquent <code>Builder</code> class, as well as the parent model the relationship belongs to. The <code>Builder</code> is meant to be the base query object for our related model, <code>Contract</code>, in our case.</p>
<p>Since we're building a relation class specifically for our use case, there's no need to make the builder configurable. Here's what the constructor looks like:</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ActiveContractsRelation</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Relation</span>
</span>{
    <span class="hljs-comment">/** <span class="hljs-doctag">@var</span> \App\Domain\Contract\Models\Contract|Illuminate\Database\Eloquent\Builder */</span>
    <span class="hljs-keyword">protected</span> $query;

    <span class="hljs-comment">/** <span class="hljs-doctag">@var</span> \App\Domain\People\Models\Person */</span>
    <span class="hljs-keyword">protected</span> $parent;

    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span><span class="hljs-params">(<span class="hljs-highlight  type">Person</span> $parent)</span>
    </span>{
        <span class="hljs-keyword">parent</span>::<span class="hljs-highlight  prop">__construct</span>(<span class="hljs-highlight  type">Contract</span>::<span class="hljs-highlight  prop">query</span>(), $parent);
    }

    <span class="hljs-comment">// …</span>
}</code></pre>
<p>Note that we type hint <code>$query</code> both with the <code>Contract</code> model as well as the <code>Builder</code> class. This allows IDEs to provide better autocompletion, such as custom scopes defined on the model class.</p>
<p>We've got our relation constructed: it will query <code>Contract</code> models, and use a <code>Person</code> model as its parent. Moving on to building our query.</p>
<p>This is where the <code>addConstraints</code> method come in. It will be used to configure the base query. It will set up our relation query specifically to our needs. This is the place where most business rules will be contained:</p>
<ul>
<li>We only want active contracts to show up</li>
<li>We only want to load active contracts that belong to a specified person (the <code>$parent</code> of our relation)</li>
<li>We might want to eagerly load some other relations, but more on that later.</li>
</ul>
<p>Here's what <code>addConstraints</code> looks like, for now:</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ActiveContractsRelation</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Relation</span>
</span>{
    <span class="hljs-comment">// …</span>

    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">addConstraints</span><span class="hljs-params">()</span>
    </span>{
        <span class="hljs-keyword">$this</span>-&gt;query
            -&gt;<span class="hljs-highlight  prop">whereActive</span>() <span class="hljs-comment">// A query scope on our `Contract` model</span>
            -&gt;<span class="hljs-highlight  prop">join</span>(
                <span class="hljs-string">'contract_habitants'</span>, 
                <span class="hljs-string">'contract_habitants.contract_id'</span>, 
                <span class="hljs-string">'='</span>, 
                <span class="hljs-string">'contracts.id'</span>
            )
            -&gt;<span class="hljs-highlight  prop">join</span>(
                <span class="hljs-string">'habitants'</span>, 
                <span class="hljs-string">'habitants.id'</span>, 
                <span class="hljs-string">'='</span>, 
                <span class="hljs-string">'contract_habitants.habitant_id'</span>
            );
    }
}</code></pre>
<p>Now I do assume that you know how basic joins work. Though I will summarize what's happening here: we're building a query that will load all <code>contracts</code> and their <code>habitants</code>, via the <code>contract_habitants</code> pivot table, hence the two joins.</p>
<p>One other constraint is that we only want active contracts to show up; for this we can simply use an existing query scope provided by the <code>Contract</code> model.</p>
<p>With our base query in place, it's time to add the real magic: supporting eager loads. This is where the performance wins are: instead of doing one query per person to load its contracts, we're doing one query to load all contracts, and link these contracts to the correct people afterwards.</p>
<p>This is what <code>addEagerConstraints</code>, <code>initRelation</code> and <code>match</code> are used for. Let's look at them one by one.</p>
<p>First the <code>addEagerConstraints</code> method. This one allows us to modify the query to load in all contracts related to a set of people. Remember we only want two queries, and link the results together afterwards.</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ActiveContractsRelation</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Relation</span>
</span>{
    <span class="hljs-comment">// …</span>

    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">addEagerConstraints</span><span class="hljs-params">(<span class="hljs-highlight  type">array</span> $people)</span>
    </span>{
        <span class="hljs-keyword">$this</span>-&gt;query-&gt;<span class="hljs-highlight  prop">whereIn</span>(
            <span class="hljs-string">'habitants.contact_id'</span>, 
            <span class="hljs-highlight  prop">collect</span>($people)-&gt;pluck(<span class="hljs-string">'id'</span>)
        );
    }
}</code></pre>
<p>Since we joined the <code>habitants</code> table before, this method is fairly easy: we'll only load contracts that belong to the set of people provided.</p>
<p>Next the <code>initRelation</code>. Again this one is rather easy: its goal is to initialise the empty <code>activeContract</code> relationship on every <code>Person</code> model, so that it can be filled afterwards.</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ActiveContractsRelation</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Relation</span>
</span>{
    <span class="hljs-comment">// …</span>

    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">initRelation</span><span class="hljs-params">(<span class="hljs-highlight  type">array</span> $people, $relation)</span>
    </span>{
        <span class="hljs-keyword">foreach</span> ($people <span class="hljs-keyword">as</span> $person) {
            $person-&gt;<span class="hljs-highlight  prop">setRelation</span>(
                $relation, 
                <span class="hljs-keyword">$this</span>-&gt;related-&gt;<span class="hljs-highlight  prop">newCollection</span>()
            );
        }

        <span class="hljs-keyword">return</span> $people;
    }
}</code></pre>
<p>Note that the <code>$this->related</code> property is set by the parent <code>Relation</code> class and it's a clean model instance of our base query so in other words, an empty <code>Contract</code> model:</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Relation</span>
</span>{
    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span><span class="hljs-params">(<span class="hljs-highlight  type">Builder</span> $query, <span class="hljs-highlight  type">Model</span> $parent)</span>
    </span>{
        <span class="hljs-keyword">$this</span>-&gt;related = $query-&gt;<span class="hljs-highlight  prop">getModel</span>();
    
        <span class="hljs-comment">// …</span>
    }
    
    <span class="hljs-comment">// …</span>
}</code></pre>
<p>Finally we arrive at the core function that will solve our problem: linking all people and contracts together.</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ActiveContractsRelation</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Relation</span>
</span>{
    <span class="hljs-comment">// …</span>

    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">match</span><span class="hljs-params">(<span class="hljs-highlight  type">array</span> $people, <span class="hljs-highlight  type">Collection</span> $contracts, $relation)</span>
    </span>{
        <span class="hljs-keyword">if</span> ($contracts-&gt;<span class="hljs-highlight  prop">isEmpty</span>()) {
            <span class="hljs-keyword">return</span> $people;
        }

        <span class="hljs-keyword">foreach</span> ($people <span class="hljs-keyword">as</span> $person) {
            $person-&gt;<span class="hljs-highlight  prop">setRelation</span>(
                $relation, 
                $contracts-&gt;<span class="hljs-highlight  prop">filter</span>(<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">(<span class="hljs-highlight  type">Contract</span> $contract)</span> <span class="hljs-title">use</span> <span class="hljs-params">($person)</span> </span>{
                    <span class="hljs-keyword">return</span> $contract-&gt;habitants-&gt;<span class="hljs-highlight  prop">pluck</span>(<span class="hljs-string">'person_id'</span>)-&gt;<span class="hljs-highlight  prop">contains</span>($person-&gt;id);
                })
            );    
        }

        <span class="hljs-keyword">return</span> $people;
    }
}</code></pre>
<p>Let's walk through what's happening here: on the one hand we've got an array of parent models, the people; on the other hand we've got a collection of contracts, the result of the query executed by our relation class. The goal of the <code>match</code> function is to link them together.</p>
<p>How to do this? It's not that difficult: loop over all people, and search all contracts that belong to each one of them, based on the habitants linked to that contract.</p>
<p>Almost done? Well… there's one more issue. Since we're using the <code>$contract->habitants</code> relation, we need to make sure it is also eagerly loaded, otherwise we just moved the n+1 issue instead of solving it. So it's back to the <code>addEagerConstraints</code> method for a moment.</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ActiveContractsRelation</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Relation</span>
</span>{
    <span class="hljs-comment">// …</span>

    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">addEagerConstraints</span><span class="hljs-params">(<span class="hljs-highlight  type">array</span> $people)</span>
    </span>{
        <span class="hljs-keyword">$this</span>-&gt;query
            -&gt;<span class="hljs-highlight  prop">whereIn</span>(
                <span class="hljs-string">'habitants.contact_id'</span>, 
                <span class="hljs-highlight  prop">collect</span>($people)-&gt;pluck(<span class="hljs-string">'id'</span>)
            )
            -&gt;<span class="hljs-highlight  prop">with</span>(<span class="hljs-string">'habitants'</span>)
            -&gt;<span class="hljs-highlight  prop">select</span>(<span class="hljs-string">'contracts.*'</span>);
    }
}</code></pre>
<p>We're adding the <code>with</code> call to eagerly load all habitants, but also note the specific <code>select</code> statement. We need to tell Laravel's query builder to only select the data from the <code>contracts</code> table, because otherwise the related habitant data will be merged on the <code>Contract</code> model, causing it to have the wrong ids and what not.</p>
<p>Finally we need to implement the <code>getResults</code> method, which simply executes the query:</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ActiveContractsRelation</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Relation</span>
</span>{
    <span class="hljs-comment">// …</span>

    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getResults</span><span class="hljs-params">()</span>
    </span>{
        <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;query-&gt;get();
    }
}</code></pre>
<hr />
<p>And that's it! Our custom relation can now be used like any other Laravel relation. It's an elegant solution to solving a complex problem the Laravel way.</p>
 ]]></summary>

                <updated>2019-11-09T00:00:00+00:00</updated>
            </entry>
                                <entry>
                <title><![CDATA[ Laravel&#039;s HasManyThrough cheatsheet ]]></title>

                <link rel="alternate" href="https://stitcher.io/blog/laravel-has-many-through"/>

                <id>https://www.stitcher.io/blog/laravel-has-many-through</id>

                <author>
                    <name><![CDATA[ Brent Roose ]]></name>
                </author>

                <summary type="html"><![CDATA[ <pre><code class="language-xml hljs xml" data-lang="xml">- The current model <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">red&gt;</span>Country<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span> has a relation to <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">yellow&gt;</span>Post<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span> via <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">blue&gt;</span>User<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>
- The <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">blue&gt;</span>intermediate model<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span> is linked to the <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">red&gt;</span>current model<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span> via <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">blue&gt;</span>users.country_id<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>
- The <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">yellow&gt;</span>target model<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span> is linked to the <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">blue&gt;</span>intermediate model<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span> via <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">yellow&gt;</span>posts.user_id<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>
- <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">blue&gt;</span>users.country_id<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span> maps to <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">red&gt;</span>countries.id<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>
- <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">yellow&gt;</span>posts.user_id<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span> maps to <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">blue&gt;</span>users.id<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span></code></pre>
<pre><code class="language-xml hljs xml" data-lang="xml"><span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">red&gt;</span>countries<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">red&gt;</span>id<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span> - integer
    name - string

<span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">blue&gt;</span>users<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">blue&gt;</span>id<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span> - integer
    <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">blue&gt;</span>country_id<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span> - integer
    name - string

<span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">yellow&gt;</span>posts<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>
    id - integer
    <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">yellow&gt;</span>user_id<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span> - integer
    title - string</code></pre>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-highlight  red"><span class="hljs-title">Country</span></span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Model</span>
</span>{
    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-highlight  yellow"><span class="hljs-title">posts</span></span><span class="hljs-params">()</span>
    </span>{
        <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;<span class="hljs-highlight  prop">hasManyThrough</span>(
            <span class="hljs-string">'<span class="hljs-highlight  yellow">App\Post</span>'</span>,
            <span class="hljs-string">'<span class="hljs-highlight  blue">App\User</span>'</span>,
            <span class="hljs-string">'<span class="hljs-highlight  blue">country_id</span>'</span>, <span class="hljs-comment">// Foreign key on users table...</span>
            <span class="hljs-string">'<span class="hljs-highlight  yellow">user_id</span>'</span>, <span class="hljs-comment">// Foreign key on posts table...</span>
            <span class="hljs-string">'<span class="hljs-highlight  red">id</span>'</span>, <span class="hljs-comment">// Local key on countries table...</span>
            <span class="hljs-string">'<span class="hljs-highlight  blue">id</span>'</span> <span class="hljs-comment">// Local key on users table...</span>
        );
    }
}</code></pre>
 ]]></summary>

                <updated>2019-11-08T00:00:00+00:00</updated>
            </entry>
                                <entry>
                <title><![CDATA[ Can I translate your blog? ]]></title>

                <link rel="alternate" href="https://stitcher.io/blog/can-i-translate-your-blog"/>

                <id>https://www.stitcher.io/blog/can-i-translate-your-blog</id>

                <author>
                    <name><![CDATA[ Brent Roose ]]></name>
                </author>

                <summary type="html"><![CDATA[ <p>Yes. Yes you can. I do ask you to keep a few rules in mind.</p>
<h2 id="host-on-your-own"><a href="#host-on-your-own" class="heading-anchor">#</a> Host on your own</h2>
<p>Your translations should be hosted on your own blog. Maybe it's helpful for you to have access to the markdown source files, they can be found <a target="_blank" href="https://github.com/brendt/stitcher.io/tree/master/src/content/blog">here</a>.</p>
<h2 id="proper-attribution"><a href="#proper-attribution" class="heading-anchor">#</a> Proper attribution</h2>
<p>You're required to add a link to the original post at the start of your translation. Furthermore, please add a link tag in the <code><head></code> of your page to also point to the original post.</p>
<pre><code class="language-html hljs xml" data-lang="html"><span class="hljs-tag">&lt;<span class="hljs-name">head&gt;</span>
    <span class="hljs-comment">&lt;!-- … --&gt;</span>

    <span class="hljs-tag">&lt;<span class="hljs-name">link 
        <span class="hljs-attr">rel=<span class="hljs-string">"<span class="hljs-highlight  text">alternate</span>"</span> 
        <span class="hljs-attr">hreflang</span>=<span class="hljs-string">"<span class="hljs-highlight  text">en</span>"</span>
        <span class="hljs-attr">href</span>=<span class="hljs-string">"<span class="hljs-highlight  text">https://stitcher.io/blog/can-i-translate-your-blog</span>"</span> /&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">head&gt;</span></code></pre>
<h2 id="notify-me-about-translations"><a href="#notify-me-about-translations" class="heading-anchor">#</a> Notify me about translations</h2>
<p>I'd like to know about when you put a translation online. I plan on listing all translations on my blog somewhere at some point in the future, so it'd be handy if I could add yours.</p>
<p>You can notify me via <a target="_blank" href="https://twitter.com/brendt_gd">Twitter</a>, <a href="mailto:brendt@stitcher.io">e-mail</a> or by making a <a target="_blank" href="https://github.com/brendt/stitcher.io">GitHub issue</a></p>
<h2 id="translate,-don't-interpret"><a href="#translate,-don't-interpret" class="heading-anchor">#</a> Translate, don't interpret</h2>
<p>I expect translations to be as close as possible to the original. You can add your own thoughts, but only if properly addressed. For example you can add a final section with additions to the original post, as long as you make it clear that it's not part of the original.</p>
<hr />
<p>One final remark: I appreciate it very much when people want to translate my content, so thank you very much!</p>
 ]]></summary>

                <updated>2019-11-07T00:00:00+00:00</updated>
            </entry>
                                <entry>
                <title><![CDATA[ 04. Models ]]></title>

                <link rel="alternate" href="https://stitcher.io/blog/laravel-beyond-crud-04-models"/>

                <id>https://www.stitcher.io/blog/laravel-beyond-crud-04-models</id>

                <author>
                    <name><![CDATA[ Brent Roose ]]></name>
                </author>

                <summary type="html"><![CDATA[ <div class="author footnotes">
<p>I'm working on a brand new version of this series, it will contain a video course, ebook and a project built from the ground up with these principles!
</p>
<br>
<p><a class="cta cta-small cta-bold" target="_blank" rel="noopener noreferrer" href="https://laravel-beyond-crud.com/">Read more</a></p>
</div>
<p>In the previous chapters, I've talked about two of the three core building blocks of every application: DTOs and actions — data and functionality. In this chapter we will look at the last piece that I consider part of this core: exposing data that's persisted in a data store; in other words: models.</p>
<p>Now, models are a tricky subject. Laravel provides a lot of functionality via its Eloquent model classes, which means that they not only represent the data in a data store, they also allow you build queries, load and save data, they have a built-in event system, and more.</p>
<p>In this chapter, I will not tell you to ditch all the model functionality that's provided by Laravel — it's quite useful indeed. However I will name a few pitfalls that you need to be careful of, and solutions for them; so that even in large projects, models won't be the cause of difficult maintainership.</p>
<p>My point of view is that we should embrace the framework, instead of trying to fight it; though we should embrace it in such a way that large projects stay maintainable. Let's dive in.</p>
<h2 id="models-≠-business-logic"><a href="#models-≠-business-logic" class="heading-anchor">#</a> Models ≠ business logic</h2>
<p>The first pitfall that many developers fall into, is that they think of models as <em>the</em> place to be when it comes to business logic. I already listed a few responsibilities of models which are built-into Laravel, and I would argue to be careful not to add any more.</p>
<p>It sounds very appealing at first, to be able to do something like <code>$invoiceLine->price_including_vat</code> or <code>$invoice->total_price</code>; and it sure does. I actually do believe that invoices and invoice lines <em>should</em> have these methods. There's one important distinction to make though: these methods shouldn't calculate anything. Let's take a look at what <em>not</em> to do:</p>
<p>Here's a <code>total_price</code> accessor on our invoice model, looping over all invoice lines and making the sum of their total price.</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Invoice</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Model</span>
</span>{
    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getTotalPriceAttribute</span><span class="hljs-params">()</span>: <span class="hljs-title">int</span>
    </span>{
        <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;invoiceLines
            -&gt;<span class="hljs-highlight  prop">reduce</span>(<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">(<span class="hljs-highlight  type">int</span> $totalPrice, <span class="hljs-highlight  type">InvoiceLine</span> $invoiceLine)</span> </span>{
                <span class="hljs-keyword">return</span> $totalPrice + $invoiceLine-&gt;total_price;
            }, <span class="hljs-number">0</span>);
    }
}</code></pre>
<p>And here is how the total price per line is calculated.</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">InvoiceLine</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Model</span>
</span>{
    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getTotalPriceAttribute</span><span class="hljs-params">()</span>: <span class="hljs-title">int</span>
    </span>{
        $vatCalculator = <span class="hljs-highlight  prop">app</span>(<span class="hljs-highlight  type">VatCalculator</span>::class);
    
        $price = <span class="hljs-keyword">$this</span>-&gt;item_amount * <span class="hljs-keyword">$this</span>-&gt;item_price;

        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">$this</span>-&gt;price_excluding_vat) {
            $price = $vatCalculator-&gt;<span class="hljs-highlight  prop">totalPrice</span>(
                $price, 
                <span class="hljs-keyword">$this</span>-&gt;vat_percentage
            );
        }
    
        <span class="hljs-keyword">return</span> $price;
    }
}</code></pre>
<p>Since you read the previous chapter on actions, you might guess what I would do instead: calculating the total price of an invoice is a user story that should be represented by an action.</p>
<p>The <code>Invoice</code> and <code>InvoiceLine</code> models could have the simple <code>total_price</code> and <code>price_including_vat</code> properties, but they are calculated by actions first, and then stored in the database. When using <code>$invoice->total_price</code>, you're simply reading data that's already been calculated before.</p>
<p>There are a few advantages to this approach. First the obvious one: performance, you're only doing the calculations once, not every time when in need of the data. Second, you can query the calculated data directly. And third: you don't have to worry about side effects.</p>
<p>Now, we could start a purist debate about how single responsibility helps make your classes small, better maintainable and easily testable; and how dependency injection is superior to service location; but I rather state the obvious instead of having long theoretical debates where I know there's simply two sides that won't agree.</p>
<p>So, the obvious: even though you might like to be able to do <code>$invoice->send()</code> or <code>$invoice->toPdf()</code>, the model code is growing and growing. This is something that happens over time, it doesn't seem to be a big deal at first. <code>$invoice->toPdf()</code> might actually only be one or two lines of code.</p>
<p>From experience though, these one or two lines add up. One or two lines isn't the problem, but hundred times one or two lines is. The reality is that model classes grow over time, and can grow quite large indeed.</p>
<p>Even if you don't agree with me on the advantages that single responsibility and dependency injection brings, there's little to disagree about this: a model class with hundreds of lines of code, does not stay maintainable.</p>
<p>All that to say this: think of models and their purpose as to only provide data for you, let something else be concerned with making sure that data is calculated properly.</p>
<h2 id="scaling-down-models"><a href="#scaling-down-models" class="heading-anchor">#</a> Scaling down models</h2>
<p>If our goal is to keep model classes reasonably small — small enough to be able to understand them by simply opening their file — we need to move some more things around. Ideally, we only want to keep getters and setters, simple accessors and mutators, casts and relations.</p>
<p>Other responsibilities should be moved to other classes. One example is query scopes: we could easily move them to dedicated query builder classes.</p>
<p>Believe it or not: query builder classes are actually the normal way of using Eloquent; scopes are simply syntactic sugar on top of them. This is what a query builder class might look like.</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-keyword">namespace</span> <span class="hljs-highlight  type"><span class="hljs-title">Domain</span>\<span class="hljs-title">Invoices</span>\<span class="hljs-title">QueryBuilders</span></span>;

<span class="hljs-keyword">use</span> <span class="hljs-highlight  type"><span class="hljs-title">Domain</span>\<span class="hljs-title">Invoices</span>\<span class="hljs-title">States</span>\<span class="hljs-title">Paid</span></span>;
<span class="hljs-keyword">use</span> <span class="hljs-highlight  type"><span class="hljs-title">Illuminate</span>\<span class="hljs-title">Database</span>\<span class="hljs-title">Eloquent</span>\<span class="hljs-title">Builder</span></span>;

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">InvoiceQueryBuilder</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Builder</span>
</span>{
    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">wherePaid</span><span class="hljs-params">()</span>: <span class="hljs-title">self</span>
    </span>{
        <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;<span class="hljs-highlight  prop">whereState</span>(<span class="hljs-string">'status'</span>, <span class="hljs-highlight  type">Paid</span>::class);
    }
}
</code></pre>
<p>Next up, we override the <code>newEloquentBuilder</code> method in our model and return our custom class. Laravel will use it from now on.</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-keyword">namespace</span> <span class="hljs-highlight  type"><span class="hljs-title">Domain</span>\<span class="hljs-title">Invoices</span>\<span class="hljs-title">Models</span></span>;

<span class="hljs-keyword">use</span> <span class="hljs-highlight  type"><span class="hljs-title">Domain</span>\<span class="hljs-title">Invoices</span>\<span class="hljs-title">QueryBuilders</span>\<span class="hljs-title">InvoiceQueryBuilder</span></span>;

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Invoice</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Model</span> 
</span>{
    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">newEloquentBuilder</span><span class="hljs-params">($query)</span>: <span class="hljs-highlight  type"><span class="hljs-title">InvoiceQueryBuilder</span></span>
    </span>{
        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-highlight  type">InvoiceQueryBuilder</span>($query);
    }
}</code></pre>
<p>This is what I meant by embracing the framework: you don't need to introduce new patterns like repositories per se, you can build upon what Laravel provides. Giving it some thought, we strike the perfect balance between using the commodities provided by the framework, and preventing our code from growing too large in specific places.</p>
<p>Using this mindset, we can also provide custom collection classes for relations. Laravel has great collection support, though you often end up with long chains of collection functions either in the model or in the application layer. This again isn't ideal, and luckily Laravel provides us with the needed hooks to bundle collection logic into a dedicated class.</p>
<p>Here's an example of a custom collection class, and note that it's entirely possible to combine several methods into new ones, avoiding long function chains in other places.</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-keyword">namespace</span> <span class="hljs-highlight  type"><span class="hljs-title">Domain</span>\<span class="hljs-title">Invoices</span>\<span class="hljs-title">Collections</span></span>;

<span class="hljs-keyword">use</span> <span class="hljs-highlight  type"><span class="hljs-title">Domain</span>\<span class="hljs-title">Invoices</span>\<span class="hljs-title">Models</span>\<span class="hljs-title">InvoiceLines</span></span>;
<span class="hljs-keyword">use</span> <span class="hljs-highlight  type"><span class="hljs-title">Illuminate</span>\<span class="hljs-title">Database</span>\<span class="hljs-title">Eloquent</span>\<span class="hljs-title">Collection</span></span>;

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">InvoiceLineCollection</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Collection</span>
</span>{
    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">creditLines</span><span class="hljs-params">()</span>: <span class="hljs-title">self</span>
    </span>{
        <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;<span class="hljs-highlight  prop">filter</span>(<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">(<span class="hljs-highlight  type">InvoiceLine</span> $invoiceLine)</span> </span>{
            <span class="hljs-keyword">return</span> $invoiceLine-&gt;<span class="hljs-highlight  prop">isCreditLine</span>();
        });
    }
}</code></pre>
<p>This is how you link a collection class to a model; <code>InvoiceLine</code>, in this case:</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-keyword">namespace</span> <span class="hljs-highlight  type"><span class="hljs-title">Domain</span>\<span class="hljs-title">Invoices</span>\<span class="hljs-title">Models</span></span>;

<span class="hljs-keyword">use</span> <span class="hljs-highlight  type"><span class="hljs-title">Domain</span>\<span class="hljs-title">Invoices</span>\<span class="hljs-title">Collection</span>\<span class="hljs-title">InvoiceLineCollection</span></span>;

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">InvoiceLine</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Model</span> 
</span>{
    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">newCollection</span><span class="hljs-params">(<span class="hljs-highlight  type">array</span> $models = [])</span>: <span class="hljs-highlight  type"><span class="hljs-title">InvoiceLineCollection</span></span>
    </span>{
        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-highlight  type">InvoiceLineCollection</span>($models);
    }

    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">isCreditLine</span><span class="hljs-params">()</span>: <span class="hljs-highlight  type"><span class="hljs-title">bool</span></span>
    </span>{
        <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;price &lt; <span class="hljs-number">0.0</span>;
    }
}</code></pre>
<p>Every model having a <code>HasMany</code> relation to <code>InvoiceLine</code>, will now use our collection class instead.</p>
<pre><code class="language-php hljs php" data-lang="php">$invoice
    -&gt;invoiceLines
    -&gt;<span class="hljs-highlight  prop">creditLines</span>()
    -&gt;<span class="hljs-highlight  prop">map</span>(<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">(<span class="hljs-highlight  type">InvoiceLine</span> $invoiceLine)</span> </span>{
        <span class="hljs-comment">// …</span>
    });</code></pre>
<p>Try to keep your models clean and data-oriented, instead of having them provide business logic. There are better places to handle it.</p>
<div class="author footnotes">
<p>I'm working on a brand new version of this series, it will contain a video course, ebook and a project built from the ground up with these principles!
</p>
<br>
<p><a class="cta cta-small cta-bold" target="_blank" rel="noopener noreferrer" href="https://laravel-beyond-crud.com/">Read more</a></p>
</div>
<h2 id="empty-bags-of-nothingness"><a href="#empty-bags-of-nothingness" class="heading-anchor">#</a> Empty bags of nothingness</h2>
<p>I appreciate Taylor Otwell also keeping an eye on this blog series. Last week <a target="_blank" href="https://mobile.twitter.com/taylorotwell/status/1188449730055036928">he asked</a> how to avoid our objects becoming nothing more than empty bags of data, an anti-pattern Martin Fowler <a target="_blank" href="https://martinfowler.com/bliki/AnemicDomainModel.html">wrote about</a>.</p>
<p>Because Taylor took the time to ask me about it on Twitter, I figured I might as well include my response in this chapter, where all people can read about it.</p>
<p>The answer — my answer — is twofold. First of all: I don't think of models as empty bags with plain old data. Using accessors, mutators and casts, they provide a rich layer between the plain data in the database, and the data the developer wants to use. In this chapter I argued to move several other responsibilities to separate classes, that's true, yet I believe that models in their "trimmed" down version still offer a lot more value than simple bags of data, thanks to all the functionality Laravel provides.</p>
<p>Secondly, I think it's worth to mention Alan Kay's vision on this topic (he's the one who came up with the term OOP). He himself said in <a target="_blank" href="https://www.youtube.com/watch?time_continue=2265&amp;v=oKg1hTOQXoY">this talk</a> that he regretted calling the paradigm "object oriented", and not "process oriented". Alan argues that he's actually a proponent of splitting process and data.</p>
<p>Whether you agree with that point of view or not is up to you. I do admit to have been influenced by some of Alan's insights, and you might notice that throughout this blog series. Like I said before: don't think of this series as the holy grail of software design. My goal is to challenge the current way you're writing code, making you think whether there are more optimal ways to solve some of your problems.</p>
<p>So let's make sure to continue the discussion, we can <a href="mailto:brent@stitcher.io">mail</a> about it, or we can discuss it <a target="_blank" href="https://mobile.twitter.com/brendt_gd">on Twitter</a>.</p>
 ]]></summary>

                <updated>2019-11-03T00:00:00+00:00</updated>
            </entry>
                                <entry>
                <title><![CDATA[ 03. Actions ]]></title>

                <link rel="alternate" href="https://stitcher.io/blog/laravel-beyond-crud-03-actions"/>

                <id>https://www.stitcher.io/blog/laravel-beyond-crud-03-actions</id>

                <author>
                    <name><![CDATA[ Brent Roose ]]></name>
                </author>

                <summary type="html"><![CDATA[ <div class="author footnotes">
<p>I'm working on a brand new version of this series, it will contain a video course, ebook and a project built from the ground up with these principles!
</p>
<br>
<p><a class="cta cta-small cta-bold" target="_blank" rel="noopener noreferrer" href="https://laravel-beyond-crud.com/">Read more</a></p>
</div>
<blockquote>
<blockquote>
<p>Now that we can work with data in a type-safe and transparent way, we need to start doing something with it.</p>
</blockquote>
</blockquote>
<p>Just like we don't want to work with random arrays full of data, we also don't want the most critical part of our project, the business functionality, to be spread throughout random functions and classes.</p>
<p>Here's an example: one of the user stories in your project might be for "an admin to create an invoice". This means saving an invoice in the database, but also a lot more:</p>
<ul>
<li>First: calculate the price of each individual invoice line and the total price</li>
<li>Save the invoice to the database</li>
<li>Create a payment via the payment provider</li>
<li>Create a PDF with all relevant information</li>
<li>Send this PDF to the customer</li>
</ul>
<p>A common practice in Laravel is to create "fat models" which will handle all this functionality.
In this chapter we will look at another approach to adding this behaviour into our codebase.</p>
<p>Instead of mixing functionality in models or controllers, we will treat these user stories as first class citizens of the project. I tend to call these "actions".</p>
<h2 id="terminology"><a href="#terminology" class="heading-anchor">#</a> Terminology</h2>
<p>Before looking at their use, we need to discuss how actions are structured. For starters, they live in the domain.</p>
<p>Second, they are simple classes without any abstractions or interfaces. An action is a class that takes input, does something, and gives output. That's why an action usually only has one public method, and sometimes a constructor.</p>
<p>As a convention in our projects, we decided to suffix all of our classes. For sure <code>CreateInvoice</code> sounds nice, but as soon as you're dealing with several hundreds or thousands of classes, you'll want to make sure that no naming collisions can occur. You see, <code>CreateInvoice</code>, could very well also be the name of an invokable controller, of a command, of a job or of a request. We prefer to eliminate as much confusion as possible, hence, <code>CreateInvoiceAction</code> will be the name.</p>
<p>Evidently this means that class names become longer. The reality is that if you're working on larger projects, you can't avoid choosing longer names to make sure no confusion is possible. Here's an extreme example from one of our projects, I'm not kidding: <code>CreateOrUpdateHabitantContractUnitPackageAction</code>.</p>
<p>We hated this name at first. We desperately tried to come up with a shorter one. In the end though, we had to admit that clarity of what a class is about is the most important. Our IDE's autocompletion will take care of the inconvenience of the long names anyways.</p>
<p>When we're settled on a class name, the next hurdle to overcome is naming the public method to use our action. One option is to make it invokable, like so:</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CreateInvoiceAction</span>
</span>{
    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__invoke</span><span class="hljs-params">(<span class="hljs-highlight  type">InvoiceData</span> $invoiceData)</span>: <span class="hljs-title">Invoice</span>
    </span>{
        <span class="hljs-comment">// …</span>
    }
}</code></pre>
<p>There's a practical problem with this approach though. Later in this chapter we'll talk about composing actions out of other actions, and how it's a powerful pattern. It would look something like this:</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CreateInvoiceAction</span>
</span>{
    <span class="hljs-keyword">private</span> $createInvoiceLineAction;

    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span><span class="hljs-params">(
        <span class="hljs-highlight  type">CreateInvoiceLineAction</span> $createInvoiceLineAction
    )</span> </span>{ <span class="hljs-comment">/* … */</span> }

    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__invoke</span><span class="hljs-params">(<span class="hljs-highlight  type">InvoiceData</span> $invoiceData)</span>: <span class="hljs-title">Invoice</span>
    </span>{
        <span class="hljs-keyword">foreach</span> ($invoiceData-&gt;lines <span class="hljs-keyword">as</span> $lineData) {
            $invoice-&gt;<span class="hljs-highlight  prop">addLine</span>(
                (<span class="hljs-keyword">$this</span>-&gt;createInvoiceLineAction)($lineData)
            );
        }
    }
}</code></pre>
<p>Can you spot the issue? PHP does not allow to directly invoke an invokable when it's a class property, since PHP is looking for a class method instead. That's why you'll have to wrap the action in parentheses before calling it.</p>
<p>While this is only a minor inconvenience, there's an additional problem with PhpStorm: it is not able to provide parameter autocompletion when calling the action this way.
Personally, I believe that proper IDE use is an integral part of the development of a project, and shouldn't be ignored. That's why at this time, our team decided not to make actions invokable.</p>
<p>Another option is to use <code>handle</code>, which is often used by Laravel as the default name in these kinds of cases. Once again there's a problem with it, specifically because Laravel uses it.</p>
<p>Whenever Laravel allows you to use <code>handle</code>, in eg. jobs or commands, it will also provide method injection from the dependency container. In our actions we only want the constructor to have DI capabilities. Again we'll look closely into the reasons behind this later in this chapter.</p>
<p>So <code>handle</code> is also out. When we started using actions, we actually gave this naming conundrum quite a lot of thought. In the end we settled on <code>execute</code>.
Keep in mind though that you're free to come up with your own naming conventions: the point here is more about the pattern of using actions than it is about their names.</p>
<h2 id="into-practice"><a href="#into-practice" class="heading-anchor">#</a> Into practice</h2>
<p>With all of the terminology out of the way, let's talk about why actions are useful, and how to actually use them.</p>
<p>First let's talk about re-usability. The trick when using actions is to split them in small enough pieces so that some things are reusable, while keeping them large enough to not end up with an overload of them. Take our invoice example: generating a PDF from an invoice is something that is likely to happen from within several contexts in our application. Sure there's the PDF that's generated when an invoice is actually created, but an admin might also want to see a preview or draft of it, before sending it.</p>
<p>These two user stories: "creating an invoice" and "previewing an invoice" obviously require two entry points, two controllers. On the other hand though, generating the PDF based on the invoice is something that's done in both cases.</p>
<p>When you start spending time thinking about what the application actually will do, you'll notice that there are lots of actions that can be reused. Of course, we also need to be careful not to over-abstract our code. It's often better to copy-paste a little code than to make premature abstractions.</p>
<p>A good rule of thumb is to think about the functionality when making abstractions, instead of the technical properties of code. When two actions might do similar things, though they do it in completely different contexts, you should be careful not to start abstracting them too early.</p>
<p>On the other hand, there are cases where abstractions can be helpful. Take again our invoice PDF example: chances are you need to generate more PDFs than just for invoices — at least this is the case in our projects. It might make sense to have a general <code>GeneratePdfAction</code>, which can work with an interface, one that <code>Invoice</code> then implements.</p>
<p>But, let's be honest, chances are the majority of our actions will be rather specific to their user stories, and not be re-usable. You might think that actions, in these cases, are unnecessary overhead. Hang on though, because re-usability is not the only reason to use them. Actually, the most important reason has nothing to do with technical benefits at all: actions allow the programmer to think in ways that are closer to the real world, instead of the code.</p>
<p>Say you need to make changes to the way invoices are created. A typical Laravel application will probably have this invoice creation logic spread across a controller and a model, maybe a job which generates the PDF, and finally an event listener to send the invoice mail. That's a lot of places you need to know of. Once again our code is spread across the codebase, grouped by its technical properties, rather than its meaning.</p>
<p>Actions reduce the cognitive load that's introduced by such a system. If you need to work on how invoices are created, you can simply go to the action class, and start from there.</p>
<p>Don't be mistaken: actions may very well work together with eg. asynchronous jobs and event listeners; though these jobs and listeners merely provide the infrastructure for actions to work, and not the business logic itself. This is a good example of why we need to split the domain and application layers: each has their own purpose.</p>
<p>So we got re-usability and a reduction of cognitive load, but there's even more!</p>
<p>Because actions are small pieces of software that live almost on their own, it's very easy to unit test them. In your tests you don't have to worry about sending fake HTTP requests, setting up facade fakes, etc. You can simply make a new action, maybe provide some mock dependencies, pass it the required input data and make assertions on its output.</p>
<p>For example, the <code>CreateInvoiceLineAction</code>: it will take data about which article it will invoice, as well as an amount and a period; and it will calculate the total price and prices with and without VAT. These are things you can write robust, yet simple, unit tests for.</p>
<p>If all your actions are properly unit tested, you can be very confident that the bulk of the functionality that needs to be provided by the application actually works as intended. Now it's only a matter of using these actions in ways that make sense for the end user, and write some integration tests for those pieces.</p>
<h2 id="composing-actions"><a href="#composing-actions" class="heading-anchor">#</a> Composing actions</h2>
<p>One important characteristic of actions that I already mentioned before briefly, is how they use dependency injection. Since we're using the constructor to pass in data from the container, and the <code>execute</code> method to pass in context-related data; we're free to compose actions out of actions out of actions out of…</p>
<p>You get the idea. Let's be clear though that a deep dependency chain is something you want to avoid — it makes the code complex and highly dependant on each other — yet there are several cases where having DI is very beneficial.</p>
<p>Take again the example of the <code>CreateInvoiceLineAction</code> which has to calculate VAT prices. Now depending on the context, an invoice line might have a price including or excluding VAT. Calculating VAT prices is something trivial, yet we don't want our <code>CreateInvoiceLineAction</code> to be concerned with the details of it.</p>
<p>So imagine we have a simple <code>VatCalculator</code> class — which is something that might live in the <code>\Support</code> namespace — it could be injected like so:</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CreateInvoiceLineAction</span>
</span>{
    <span class="hljs-keyword">private</span> $vatCalculator;

    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span><span class="hljs-params">(<span class="hljs-highlight  type">VatCalculator</span> $vatCalculator)</span>
    </span>{ 
        <span class="hljs-keyword">$this</span>-&gt;vatCalculator = $vatCalculator;
    }
    
    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">execute</span><span class="hljs-params">(
        <span class="hljs-highlight  type">InvoiceLineData</span> $invoiceLineData
    )</span>: <span class="hljs-title">InvoiceLine</span> </span>{
        <span class="hljs-comment">// …</span>
    }
}</code></pre>
<p>And you'd use it like so:</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">execute</span><span class="hljs-params">(
    <span class="hljs-highlight  type">InvoiceLineData</span> $invoiceLineData
)</span>: <span class="hljs-title">InvoiceLine</span> </span>{
    $item = $invoiceLineData-&gt;item;

    <span class="hljs-keyword">if</span> ($item-&gt;<span class="hljs-highlight  prop">vatIncluded</span>()) {
        [$priceIncVat, $priceExclVat] = 
            <span class="hljs-keyword">$this</span>-&gt;vatCalculator-&gt;<span class="hljs-highlight  prop">vatIncluded</span>(
                $item-&gt;<span class="hljs-highlight  prop">getPrice</span>(),
                $item-&gt;<span class="hljs-highlight  prop">getVatPercentage</span>()
            );
    } <span class="hljs-keyword">else</span> {
        [$priceIncVat, $priceExclVat] = 
            <span class="hljs-keyword">$this</span>-&gt;vatCalculator-&gt;<span class="hljs-highlight  prop">vatExcluded</span>(
                $item-&gt;<span class="hljs-highlight  prop">getPrice</span>(),
                $item-&gt;<span class="hljs-highlight  prop">getVatPercentage</span>()
            );
    }

    $amount = $invoiceLineData-&gt;item_amount;
    
    $invoiceLine = <span class="hljs-keyword">new</span> <span class="hljs-highlight  type">InvoiceLine</span>([
        <span class="hljs-string">'item_price'</span> =&gt; $item-&gt;<span class="hljs-highlight  prop">getPrice</span>(),
        <span class="hljs-string">'total_price'</span> =&gt; $amount * $priceIncVat,
        <span class="hljs-string">'total_price_excluding_vat'</span> =&gt; $amount * $priceExclVat,
    ]);
}</code></pre>
<p>The <code>CreateInvoiceLineAction</code> in turn would be injected into <code>CreateInvoiceAction</code>. And this one again has other dependencies, the <code>CreatePdfAction</code> and <code>SendMailAction</code>, for example.</p>
<p>You can see how composition can help you keep individual actions small, yet allow for complex business functionality to be coded in a clear and maintainable way.</p>
<h2 id="alternatives-to-actions"><a href="#alternatives-to-actions" class="heading-anchor">#</a> Alternatives to actions</h2>
<p>There are two paradigms I need to mention at this point, two ways you wouldn't need a concept like actions.</p>
<p>The first one will be known to people who are familiar with DDD: commands and handlers. Actions are a simplified version of them. Where commands and handlers make a distinction between what needs to happen and how it needs to happen, actions combine these two responsibilities into one. It's true that the command bus offers more flexibility than actions. On the other hand it also requires you to write more code.</p>
<p>For the scope of our projects, splitting actions into commands and handlers was taking it a step too far. We would almost never need the added flexibility, yet it would take a lot longer to write the code.</p>
<p>The second alternative worth mentioning is event driven systems. If you ever worked in an event driven system, you might think that actions are too directly coupled to the places where they are actually used. Again the same argument applies: event driven systems offer more flexibility, yet for our projects it would have been overkill to use them. Furthermore event driven systems add a layer of indirectness that makes the code more complex to reason about. While this indirectness does offer benefits, they wouldn't outweigh the cost of maintenance for us.</p>
<div class="author footnotes">
<p>I'm working on a brand new version of this series, it will contain a video course, ebook and a project built from the ground up with these principles!
</p>
<br>
<p><a class="cta cta-small cta-bold" target="_blank" rel="noopener noreferrer" href="https://laravel-beyond-crud.com/">Read more</a></p>
</div>
<hr />
<p>I hope it's clear that I'm not suggesting we've got it all figured out and have the perfect solution for all Laravel projects. We don't. When you continue to read through this series, it's important that you keep an eye on the specific needs of your project. While you might be able to use some concepts proposed here, you might also need some other solutions to solve certain aspects.</p>
<p>For us, actions are the right choice because they offer the right amount of flexibility, re-usability and significantly reduce cognitive load. They encapsulate the essence of the application. They can, in fact, be thought of, together with DTOs and models, as the true core of the project.</p>
<p>That brings us to the next chapter, the last piece of the core: models.</p>
 ]]></summary>

                <updated>2019-10-27T00:00:00+00:00</updated>
            </entry>
                                <entry>
                <title><![CDATA[ 02. Working with data ]]></title>

                <link rel="alternate" href="https://stitcher.io/blog/laravel-beyond-crud-02-working-with-data"/>

                <id>https://www.stitcher.io/blog/laravel-beyond-crud-02-working-with-data</id>

                <author>
                    <name><![CDATA[ Brent Roose ]]></name>
                </author>

                <summary type="html"><![CDATA[ <div class="author footnotes">
<p>I'm working on a brand new version of this series, it will contain a video course, ebook and a project built from the ground up with these principles!
</p>
<br>
<p><a class="cta cta-small cta-bold" target="_blank" rel="noopener noreferrer" href="https://laravel-beyond-crud.com/">Read more</a></p>
</div>
<p>At the core of every project, you find data. Almost every application's task can be summarized like so:  provide, interpret and manipulate data in whatever way the business wants.</p>
<p>You probably noticed this yourself too: at the start of a project you don't start building controllers and jobs, you start by building, what Laravel calls, models. Large projects benefit from making ERDs and other kinds of diagrams to conceptualise what data will be handled by the application. Only when that's clear, you can start building the entry points and hooks that work with your data.</p>
<p>In this chapter we'll take a close look at how to work with data in a structured way, so that all developers in your team can write the application to handle this data in a predictable and safe way.</p>
<p>You might be thinking of models right now, but we need to take a few more steps back at first.</p>
<h2 id="type-theory"><a href="#type-theory" class="heading-anchor">#</a> Type theory</h2>
<p>In order to understand the use of data transfer objects — spoiler: those are what this chapter is about — you'll need to have some background knowledge about type systems.</p>
<p>Not everyone agrees on the vocabulary used when talking about type systems. So let's clarify a few terms in the way that I will use them here.</p>
<p>The strength of a type system — strong or weak types — defines whether a variable can change its type after it's defined.</p>
<p>A simple example: given a string variable <code>$a = 'test';</code>; a weak type system allows you to re-assign that variable to another type, for example <code>$a = 1;</code>, an integer.</p>
<p>PHP is a weakly typed language — I feel like a more real-life example is in place:</p>
<pre><code class="language-php hljs php" data-lang="php">$id = <span class="hljs-string">'1'</span>; <span class="hljs-comment">// Eg. an id retrieved from the URL</span>

<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-highlight  type">int</span> $id)</span>: <span class="hljs-title">Model</span>
</span>{
    <span class="hljs-comment">// The input '1' will automatically be cast to an int</span>
}

<span class="hljs-highlight  prop">find</span>($id);</code></pre>
<p>To be clear: it makes sense for PHP to have a weak type system. Being a language that mainly works with the HTTP request, everything is basically a string.</p>
<p>You might think that in modern PHP, you can avoid this behind-the-scenes type switching — type juggling — by using the strict types feature, but that's not completely true.
Declaring strict types prevents other types being passed into a function,
but you can still change the value of the variable in the function itself.</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-keyword">declare</span>(<span class="hljs-highlight  prop">strict_types</span>=<span class="hljs-number">1</span>);

<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-highlight  type">int</span> $id)</span>: <span class="hljs-title">Model</span>
</span>{
    $id = <span class="hljs-string">''</span> . $id;

    <span class="hljs-comment">/*
     * This is perfectly allowed in PHP
     * `$id` is a string now.
     */</span>

    <span class="hljs-comment">// …</span>
}

<span class="hljs-highlight  prop">find</span>(<span class="hljs-string">'1'</span>); <span class="hljs-comment">// This would trigger a TypeError.</span>

<span class="hljs-highlight  prop">find</span>(<span class="hljs-number">1</span>); <span class="hljs-comment">// This would be fine.</span></code></pre>
<p>Even with strict types and type hints, PHP's type system is weak.
Type hints only ensure a variable's type at that point in time,
without a guarantee about any future value that variable might have.</p>
<p>Like I said before: it makes sense for PHP to have a weak type system, since all input it has to deal with starts out as a string.
There is an interesting property to strong types though: they come with a few guarantees.
If a variable has a type that's unchangeable, a whole range of unexpected behaviour simply cannot happen anymore.</p>
<p>You see, it's mathematically provable that if a strongly typed program compiles,
it's impossible for that program to have a range of bugs which would be able to exist in weakly typed languages.
In other words, strong types give the programmer a better insurance that the code actually behaves how it's supposed to.</p>
<p>As a sidenote: this doesn't mean that a strongly typed language cannot have bugs!
You're perfectly able to write a buggy implementation.
But when a strongly typed program compiles successfully,
you're sure a certain set of bugs and errors can't occur in that program.</p>
<blockquote>
<p>Strong type systems allow developers to have much more insight into the program when writing the code, instead of having to run it.</p>
</blockquote>
<p>There's one more concept we need to look at: static and dynamic types – and this is where things start to get interesting.</p>
<p>As you're probably aware, PHP is an interpreted language.
This means that a PHP script is translated to machine code at runtime.
When you send a request to a server running PHP,
it will take those plain <code>.php</code> files, and parse the text in it to something the processor can execute.</p>
<p>Again, this is one of PHP's strengths: the simplicity of writing a script, refreshing the page, and everything is there.
That's a big difference compared to a language that has to be compiled before it can be run.</p>
<p>Obviously there are caching mechanisms which optimise this, so the above statement is an oversimplification. It's good enough to get the next point though.</p>
<p>Once again, there is a downside: since PHP only checks its types at runtime, the program's type checks can fail when running. This means that you might have a clearer error to debug, but still the program has crashed.</p>
<p>This type checking at runtime makes PHP a dynamically typed language.
A statically typed language on the other hand
will have all its type checks done before the code is executed.</p>
<p>As of PHP 7.0, its type system has been improved quite a lot. So much so that tools like <a target="_blank" href="https://github.com/phpstan/phpstan">PHPStan</a>, <a target="_blank" href="https://github.com/phan/phan">phan</a> and <a target="_blank" href="https://github.com/vimeo/psalm">psalm</a> started to become very popular lately. These tools take the dynamic language that is PHP, but run a bunch of statical analyses on your code.</p>
<p>These opt-in libraries can offer quite a lot of insight into your code, without ever having to run or unit test it, an IDE like PhpStorm also has many of these static checks built-in.</p>
<p>With all this background information in mind, it's time to return to the core of our application: data.</p>
<h2 id="structuring-unstructured-data"><a href="#structuring-unstructured-data" class="heading-anchor">#</a> Structuring unstructured data</h2>
<p>Have you ever had to work with an "array of stuff" that was actually more than just a list?
Did you use the array keys as fields?
And did you feel the pain of not knowing exactly what was in that array?
Not being sure whether the data in it is actually what you expect it to be,
or what fields are available?</p>
<p>Let's visualise what I'm talking about: working with Laravel's requests. Think of this example as a basic CRUD operation to update an existing customer:</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">store</span><span class="hljs-params">(<span class="hljs-highlight  type">CustomerRequest</span> $request, <span class="hljs-highlight  type">Customer</span> $customer)</span> 
</span>{
    $validated = $request-&gt;<span class="hljs-highlight  prop">validated</span>();
    
    $customer-&gt;name = $validated[<span class="hljs-string">'name'</span>];
    $customer-&gt;email = $validated[<span class="hljs-string">'email'</span>];
    
    <span class="hljs-comment">// …</span>
}</code></pre>
<p>You might already see the problem arising: we don't know exactly what data is available in the <code>$validated</code> array. While arrays in PHP are a versatile and powerful data structure, as soon as they are used to represent something other than "a list of things", there are better ways to solve your problem.</p>
<p>Before looking at solutions, here's what you <em>could</em> do to deal with this situation:</p>
<ul>
<li>Read the source code</li>
<li>Read the documentation</li>
<li>Dump <code>$validated</code> to inspect it</li>
<li>Or use a debugger to inspect it</li>
</ul>
<p>Now imagine for a minute that you're working with a team of several developers on this project, and that your colleague has written this piece of code five months ago: I can guarantee you that you will not know what data you're working with, without doing any of the cumbersome things listed above.</p>
<p>It turns out that strongly typed systems in combination with static analysis can be a great help in understanding what exactly we're dealing with. Languages like Rust, for example, solve this problem cleanly:</p>
<pre><code class="language-xml hljs xml" data-lang="xml"><span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">keyword&gt;</span>struct<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">type&gt;</span>CustomerData<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span> {
    <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">prop&gt;</span>name<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>: <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">type&gt;</span>String<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>,
    <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">prop&gt;</span>email<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>: <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">type&gt;</span>String<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>,
    <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">prop&gt;</span>birth_date<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>: <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">type&gt;</span>Date<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>,
}</code></pre>
<p>A struct is what we need!
Unfortunately PHP doesn't have structs.
It has arrays and objects, and that's it.</p>
<p>However… objects and classes might be enough:</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CustomerData</span>
</span>{
    <span class="hljs-keyword">public</span> <span class="hljs-highlight  type">string</span> $name;
    <span class="hljs-keyword">public</span> <span class="hljs-highlight  type">string</span> $email;
    <span class="hljs-keyword">public</span> <span class="hljs-highlight  type">Carbon</span> $birth_date;
}</code></pre>
<p>Now I know; typed properties are only available as of PHP 7.4. Depending on when you read this book, you might not be able to use them yet — I have a solution for you later in this chapter, keep on reading.</p>
<p>For those who are able to use PHP 7.4 or higher, you can do stuff like this:</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">store</span><span class="hljs-params">(<span class="hljs-highlight  type">CustomerRequest</span> $request, <span class="hljs-highlight  type">Customer</span> $customer)</span> 
</span>{
    $validated = <span class="hljs-highlight  type">CustomerData</span>::<span class="hljs-highlight  prop">fromRequest</span>($request);
    
    $customer-&gt;name = $validated-&gt;name;
    $customer-&gt;email = $validated-&gt;email;
    $customer-&gt;birth_date = $validated-&gt;birth_date;
    
    <span class="hljs-comment">// …</span>
}</code></pre>
<p>The static analyser built into your IDE would always be able to tell us what data we're dealing with.</p>
<p>This pattern of wrapping unstructured data in types, so that we can use our data in a reliable way, is called "data transfer objects". It's the first concrete pattern I highly recommend you to use in your larger-than-average Laravel projects.</p>
<p>When discussing this book with your colleagues, friends or within the Laravel community, you might stumble upon people who don't share the same vision about strong type systems. There are in fact lots of people who prefer to embrace the dynamic and weak side of PHP. And there's definitely something to say for that.</p>
<p>In my experience though there are more advantages to the strongly typed approach when working with a team of several developers on a project for serious amounts of time. You have to take every opportunity you can to reduce cognitive load. You don't want developers having to start debugging their code every time they want to know what exactly is in a variable. The information has to be right there at hand, so that developers can focus on what's important: building the application.</p>
<p>Of course, using DTOs comes with a price: there is not only the overhead of defining these classes; you also need to map, for example, request data onto a DTO.</p>
<p>The benefits of using DTOs definitely outweigh this cost you have to pay. Whatever time you lose by writing this code, you make up for in the long run.</p>
<p>The question about constructing DTOs from "external" data is one that still needs answering though.</p>
<h2 id="dto-factories"><a href="#dto-factories" class="heading-anchor">#</a> DTO factories</h2>
<p>How do we construct DTOs? I'll share two possibilities with you, and also explain which one has my personal preference.</p>
<p>The first one is the most correct one: using a dedicated factory.</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CustomerDataFactory</span>
</span>{
    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fromRequest</span><span class="hljs-params">(
       <span class="hljs-highlight  type">CustomerRequest</span> $request
    )</span>: <span class="hljs-title">CustomerData</span> </span>{
        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-highlight  type">CustomerData</span>([
            <span class="hljs-string">'name'</span> =&gt; $request-&gt;<span class="hljs-highlight  prop">get</span>(<span class="hljs-string">'name'</span>),
            <span class="hljs-string">'email'</span> =&gt; $request-&gt;<span class="hljs-highlight  prop">get</span>(<span class="hljs-string">'email'</span>),
            <span class="hljs-string">'birth_date'</span> =&gt; <span class="hljs-highlight  type">Carbon</span>::make(
                $request-&gt;<span class="hljs-highlight  prop">get</span>(<span class="hljs-string">'birth_date'</span>)
            ),
        ]);
    }
}</code></pre>
<p>Having a separated factory keeps your code clean throughout the project. It makes most sense for this factory to live in the application layer.</p>
<p>While being the correct solution, you probably noticed I used a shorthand in a previous example, on the DTO class itself: <code>CustomerData::fromRequest</code>.</p>
<p>What's wrong with this approach? Well for one: it adds application-specific logic in the domain. The DTO which lives in the domain now has to know about the <code>CustomerRequest</code> class, which lives in the application layer.</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-keyword">use</span> <span class="hljs-highlight  type"><span class="hljs-title">Spatie</span>\<span class="hljs-title">DataTransferObject</span>\<span class="hljs-title">DataTransferObject</span></span>;

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CustomerData</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">DataTransferObject</span>
</span>{
    <span class="hljs-comment">// …</span>
    
    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fromRequest</span><span class="hljs-params">(
        <span class="hljs-highlight  type">CustomerRequest</span> $request
    )</span>: <span class="hljs-title">self</span> </span>{
        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-highlight  type"><span class="hljs-keyword">self</span></span>([
            <span class="hljs-string">'name'</span> =&gt; $request-&gt;<span class="hljs-highlight  prop">get</span>(<span class="hljs-string">'name'</span>),
            <span class="hljs-string">'email'</span> =&gt; $request-&gt;<span class="hljs-highlight  prop">get</span>(<span class="hljs-string">'email'</span>),
            <span class="hljs-string">'birth_date'</span> =&gt; <span class="hljs-highlight  type">Carbon</span>::make(
                $request-&gt;<span class="hljs-highlight  prop">get</span>(<span class="hljs-string">'birth_date'</span>)
            ),
        ]);
    }
}</code></pre>
<p>Obviously, mixing application-specific code within the domain isn't the best of ideas. However, it does have my preference. There's two reasons for that.</p>
<p>First of all: we already established that DTOs are the entry point for data into the codebase. As soon as we're working with data from the outside, we want to convert it to a DTO. We need to do this mapping <em>somewhere</em>, so we might as well do it within the class that it's meant for.</p>
<p>Secondly, and this is the more important reason; I prefer this approach because one of PHP's own limitations: it doesn't support named parameters.</p>
<p>See, you don't want your DTOs to end up having a constructor with an individual parameter for each property: this doesn't scale, and is very confusing when working with nullable or default-value properties. That's why I prefer the approach of passing an array to the DTO, and have it construct itself based on the data in that array. As an aside: we use our <a target="_blank" href="https://github.com/spatie/data-transfer-object">spatie/data-transfer-object</a> package to do exactly this.</p>
<p>Because named parameters aren't supported, there's also no static analysis available, meaning you're in the dark about what data is needed whenever you're constructing a DTO. I prefer to keep this "being in the dark" within the DTO class, so that it can be used without an extra thought from the outside.</p>
<p>If PHP were to support something like named parameters though, I would say the factory pattern is the way to go:</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fromRequest</span><span class="hljs-params">(
    <span class="hljs-highlight  type">CustomerRequest</span> $request
)</span>: <span class="hljs-title">CustomerData</span> </span>{
    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-highlight  type">CustomerData</span>(
        <span class="hljs-string">'name'</span> =&gt; $request-&gt;<span class="hljs-highlight  prop">get</span>(<span class="hljs-string">'name'</span>),
        <span class="hljs-string">'email'</span> =&gt; $request-&gt;<span class="hljs-highlight  prop">get</span>(<span class="hljs-string">'email'</span>),
        <span class="hljs-string">'birth_date'</span> =&gt; <span class="hljs-highlight  type">Carbon</span>::make(
            $request-&gt;<span class="hljs-highlight  prop">get</span>(<span class="hljs-string">'birth_date'</span>)
        ),
    );
}</code></pre>
<p>Note the lack of an array when constructing <code>CustomerData</code>.</p>
<p>Until PHP supports this, I would choose the pragmatic solution over the theoretical correct one. It's up to you though. Feel free to choose what fits your team best.</p>
<h2 id="an-alternative-to-typed-properties"><a href="#an-alternative-to-typed-properties" class="heading-anchor">#</a> An alternative to typed properties</h2>
<p>As I mentioned before, there is an alternative to using typed properties to support DTOs: docblocks. Our DTO <a target="_blank" href="https://github.com/spatie/data-transfer-object">package</a> I linked to earlier also supports them.</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-keyword">use</span> <span class="hljs-highlight  type"><span class="hljs-title">Spatie</span>\<span class="hljs-title">DataTransferObject</span>\<span class="hljs-title">DataTransferObject</span></span>;

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CustomerData</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">DataTransferObject</span>
</span>{
    <span class="hljs-comment">/** <span class="hljs-doctag">@var</span> string */</span>
    <span class="hljs-keyword">public</span> $name;
    
    <span class="hljs-comment">/** <span class="hljs-doctag">@var</span> string */</span>
    <span class="hljs-keyword">public</span> $email;
    
    <span class="hljs-comment">/** <span class="hljs-doctag">@var</span> \Carbon\Carbon */</span>
    <span class="hljs-keyword">public</span> $birth_date;
}</code></pre>
<p>By default though, docblocks don't give any guarantees that the data is of the type they say it is. Luckily PHP has its reflection API, and with it, a lot more is possible.</p>
<p>The solution provided by this package can be thought of as an extension of PHPs type system. While there's only so much one can do in userland and at runtime, still it adds value. If you're unable to use PHP 7.4 and want a little more certainty that your docblock types are actually respected, this package has you covered.</p>
<div class="author footnotes">
<p>I'm working on a brand new version of this series, it will contain a video course, ebook and a project built from the ground up with these principles!
</p>
<br>
<p><a class="cta cta-small cta-bold" target="_blank" rel="noopener noreferrer" href="https://laravel-beyond-crud.com/">Read more</a></p>
</div>
<hr />
<p>Because data lives at the core of almost every project, it's one of the most important building blocks. Data transfer objects offer you a way to work with data in a structured, type safe and predictable way.</p>
<p>You'll note throughout this book that DTOs are used more often than not. That's why it was so important to take an in-depth look at them at the start.
Likewise, there's another crucial building block that needs our thorough attention: actions. That's the topic for the next chapter, it will be released next week.</p>
 ]]></summary>

                <updated>2019-10-18T00:00:00+00:00</updated>
            </entry>
                                <entry>
                <title><![CDATA[ 01. Domain oriented Laravel ]]></title>

                <link rel="alternate" href="https://stitcher.io/blog/laravel-beyond-crud-01-domain-oriented-laravel"/>

                <id>https://www.stitcher.io/blog/laravel-beyond-crud-01-domain-oriented-laravel</id>

                <author>
                    <name><![CDATA[ Brent Roose ]]></name>
                </author>

                <summary type="html"><![CDATA[ <div class="author footnotes">
<p>I'm working on a brand new version of this series, it will contain a video course, ebook and a project built from the ground up with these principles!
</p>
<br>
<p><a class="cta cta-small cta-bold" target="_blank" rel="noopener noreferrer" href="https://laravel-beyond-crud.com/">Read more</a></p>
</div>
<blockquote>
<p>Humans think in categories, our code should be a reflection of that.</p>
</blockquote>
<p>First things first, I didn't come up with the term "domain" — I got it from the popular programming paradigm DDD, or "domain driven design". According to Oxford Dictionary, a "domain" can be described as <em>"A specified sphere of activity or knowledge"</em>.</p>
<p>While my use of the word "domain" won't exactly mean the same as when used within DDD, there are several similarities. If you're familiar with DDD, you'll discover these similarities throughout this book. I tried my best to mention any overlap and differences when relevant.</p>
<p>So, domains. You could also call them "groups", "modules"; some people call them "services". Whichever name you prefer, domains describe a set of the business problems you're trying to solve.</p>
<p>Hang on… I realise I just used my first "enterprisey" term in this book: "the business problem". Making your way through this book, you'll note that I did my best to steer away from the theoretical, upper-management, business side of things. I'm a developer myself and prefer to keep things practical. So another, simpler, name would be "the project".</p>
<p>Let's give an example: an application to manage hotel bookings. It has to manage customers, bookings, invoices, hotel inventories, etc.</p>
<p>Modern web frameworks teach you to take one group of related concepts, and split it across multiple places throughout your codebase: controller with controllers, models with models; you get the deal.</p>
<p>Has a client ever told you to "work on all controllers now", or to "spend some time in the models directory"? No — they ask you to work on invoicing, customer management or bookings features.</p>
<p>These groups are what I call domains. They aim to group together concepts within your project that belong together. While this might seem trivial at first, it's more complicated than you might think. That's why part of this book will focus on a set of rules and practices to keep your code nicely ordered.</p>
<p>Obviously there's no mathematical formula I can give you, almost everything depends on the specific project you're working on. So don't think of this book as giving a fixed set of rules. Rather think of it as handing you a collection of ideas that you can use and build upon, however you like.</p>
<p>It's a learning opportunity, much more than a solution you can throw at whatever problem you encounter.</p>
<h2 id="domains-and-applications"><a href="#domains-and-applications" class="heading-anchor">#</a> Domains and applications</h2>
<p>If we're grouping ideas together, evidently the question arises: how far do we go? You could for example group everything invoice-related together: models, controllers, resources, validation rules, jobs, …</p>
<p>This raises a problem in classic HTTP applications: there often isn't a one-to-one mapping between controllers and models. Granted, in REST APIs and for the majority of your classic CRUD controllers there might be a strict one-to-one mapping, but unfortunately these are the exceptions to the rules that will give us a hard time. Invoices for example are simply not handled in isolation, they need a customer to be sent to, they need bookings to invoice, etc.</p>
<p>That's why we need to make a further distinction between what is domain code, and what is not.</p>
<p>On the one hand there's the domain, representing all the business logic; and on the other hand, we have code that uses — consumes — that domain to integrate it with the framework and exposes it to the end-user. Applications provide the infrastructure for end-users to use and manipulate the domain in a user-friendly way.</p>
<h2 id="in-practice"><a href="#in-practice" class="heading-anchor">#</a> In practice</h2>
<p>So what does this look like in practice? The domain will hold classes like models, query builders, domain events, validation rules and more; we will look at all these concepts in-depth.</p>
<p>The application layer will hold one or several applications. Every application can be seen as an isolated app which is allowed to use all of the domain. In general, applications don't talk to each other.</p>
<p>One example could be a standard HTTP admin panel, and another one could be a REST API. I also like to think of the console, Laravel's artisan, as an application of its own.</p>
<p>As a high level overview, here's what the folder structure of a domain-oriented project might look like:</p>
<pre><code class="language-txt"><span class="hljs-highlight  comment">One specific domain folder per business concept</span>
app/Domain/Invoices/
    ├── Actions
    ├── QueryBuilders
    ├── Collections
    ├── DataTransferObjects
    ├── Events
    ├── Exceptions
    ├── Listeners
    ├── Models
    ├── Rules
    └── States

app/Domain/Customers/
    <span class="hljs-highlight  comment">// …</span></code></pre>
<p>And this is what the application layer would look like:</p>
<pre><code class="language-txt"><span class="hljs-highlight  comment">The admin HTTP application</span>
app/App/Admin/
    ├── Controllers
    ├── Middlewares
    ├── Requests
    ├── Resources
    └── ViewModels

<span class="hljs-highlight  comment">The REST API application</span>
app/App/Api/
    ├── Controllers
    ├── Middlewares
    ├── Requests
    └── Resources

<span class="hljs-highlight  comment">The console application</span>
app/App/Console/
    └── Commands</code></pre>
<h2 id="on-the-topic-of-namespaces"><a href="#on-the-topic-of-namespaces" class="heading-anchor">#</a> On the topic of namespaces</h2>
<p>You might have noticed that the above example doesn't follow the Laravel convention of <code>\App</code> as the single root namespace. Since applications are only part of our project, and because there can be several, it doesn't make sense to use <code>\App</code> as the root for everything.</p>
<p>If you do prefer to stay closer to Laravel's default structure, you're allowed to do that. This means you'll end up with namespaces like <code>\App\Domain</code> and <code>\App\Api</code>. But you're free to do what you're comfortable with.</p>
<p>If you want to separate the root namespaces though, you can do so by making a slight change in <code>composer.json</code>:</p>
<pre><code class="language-json hljs json" data-lang="json">{
    <span class="hljs-comment">// …</span>

    <span class="hljs-attr">"<span class="hljs-highlight  prop">autoload</span>"</span> : {
        <span class="hljs-attr">"<span class="hljs-highlight  prop">psr-4</span>"</span> : {
            <span class="hljs-attr">"<span class="hljs-highlight  prop">App\\</span>"</span> : <span class="hljs-string">"app/App/"</span>,
            <span class="hljs-attr">"<span class="hljs-highlight  prop">Domain\\</span>"</span> : <span class="hljs-string">"app/Domain/"</span>,
            <span class="hljs-attr">"<span class="hljs-highlight  prop">Support\\</span>"</span> : <span class="hljs-string">"app/Support/"</span>
        }
    }
}</code></pre>
<p>Note that I also have a <code>\Support</code> root namespace, which for now you can think of as the dumping ground for all little helpers that don't belong anywhere.</p>
<div class="author footnotes">
<p>I'm working on a brand new version of this series, it will contain a video course, ebook and a project built from the ground up with these principles!
</p>
<br>
<p><a class="cta cta-small cta-bold" target="_blank" rel="noopener noreferrer" href="https://laravel-beyond-crud.com/">Read more</a></p>
</div>
<hr />
<p>Whatever folder structure you use, most important is that you start thinking in groups of related business concepts, rather than in groups of code with the same technical properties.</p>
<p>Within each group, each domain, there's room to structure the code in ways that make it easy to use within those individual groups though. The first part of this book will look closely at how domains can be structured internally and which patterns can be used to help you keep your codebase maintainable as it grows over time. After that, we'll look at the application layer, how the domain can be consumed exactly, and how we improve upon existing Laravel concepts by using for example view models.</p>
<p>There's a lot of ground to cover, and I hope you'll be able to learn many things from this that you'll be able to put into practice right away.</p>
 ]]></summary>

                <updated>2019-10-17T00:00:00+00:00</updated>
            </entry>
                                <entry>
                <title><![CDATA[ Guest posts ]]></title>

                <link rel="alternate" href="https://stitcher.io/blog/guest-posts"/>

                <id>https://www.stitcher.io/blog/guest-posts</id>

                <author>
                    <name><![CDATA[ Brent Roose ]]></name>
                </author>

                <summary type="html"><![CDATA[ <p>I've been thinking about the idea of allowing other people to write on my blog for a while now. Guest posting is popular in the broader blogging community, and I wanted to give it some careful thought.</p>
<p>I regularly get requests from people to write a guest post on this blog, but these requests often involve low-quality content just to boost SEO stats. This is something I want to stay far away from.</p>
<p>I realised though that there might be people out there who have a great idea for a blog post, but don't want to spend time maintaining a blog, and don't want to post to a network like Medium. Quality content might never be written because of this, and I realised that independent blogs like mine can offer a solution.</p>
<p>I think of it as a win-win: content creators get an outlet for their ideas, my audience gets more quality content to read, and this blog can keep on growing.</p>
<h2 id="quality-assurance"><a href="#quality-assurance" class="heading-anchor">#</a> Quality assurance</h2>
<p>Regular readers of my blog know that I try my best to only write quality content. I don't keep a schedule which forces me to write every week or month, I only write when I feel like I've got something to say that's worth sharing.</p>
<p>I want guest posts on this blog to be the same. That's why I will personally review every one of them, and will only post them when I think they meet a quality level my audience would appreciate.</p>
<p>I believe a set of rules and agreements is in place. If you're thinking about pitching a guest post, please read these carefully.</p>
<h3 id="your-content,-not-mine"><a href="#your-content,-not-mine" class="heading-anchor">#</a> Your content, not mine</h3>
<p>Guest posts will always stay your property, not mine. This means that if you ever want to move your content to your own blog, you're free to do so.</p>
<p>This of course also means that you're responsible for writing quality content. I'll be happy to review and help improve your content, but you'll be the one who has to do it.</p>
<p>This also means that guest posts will always be properly attributed. You'll be able to provide links to your social media or personal website.</p>
<p>Lastly, every one of my own blogposts has one ad in it, which helps keep this blog going. You're free to ask me to remove it in your content.</p>
<h3 id="what-to-expect-from-me?"><a href="#what-to-expect-from-me?" class="heading-anchor">#</a> What to expect from me?</h3>
<p>I will help you in reviewing your content and provide feedback to improve it. I'm by no means an expert writer or copy editor myself, but I have been doing this for a few years now, so I might be able to help you if you're a beginning writer.</p>
<p>Reviewing your content will either happen via mail or directly on GitHub, whichever you prefer. I will make sure to always discuss any changes I want to be made to the post, and will never alter your content without you knowing it.</p>
<p>Finally, I will also help promote your content once it's launched, and provide feedback regarding traffic afterwards. I cannot guarantee any hard numbers on what kind of traffic your post will get, but I can give you some numbers on the monthly traffic on my blog:</p>
<ul>
<li>Between 40k and 60k users per month, with 60k-80k sessions per month</li>
<li>My blog posts have on average between 1k and 6k sessions per month</li>
</ul>
<h2 id="now-what?"><a href="#now-what?" class="heading-anchor">#</a> Now what?</h2>
<p>Since this is new for me too, I've got no idea where it'll go from here on out. If you're interested in the idea and would like to talk about something concrete, feel free to <a href="mailto:brent@stitcher.io">send me an email</a> and we'll see whether we're a good match. Make sure to provide the following information:</p>
<ul>
<li>If you're a blogger, links to your existing content</li>
<li>Your motivation about why you want to write a guest post</li>
<li>An abstract about what you want to write about</li>
</ul>
 ]]></summary>

                <updated>2019-09-16T00:00:00+00:00</updated>
            </entry>
                                <entry>
                <title><![CDATA[ re: re: A letter to the PHP team ]]></title>

                <link rel="alternate" href="https://stitcher.io/blog/a-letter-to-the-php-team-reply-to-joe"/>

                <id>https://www.stitcher.io/blog/a-letter-to-the-php-team-reply-to-joe</id>

                <author>
                    <name><![CDATA[ Brent Roose ]]></name>
                </author>

                <summary type="html"><![CDATA[ <p>Thanks you Joe for taking the time to <a target="_blank" href="https://blog.krakjoe.ninja/2019/08/bearings.html">reply</a> to <a href="/blog/a-letter-to-the-php-team">my letter</a>, I really appreciate it! I'll be happy to reply here.</p>
<p>Your reply started by addressing the P++ shenanigans:</p>
<blockquote>
<p>A lot of the discussion is based on an assertion made during the P++ discussion that there are two camps of developers</p>
</blockquote>
<p>As a matter of fact, I <a target="_blank" href="https://github.com/brendt/stitcher.io/commit/26fc4de353ca6beaff1cfd7b5f4b0c86f4f739b6">started writing</a> my letter before the whole P++ galaxy discussion. Life got in the way though (my son was born at the beginning of August), which is why it took almost a month to publish it.</p>
<p>I just wanted to make clear that I already had many thoughts on the topic before P++ was ever mentioned.</p>
<blockquote>
<p>You can tell by looking at the history of RFCs that these factions do not in fact exist</p>
</blockquote>
<p>Whether we call it factions or not, if you take a look at recent <abbr>RFC</abbr>s, they have almost always gone off topic for to discuss the future of <abbr>PHP</abbr> on a broader scale. Sure there might only a few people, but loud voices are heard nevertheless.</p>
<p>A few examples:</p>
<ul>
<li>
<a target="_blank" href="https://externals.io/message/106713">Reclassifying engine warnings</a>
</li>
<li>
<a target="_blank" href="https://externals.io/message/106384">Short open tags</a>
</li>
<li>
<a target="_blank" href="https://externals.io/message/101323">Namespace-scoped declares</a>
</li>
<li>
<a target="_blank" href="https://externals.io/message/101254">Explicit call-site send-by-ref syntax</a>
</li>
<li>
<a target="_blank" href="https://externals.io/message/106012">Deprecations for 7.4</a>
</li>
</ul>
<p>This is how most of these discussion go:</p>
<ul>
<li>Nikita tries to move the language forward</li>
<li>Zeev and/or Stas advocate for backwards compatibility, resulting in the same long conversation over and over again</li>
<li>Sara tries to keep the middle ground</li>
<li>Dmitry is working on <abbr>PHP 8</abbr> somewhere in the background, and steers away from these discussions</li>
</ul>
<blockquote>
<p>The rules were written many years ago - arguably for a totally different, pre social coding world - we mostly do a good job of following the rules as they are written.</p>
</blockquote>
<p>I think you addressed the essence of the problem: the way <abbr>PHP</abbr> internals work is outdated and inefficient in these modern times.</p>
<blockquote>
<p>It's important to point out that the rules are not exhaustive, a lot of how we behave is determined by convention. You can argue against this and say that we should try to exhaustively enumerate every possible action</p>
</blockquote>
<p>I'd argue we need a sensible and modern day rule set, which can be flexible.</p>
<blockquote>
<p>Recently an RFC was conducted to deprecate and remove short PHP tag syntax</p>
</blockquote>
<p>While I do have my opinions on maintaining backwards compatibility — which I addressed in the first part of my letter — I think the most important thing to take away from the short syntax <abbr>RFC</abbr> is that the process is clearly broken, and needs fixing.</p>
<blockquote>
<p>What we have here is a failing of our processes and nothing more. I and likely others are considering how we might avoid this very same failure in the future. It seems desirable at this time to introduce a formal deprecation policy, this both achieves the goal of avoiding this very same failure, and can potentially increase confidence when it comes to adopting new versions of PHP.</p>
</blockquote>
<p>Glad we're on the same page on this one, and I know from your comments on internals that you're also looking for a balanced solution. My question is whether this is possible within the current system. It feels like we're going around in circles and very little progress is made.</p>
<blockquote>
<p>First, for the sake of clarity. You must be careful how you determine something to be controversial. Loud, is not the same as controversial</p>
</blockquote>
<p>That's true, though a few loud voices can impact the development of <abbr>PHP</abbr> significantly. There aren't many core contributors, and they have to spend a lot of time reading and replying through the same discussions. I try to keep up-to-date with the internals list myself, so I know this is an exhaustive task.</p>
<blockquote>
<p>The time and effort it takes to change our processes is considerable, and only becomes a priority when it's obvious that our processes are failing, or have the potential to fail and do damage.</p>
</blockquote>
<p>I think <abbr>PHP</abbr> is only slowly evolving because there's so much needless discussions happening over and over again, I'd call that a failing process.</p>
<blockquote>
<p>I'm sure that you have a sample of data that shows you this, or you surely wouldn't have made this claim.</p>
</blockquote>
<p>Yes, I linked some recent examples previously.</p>
<blockquote>
<p>It's a matter of fact that some people can't seem to behave themselves on the internet, while I'm sure (read: must believe) they are reasonable people in real life. These people make themselves obvious very quickly and prove they have nothing much to say.</p>
</blockquote>
<p>I think some kind of moderation would be in place, as these people keep coming back, and there's no way to stop them. This is where a mailing list just doesn't suffice.</p>
<blockquote>
<p>I can't argue that mailing lists are a good way to communicate, but it's what we have.
However, it's not all we have:</p>
</blockquote>
<p>True, though the channels you list still don't seem to bridge the gap between core- and userland developers. This is evident by the amount of userland developers voicing their opinions on all kinds of social media. I think a public forum is the way to go here.</p>
<blockquote>
<p>This is regularly mentioned, and I think I'll be the first one to point out that to the extent which that is true, it is the communities fault.</p>
</blockquote>
<p>There are two groups here:</p>
<ul>
<li>People who are very much invested in <abbr>PHP</abbr>, but don't want anything to do with the internal discussions, because of offtopic and exhausting conversations</li>
<li>People who would actually want to contribute in the form of votes and input, but don't know how.</li>
</ul>
<p>The wiki isn't very clear on this:</p>
<blockquote>
<p>People with php.net VCS accounts that have contributed code to PHP</p>
<p>Representatives from the PHP community, that will be chosen by those with php.net VCS accounts
Lead developers of PHP based projects (frameworks, cms, tools, etc.)
regular participant of internals discussions</p>
</blockquote>
<p>Personally, I think of myself in this second group, though it's unclear to me whether my perception is correct. And I can think of several other developers who would be an accurate representation of the <abbr>PHP</abbr> community.</p>
<p>Should I ask? As a matter of fact, I did ask a core member personally, but didn't get a reply. Should I ask this question on the internals list? I'm unsure.</p>
<p>This is again an example of failing communication between core- and userland developers. There's a barrier that's perceived as uncrossable.</p>
<p>Now I'm not saying there is an actual barrier, I just say that it's perceived by many userland developers this way, myself included.</p>
<hr />
<p>Once again, thank you very much for your reply Joe. I highly appreciate it and am looking forward to read your comments on mine.</p>
<p>Kind regards
<br>
Brent</p>
 ]]></summary>

                <updated>2019-08-29T00:00:00+00:00</updated>
            </entry>
                                <entry>
                <title><![CDATA[ A letter to the PHP team ]]></title>

                <link rel="alternate" href="https://stitcher.io/blog/a-letter-to-the-php-team"/>

                <id>https://www.stitcher.io/blog/a-letter-to-the-php-team</id>

                <author>
                    <name><![CDATA[ Brent Roose ]]></name>
                </author>

                <summary type="html"><![CDATA[ <p>To whomever contributes to <abbr>PHP</abbr>, from a userland developer.</p>
<p>Let me start by thanking those who actively work on the <abbr>PHP</abbr> project. Those who contribute to the core, extensions, maintain the docs or vote on <abbr>RFC</abbr>s: thank you for a language that I can use every day both in my professional and personal life. <abbr>PHP</abbr> has been a very useful tool to me for many years, and it's good to see lots of contributors help making it better every day.</p>
<p>I also want to mention that I, as everyone, am subject to confirmation bias. When I address one or two thoughts in this letter, I'll try my best to be as objective as possible, though I realise I'm looking through my lens, and not someone else's.</p>
<p>Since the goal of this letter is to start a conversation, I'm open to hear your thoughts. Also if they don't align with mine, please feel free to disagree.</p>
<p><div class="ad-container">
    <script async type="text/javascript" src="//cdn.carbonads.com/carbon.js?serve=CK7ICK3W&placement=stitcherio" id="_carbonads_js"></script>
</div>
</p>
<hr />
<p>I could continue by listing lots of good things — there are many. Though because I want to keep this letter on topic, I won't be doing that. Don't take this as me being a disgruntled developer, I simply want to be efficient in conveying what I want to say.</p>
<p>I want to write about how <abbr>PHP</abbr> is shaped and developed these days. I feel that I, as a userland developer, know a thing or two about using <abbr>PHP</abbr> in real projects. I believe I have an informed and relevant opinion on the matter.</p>
<p>Recently we've seen several discussions regarding the <abbr>RFC</abbr> voting process. Besides <a target="_blank" href="https://wiki.php.net/rfc/abolish-narrow-margins">recent</a> <a target="_blank" href="https://wiki.php.net/rfc/abolish-short-votes">changes</a> to the voting rules, there have also been a few controversial <abbr>RFC</abbr>s which passed the vote, and caused some — in some cases, lots of — controversy.</p>
<p>Two recent <abbr>RFC</abbr>s come to mind: the <a target="_blank" href="https://wiki.php.net/rfc/deprecate_php_short_tags">deprecation of the short open tags</a>, as well as <a target="_blank" href="https://wiki.php.net/rfc/deprecations_php_7_4">several small deprecations</a> for <abbr>PHP 7.4</abbr>.</p>
<p>Both <abbr>RFC</abbr>s caused discussion on whether these changes are actually beneficial to the language, whether they should be allowed with only a 2/3 majority vote, and whether they should be considered harmful to the <abbr>PHP</abbr> community.</p>
<p>The basis for most of these discussions is the fact that <abbr>PHP</abbr> tries to maintain backwards compatibility as much as possible. One of the main thoughts behind this is that we want users to stay up-to-date with modern <abbr>PHP</abbr> versions, so we should give them as little problems as possible to upgrade.</p>
<p>Lessons were, rightfully, learned from the 5.* era. I too share the opinion that all <abbr>PHP</abbr> developers and ecosystems should strive to stay up-to-date. It's a message that companies and developers should tell their clients at the start of every project: keeping it secure and up-to-date will take time, cost money, and there's no responsible way to avoid it.</p>
<p>It's a characteristic of professionalism.</p>
<p>On the other hand: if we want to achieve this professionalism with our clients, we are also allowed to spend reasonable amounts of time on upgrades. It is not the end of the world if there's a backwards incompatible change. We can deal with it.</p>
<p>As a day-by-day user of <abbr>PHP</abbr>, I have also had my share of legacy projects that needed updating. Let me tell you this: I much more prefer <abbr>PHP</abbr> to move forward and mature, rather than me spending less time on upgrades.</p>
<p>In a maturing language, it's evident that some old legacy stuff is cleaned up. It means that the language sometimes removes two ways to do the same thing. It means that, for example, short open tags are deprecated and removed. It means that sometimes my code will break. And as long as the language evolves in a good and healthy way, I don't mind.</p>
<p>If you're one of the enthusiastic guards of backwards compatibility: I know you mean well. But I don't think it's that big a deal you make out of it. The world will not end because there's a breaking change. We, userland developers, will manage.</p>
<p>Let's not waste too much time with seemingly endless discussion over and over again. Let's move forward in balanced way.</p>
<hr />
<p>Speaking of how we spend time. Internals have been discussing voting mechanics and what to do with controversial <abbr>RFC</abbr>s for months now.</p>
<p>Shouldn't we start looking at how other communities do this? For sure <abbr>PHP</abbr> can't be the only open source language out there?</p>
<p>Let's call the current way of <abbr>PHP</abbr>'s development for what it really is: the same discussions happen over and over again on a weekly or monthly basis without any progress; people are personally attacking others regularly; an insignificant <abbr>RFC</abbr> takes months of discussion and requires a re-vote after being accepted; there aren't any good ways to share constructive feedback apart from the big mailing list; the group of voters doesn't seem to be an accurate representation the actual <abbr>PHP</abbr> community.</p>
<p>Am I fair to call this system, at least partially, broken?</p>
<p>I believe our system should be thoroughly evaluated, and I think we <em>should</em> look at how open source communities outside of <abbr>PHP</abbr> manage to keep moving their project forward in a healthy way.</p>
<p>One example is <abbr>TC39</abbr>, the committee that manages <abbr>ECMAS</abbr>cript, aka JavaScript. Dr. Axel Rauschmayer wrote <a target="_blank" href="https://2ality.com/2015/11/tc39-process.html">a great post</a> about how the <abbr>TC39</abbr> process works. Now, you might love or hate JavaScript, but it's clear that they are doing something right over there, given the lasting success of the language over the years.</p>
<p>One of the things they get right is an open communication channel with their community. Communication that is transparent and accessible between contributors and users via <a target="_blank" href="https://github.com/tc39/ecma262">GitHub</a>. Another language that does this is Rust, which provides <a target="_blank" href="https://internals.rust-lang.org">an open forum</a> to discuss how the language is shaped.</p>
<p>An open place like GitHub or a forum diminishes the barrier most userland developers experience with the internals mailing list. Many of us read it, though very little userland developers actually feel they can voice their opinion on it. I think there's two reasons for this:</p>
<ul>
<li>The mailing list is difficult to navigate compared to forums and threads</li>
<li>It's often a hostile place, lacking basic decency and proper moderation</li>
</ul>
<p>Better communication will close the current disconnect between the two groups, it will allow <abbr>PHP</abbr> to become what the actual majority of <abbr>PHP</abbr> users want it to be.</p>
<p>Besides communication, there's the matter of what features should be added to the language. <abbr>TC39</abbr> provides a clear framework on how the language can evolve; it's a system that's superior to and less confusing than <abbr>PHP</abbr>'s current <abbr>RFC</abbr> process.</p>
<p>I already mentioned that the <abbr>RFC</abbr> process has been an on-and-off hot debate for the past months; it's at the point where many <abbr>RFC</abbr> proposals on the mailing list spark the same discussion over and over again, with no results. Let's again look at committees like <abbr>TC39</abbr>, and fix it once and for all.</p>
<hr />
<p>There's more things to do to fix the current broken process of <abbr>PHP</abbr>'s development, but I can't possibly list everything here today. So I think it'd be good to keep the conversation going. My suggestion would be to go over to <a target="_blank" href="https://www.reddit.com/r/PHP/comments/cwueyd/a_letter_to_the_php_team/">Reddit</a> where we can discuss it further, or send me an <a href="mailto:brendt@stitcher.io">email</a>.</p>
<p>Kind regards
<br>
Brent</p>
<hr />
<p>Update August 29: Joe Watkins was kind enough to write a reply. You can read it <a target="_blank" href="https://blog.krakjoe.ninja/2019/08/bearings.html">here</a>.</p>
<p>You can read my reply to Joe's <a href="/blog/a-letter-to-the-php-team-reply-to-joe">here</a>.</p>
 ]]></summary>

                <updated>2019-08-28T00:00:00+00:00</updated>
            </entry>
                                <entry>
                <title><![CDATA[ Things dependency injection is not about ]]></title>

                <link rel="alternate" href="https://stitcher.io/blog/things-dependency-injection-is-not-about"/>

                <id>https://www.stitcher.io/blog/things-dependency-injection-is-not-about</id>

                <author>
                    <name><![CDATA[ Brent Roose ]]></name>
                </author>

                <summary type="html"><![CDATA[ <p>If you're using any modern framework, chances are you're heavily relying on dependency injection. But do you know what dependency injection <em>actually</em> is about — or better: what it's <em>not</em>?</p>
<h2 id="the-dependency-container"><a href="#the-dependency-container" class="heading-anchor">#</a> The dependency container</h2>
<p>While every modern framework ships with a dependency container — a big box that knows how to construct objects for you — it doesn't guarantee you'll actually be using the dependency injection pattern the way it's supposed to be.</p>
<p>The container <em>can</em> make it much easier to have dependencies injected into a class, but it can also be abused quite a lot.</p>
<p><div class="ad-container">
    <script async type="text/javascript" src="//cdn.carbonads.com/carbon.js?serve=CK7ICK3W&placement=stitcherio" id="_carbonads_js"></script>
</div>
</p>
<h2 id="service-location"><a href="#service-location" class="heading-anchor">#</a> Service location</h2>
<p>One way to (ab)use the container is to <em>pull</em> objects from it, instead of having them injected into the current context. This pattern is called "service location", and is the opposite of dependency injection. It looks like this:</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyController</span>
</span>{
    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">indexAction</span><span class="hljs-params">()</span>
    </span>{
        $service = <span class="hljs-highlight  prop">app</span>(<span class="hljs-highlight  type">Service</span>::class);

        <span class="hljs-comment">// …        </span>
    }
}</code></pre>
<p>Service location will ask the container for a specific object. This makes the context you're pulling this service from a difficult point to test, as well as a black box to the outside: you're unable to know what kind of external dependencies <code>MyController</code> uses, without looking at all of the code.</p>
<p>Some frameworks promote this use of the container, because it can be simple and fast at the start of a project. In projects with hundreds, maybe even thousands of classes registered in the container, the use of service location can and will become a mess; one that proper use of dependency injection would solve.</p>
<p>I also recommend you to read my post on <a href="/blog/service-locator-anti-pattern">why service location is an anti-pattern</a>.</p>
<h2 id="shared-dependencies"><a href="#shared-dependencies" class="heading-anchor">#</a> Shared dependencies</h2>
<p>Moving on to some more positive vibes: making use of the container in a good way.</p>
<p>When dependency injection is properly used, the outside context — in many cases the container — has control over the concrete dependency that it's injecting into a class. This means that the same object can be injected into several other contexts, without those contexts having to know anything about them being "singletons" or "shared dependencies".</p>
<p>Even though sharing dependencies can be a good and powerful thing to do, it is still <em>not</em> what dependency injection is about, but rather a beneficial side effect.</p>
<h2 id="auto-wiring"><a href="#auto-wiring" class="heading-anchor">#</a> Auto wiring</h2>
<p>Finally, another useful feature that, again, isn't what dependency injection is about: autowiring.</p>
<p>To give developers more flexibility, some containers allow
for smart, automatically determined, class definitions.
This means you don't have to manually describe how every class should be constructed.
These containers will scan your code, and determine which dependencies are needed
by looking at type hints and doc blocks.</p>
<p>A lot of magic happens here, but auto wiring can be a useful tool for rapid application development.</p>
<hr />
<p>If by now, you want a refresher on the basics of what dependency injection <em>is</em> about. You can go read up on it <a href="/blog/dependency-injection-for-beginners">here</a>.</p>
 ]]></summary>

                <updated>2019-07-30T00:00:00+00:00</updated>
            </entry>
                                <entry>
                <title><![CDATA[ Tests and types ]]></title>

                <link rel="alternate" href="https://stitcher.io/blog/tests-and-types"/>

                <id>https://www.stitcher.io/blog/tests-and-types</id>

                <author>
                    <name><![CDATA[ Brent Roose ]]></name>
                </author>

                <summary type="html"><![CDATA[ <p>Imagine a simple function: <code>rgbToHex</code>.
It takes three arguments, integers between <span class="number">0</span> and <span class="number">255</span>; and converts it to a hexadecimal string.</p>
<p>Here's what this function's definition might look like in a dynamic, weakly typed language:</p>
<pre><code class="language-processing hljs processing" data-lang="processing"><span class="hljs-highlight  prop">rgbToHex</span>(<span class="hljs-built_in">red</span>, <span class="hljs-built_in">green</span>, <span class="hljs-built_in">blue</span>) {
    <span class="hljs-comment">// …</span>
}</code></pre>
<p>I think we all agree that "program correctness" is essential.
We don't want any bugs, so we write tests.</p>
<pre><code class="language-xml hljs xml" data-lang="xml"><span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">prop&gt;</span>assert<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>(<span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">prop&gt;</span>rgbToHex<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>(<span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">keyword&gt;</span>0<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>, <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">keyword&gt;</span>0<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>, <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">keyword&gt;</span>0<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>) == '000000')

<span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">prop&gt;</span>assert<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>(<span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">prop&gt;</span>rgbToHex<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>(<span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">keyword&gt;</span>255<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>, <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">keyword&gt;</span>255<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>, <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">keyword&gt;</span>255<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>) == 'ffffff')

<span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">prop&gt;</span>assert<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>(<span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">prop&gt;</span>rgbToHex<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>(<span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">keyword&gt;</span>238<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>, <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">keyword&gt;</span>66<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>, <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">keyword&gt;</span>244<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>) == 'ee42f4')</code></pre>
<p>Because of our tests, we can be sure our implementation works as expected. Right?</p>
<p>Well… We're actually only testing three out of the <span class="number">16,777,216</span> possible colour combinations.
But human reasoning tells us that if these three cases work, all probably do.</p>
<p>What happens though if we pass doubles instead of integers?</p>
<pre><code class="language-xml hljs xml" data-lang="xml"><span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">prop&gt;</span>rgbToHex<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>(<span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">keyword&gt;</span>1.5<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>, <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">keyword&gt;</span>20.2<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>, <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">keyword&gt;</span>100.1<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>)</code></pre>
<p>Or numbers outside of the allowed range?</p>
<pre><code class="language-xml hljs xml" data-lang="xml"><span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">prop&gt;</span>rgbToHex<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>(<span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">keyword&gt;</span>-504<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>, <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">keyword&gt;</span>305<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>, <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">keyword&gt;</span>-59<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>)</code></pre>
<p>What about <code>null</code>?</p>
<pre><code class="language-xml hljs xml" data-lang="xml"><span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">prop&gt;</span>rgbToHex<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>(<span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">keyword&gt;</span>null<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>, <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">keyword&gt;</span>null<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>, <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">keyword&gt;</span>null<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>)</code></pre>
<p>Or strings?</p>
<pre><code class="language-dts hljs dts" data-lang="dts"><span class="hljs-params"><span class="hljs-highlight  prop"></span>rgbToHex<span class="hljs-params"></span></span>(<span class="hljs-string">"red"</span>, <span class="hljs-string">"green"</span>, <span class="hljs-string">"blue"</span>)</code></pre>
<p>Or the wrong amount of arguments?</p>
<pre><code class="language-xml hljs xml" data-lang="xml"><span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">prop&gt;</span>rgbToHex<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>()

<span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">prop&gt;</span>rgbToHex<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>(1, 2)

<span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">prop&gt;</span>rgbToHex<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>(1, 2, 3, 4)</code></pre>
<p>Or a combination of the above?</p>
<p><a name="read-on"></a></p>
<p>I can easily think of five edge-cases we need to test,
before there's relative certainty our program does what it needs to do.
That's at least eight tests we need to write — and I'm sure you can come up with a few others given the time.</p>
<p>These are the kind of problems a type system aims to <em>partially</em> solve.
And note that word <em>partially</em>, we'll come back to it.</p>
<p>If we filter input by a type — you can think of it as a subcategory of all available input — many of the tests become obsolete.</p>
<p>Say we'd only allow integers:</p>
<pre><code class="language-dts hljs dts" data-lang="dts"><span class="hljs-params"><span class="hljs-highlight  prop"></span>rgbToHex<span class="hljs-params"></span></span>(<span class="hljs-params"><span class="hljs-highlight  type"></span>Int<span class="hljs-params"></span></span> red, <span class="hljs-params"><span class="hljs-highlight  type"></span>Int<span class="hljs-params"></span></span> green, <span class="hljs-params"><span class="hljs-highlight  type"></span>Int<span class="hljs-params"></span></span> blue) 
{
    <span class="hljs-comment">// …</span>
}</code></pre>
<p>Let's take a look at the tests that aren't necessary anymore thanks to the <code>Int</code> type:</p>
<ul>
<li>Whether the input is numeric</li>
<li>Whether the input is a whole number</li>
<li>Whether the input isn't null</li>
</ul>
<p>To be honest, we can do better than this:
we still need to check whether the input number is between <span class="number">0</span> and <span class="number">255</span>.</p>
<p>Unfortunately at this point, we run against the limitations of many type systems.
Sure we can use <code>Int</code>, though in many cases (as with ours)
the category described by this type is still too large for our business logic.
Some languages have a <code>UInt</code> or "unsigned integer" type;
yet this still too large a subset of "numeric data".</p>
<p>Luckily, there are ways to address this issue.</p>
<p>One approach could be to use "configurable" or generic types, for example <code>Int<min, max></code>.
The concept of generics is known in many programming languages,
though I'm unaware of any language that let's you configure scalar types such as integers.</p>
<p>Edit: one of my readers let me know this <em>is</em> possible in Ada. Thanks, Adam!</p>
<p>Nevertheless in theory, a type could be preconfigured in such a way that it's smart enough to know about your business logic.</p>
<p>Languages that lack these kinds of generic types, often need to build custom types.
Being an OO programmer myself, I would use classes to do this.</p>
<pre><code class="language-django hljs django" data-lang="django"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">keyword&gt;</span>class<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">type&gt;</span>MinMaxInt<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>
{
    <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">keyword&gt;</span>public<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">prop&gt;</span>MinMaxInt<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>(<span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">type&gt;</span>Int<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span> min, <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">type&gt;</span>Int<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span> max, <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">type&gt;</span>Int<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span> value)
    {
        <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">prop&gt;</span>assert<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>(min <span class="hljs-tag">&lt;<span class="hljs-name">= <span class="hljs-attr">value &lt;= <span class="hljs-string">max)</span>
        
        &lt;<span class="hljs-attr">hljs <span class="hljs-attr">keyword&gt;</span>this<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>.value = value
    }
}</code></pre>
<p>If we're using an instance of <code>MinMaxInt</code>, we can be sure its value is constrained within a subset of integers.</p>
<p>Still, this <code>MinMaxInt</code> class is too generic for our case.
If we were to type <code>rgbToHex</code> with it, we're still not sure what the exact boundaries are:</p>
<pre><code class="language-dts hljs dts" data-lang="dts"><span class="hljs-params"><span class="hljs-highlight  prop"></span>rgbToHex<span class="hljs-params"></span></span>(<span class="hljs-params"><span class="hljs-highlight  type"></span>MinMaxInt<span class="hljs-params"></span></span> red, <span class="hljs-params"><span class="hljs-highlight  type"></span>MinMaxInt<span class="hljs-params"></span></span> green, <span class="hljs-params"><span class="hljs-highlight  type"></span>MinMaxInt<span class="hljs-params"></span></span> blue) 
{
    <span class="hljs-comment">// …</span>
}</code></pre>
<p>We need a more specific type: <code>RgbValue</code>.
Adding it depends, again, on the programming language and personal preference.
I would extend <code>MinMaxInt</code>, but feel free to do whatever fits you best.</p>
<pre><code class="language-xml hljs xml" data-lang="xml"><span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">keyword&gt;</span>class<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">type&gt;</span>RgbValue<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">keyword&gt;</span>extends<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">type&gt;</span>MinMaxInt<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>
{
    <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">keyword&gt;</span>public<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">prop&gt;</span>RgbValue<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>(<span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">type&gt;</span>Int<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span> value)
    {
        <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">type&gt;</span>parent<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>(<span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">keyword&gt;</span>0<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>, <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">keyword&gt;</span>255<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>, value)
    }
}</code></pre>
<p>Now we've arrived at a working solution.
By using the <code>RgbValue</code> type, most of our tests become redundant.</p>
<pre><code class="language-dts hljs dts" data-lang="dts"><span class="hljs-params"><span class="hljs-highlight  prop"></span>rgbToHex<span class="hljs-params"></span></span>(<span class="hljs-params"><span class="hljs-highlight  type"></span>RgbValue<span class="hljs-params"></span></span> red, <span class="hljs-params"><span class="hljs-highlight  type"></span>RgbValue<span class="hljs-params"></span></span> green, <span class="hljs-params"><span class="hljs-highlight  type"></span>RgbValue<span class="hljs-params"></span></span> blue) 
{
    <span class="hljs-comment">// …</span>
}</code></pre>
<p>We can now have one test to test the business logic: "given three <abbr>RGB</abbr>-valid colors,
does this function return the correct <abbr>HEX</abbr> value?" — a great improvement!</p>
<h2 id="caveats"><a href="#caveats" class="heading-anchor">#</a> Caveats</h2>
<p>Close readers can already think of one or two counter arguments.
Let's address them.</p>
<h3 id="tests-are-just-moved"><a href="#tests-are-just-moved" class="heading-anchor">#</a> Tests are just moved</h3>
<p>If we're building custom types, we still have to test those.
That's true in my example, which is influenced by the languages I work in.</p>
<p>It depends on the capabilities of the language though.
Given a language that allows this:</p>
<pre><code class="language-fsharp hljs fsharp" data-lang="fsharp"><span class="hljs-highlight  prop">rgbToHex</span>(
    &lt;hljs <span class="hljs-class"><span class="hljs-keyword">type&gt;<span class="hljs-title">Int</span></span>&lt;<span class="hljs-highlight  keyword">0</span>, <span class="hljs-highlight  keyword">255</span>&gt; <span class="hljs-title">red</span>, </span>
    &lt;hljs <span class="hljs-class"><span class="hljs-keyword">type&gt;<span class="hljs-title">Int</span></span>&lt;<span class="hljs-highlight  keyword">0</span>, <span class="hljs-highlight  keyword">255</span>&gt; <span class="hljs-title">green</span>, </span>
    &lt;hljs <span class="hljs-class"><span class="hljs-keyword">type&gt;<span class="hljs-title">Int</span></span>&lt;<span class="hljs-highlight  keyword">0</span>, <span class="hljs-highlight  keyword">255</span>&gt; <span class="hljs-title">blue</span></span>
) {
    <span class="hljs-comment">// …</span>
}</code></pre>
<p>You'd need zero extra tests, as the features are baked into the language itself.</p>
<p>But even if we're stuck with having to build custom types and testing them:
don't forget they are reusable throughout the code base.</p>
<p>Chances are you'll be able to re-use most of the types you're making;
as these custom categories most likely apply to your business, and are used throughout it.</p>
<p><div class="author">
    Noticed a tpyo? You can submit a
    <a href="https://github.com/brendt/stitcher.io" target="_blank" rel="noopener noreferrer">PR</a> to fix it.

    If you want to stay up to date about what's happening on this blog, you can follow me
    <a href="https://mobile.twitter.com/brendt_gd" target="_blank" rel="noopener noreferrer">on Twitter</a> or subscribe to my newsletter:

    <form action="https://mail.stitcher.io/subscribe/81fa83d0-4a0b-4eff-b897-f6ce51dfb7f0" method="post" class="newsletter-form">
        <label for="newsletter-email-69">Email</label>
        <input type="email" name="email" id="newsletter-email-69"/>
        <button type="submit" class="cta cta-small">Subscribe</button>
    </form>
</div>
</p>
<h3 id="verbosity"><a href="#verbosity" class="heading-anchor">#</a> Verbosity</h3>
<p>Next, many would consider my solution too verbose when actually using it:</p>
<pre><code class="language-xml hljs xml" data-lang="xml"><span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">prop&gt;</span>rgbToHex<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>(
    <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">keyword&gt;</span>new<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">type&gt;</span>RgbValue<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>(<span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">keyword&gt;</span>60<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>),
    <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">keyword&gt;</span>new<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">type&gt;</span>RgbValue<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>(<span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">keyword&gt;</span>102<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>),
    <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">keyword&gt;</span>new<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">type&gt;</span>RgbValue<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>(<span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">keyword&gt;</span>79<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>)
);</code></pre>
<p>While I personally don't mind this verbosity — I know the benefits of a stronger type system — I'd like to ask you to think out of your box for a moment.
This argument isn't against stronger types, it's one against your programming language.</p>
<p>The verbosity is caused by the lack of proper syntax provided by the language.
Fortunately I can think of ways the problem could be solved.</p>
<p>One solution is type juggling.
Dynamic languages are actually pretty good at it.
Say you'd pass a simple integer as the input,
the compiler can try and cast that integer to an object of <code>RgbValue</code>.
It could even be aware of possible types which could be cast to <code>RgbValue</code>,
so you'd still have compile-time error detection.</p>
<h3 id="example-in-isolation"><a href="#example-in-isolation" class="heading-anchor">#</a> Example in isolation</h3>
<p>Another objection might be that your real-life code base obviously differs from a simple <code>rgbToHex</code> function.</p>
<p>I want to argue the opposite though: the reasoning behind this example can be applied to any part of your code.
The actual difficulty lies in the languages and frameworks used:
if strong types aren't built in from the ground up,
you're gonna have a hard time getting the most use out of them.</p>
<p>This is where I should recommend you to watch <a target="_blank" href="https://www.destroyallsoftware.com/talks/ideology">this talk</a> by Gary Bernhardt,
it's less than 30 minutes long.
In it, he takes the topic of type systems and confronts us with our own prejudices and ideologies about them.</p>
<p>Afterwards you can apply this thinking on the current frameworks and languages you're using.</p>
<p>While my example is an example in isolation, the underlying problems solved by stronger types can easily be scaled,
<em>if</em> the infrastructure supports it.</p>
<p>So am I suggesting you should ditch your whole stack, or that you're a bad programmer for using a weakly typed language?
Definitely not!</p>
<p>I myself program in <abbr>PHP</abbr> every day, it's <a href="/blog/php-in-2019">not as bad as it used to be</a>.
<abbr>PHP</abbr> introduced an opt-in type system, so it's possible to write fairly strongly typed code,
even though the language wasn't originally built for it.
Another example coming to mind is JavaScript with TypeScript.</p>
<p>So it is possible to leverage a type system, even in many languages that weren't originally built for it.
But it will require a mind shift from your side.
In my experience, it's worth the effort.</p>
<h3 id="limitations"><a href="#limitations" class="heading-anchor">#</a> Limitations</h3>
<p>Finally, let's address the elephant in the room when it comes to type systems.
I hope it's clear that, while many tests may be omitted thanks to a strong type system, some still need to be written.</p>
<p>People claiming you don't have to write tests in strongly typed languages are wrong.</p>
<p>Remember the <em>partially</em> I mentioned earlier?</p>
<p>In an ideal world, the perfect type system would be able to account for all specific categories required by your business.
This is impossible to do though, as computers and programming languages only have limited resources to work with.</p>
<p>So while strong types can help us to ensure program correctness,
some tests will always be a necessity to ensure business correctness.
It's a matter of "both and", not "either or".</p>
<h2 id="closing-remarks"><a href="#closing-remarks" class="heading-anchor">#</a> Closing Remarks</h2>
<p>I mentioned several concepts in this posts,
but I also mentioned I didn't know of programming languages using some of the concepts I described.
I'd love to give some concrete examples though.</p>
<p>So if you're working in a language that should be mentioned in this post,
please let me know via <a target="_blank" href="https://twitter.com/brendt_gd">Twitter</a>, <a href="mailto:brendt@stitcher.io">e-mail</a>, or wherever you read this post on social media.</p>
<p>You can of course also reach out to share other thoughts on this topic, I'd love to hear from you!</p>
 ]]></summary>

                <updated>2019-06-07T00:00:00+00:00</updated>
            </entry>
                                <entry>
                <title><![CDATA[ What are objects anyway? - Rant With Brent 02 ]]></title>

                <link rel="alternate" href="https://stitcher.io/blog/what-are-objects-anyway-rant-with-brent"/>

                <id>https://www.stitcher.io/blog/what-are-objects-anyway-rant-with-brent</id>

                <author>
                    <name><![CDATA[ Brent Roose ]]></name>
                </author>

                <summary type="html"><![CDATA[ <p>In this second episode, I take a look at the original definition of "Object Oriented Programming",
and compare it to what we call OOP today.</p>
<p><audio
controls
src="http://feeds.soundcloud.com/stream/629614707-brent-roose-826312539-what-are-objects-anyway-rant-with-brent-2.mp3">
</audio></p>
<p>You can download the episode <a target="_blank" href="http://feeds.soundcloud.com/stream/629614707-brent-roose-826312539-what-are-objects-anyway-rant-with-brent-2.mp3">here</a>
or listen on <a target="_blank" href="https://podcasts.apple.com/be/podcast/rant-with-brent/id1462956030">Apple Podcasts</a>, <a target="_blank" href="https://www.stitcher.com/s?fid=403581&amp;refid=stpr.">Stitcher Radio</a> and <a target="_blank" href="https://open.spotify.com/show/43sF0kY3BWepaO9CkLvVdJ?si=R-MIXaMHQbegQyq3gQm7Yw">Spotify</a></p>
<p><div class="ad-container">
    <script async type="text/javascript" src="//cdn.carbonads.com/carbon.js?serve=CK7ICK3W&placement=stitcherio" id="_carbonads_js"></script>
</div>
</p>
 ]]></summary>

                <updated>2019-06-05T00:00:00+00:00</updated>
            </entry>
                                <entry>
                <title><![CDATA[ A project at Spatie ]]></title>

                <link rel="alternate" href="https://stitcher.io/blog/a-project-at-spatie"/>

                <id>https://www.stitcher.io/blog/a-project-at-spatie</id>

                <author>
                    <name><![CDATA[ Brent Roose ]]></name>
                </author>

                <summary type="html"><![CDATA[ <p>The month of May marks the first year anniversary of a client project I've been working on at Spatie.
I thought it useful to share some statistics with the community,
and give you a feeling of what a "real life web project" might look like.</p>
<p>Let's start with a general overview.
The project, a web application, features an admin interface to manage inventories, contacts and contracts;
bookings, automatic invoicing and about ten third party integrations.</p>
<p>In the future we'll be exposing several of these features to the outside via an API,
its main goal to power a mobile app for clients of the platform.
The admin panel is already in use in production.</p>
<p>The project is built in Laravel, a <abbr>PHP</abbr> framework.
We use Blade as a templating engine in combination with many VueJS components.
Tailwind is the <abbr>CSS</abbr> framework used.</p>
<h2 id="some-numbers"><a href="#some-numbers" class="heading-anchor">#</a> Some numbers</h2>
<p>So, how much code have we written the past year? Here's a summary,
gathered with the <a target="_blank" href="https://github.com/sebastianbergmann/phploc">phploc</a> package:</p>
<ul>
<li>
<span class="number">2,062</span> files</li>
<li>
<span class="number">126,736</span> lines of code</li>
<li>
<span class="number">97,423</span> logical lines of code</li>
</ul>
<p>Let's zoom into statistics about the backend code, my area:</p>
<ul>
<li>
<span class="number">1,086</span> classes; <span class="number">32</span> interfaces; <span class="number">28</span> traits</li>
<li>Average <abbr>LLOC</abbr> per class: <span class="number">8</span>
</li>
<li>Maximum <abbr>LLOC</abbr> per class: <span class="number">139</span>
</li>
<li>
<span class="number">3,245</span> public methods</li>
</ul>
<p>The amount of lines split per file type looks like this:</p>
<p><img src="/resources/img/blog/project-stats/loc.png" srcset="/resources/img/blog/project-stats/loc-1069x661.png 1069w, /resources/img/blog/project-stats/loc-534x330.png 534w, /resources/img/blog/project-stats/loc-756x467.png 756w, /resources/img/blog/project-stats/loc-1196x740.png 1196w, /resources/img/blog/project-stats/loc-926x572.png 926w" sizes="" alt=""></img></p>
<p>Let's further dive into how the backend code is structured,
by using Stefan's <a target="_blank" href="https://github.com/stefanzweifel/laravel-stats">laravel-stats</a> package.</p>
<p>To start with, I should explain something about our big Laravel projects.
Instead of using the default Laravel project structure, our code is split into two namespaces:
"application code" and "domain code".</p>
<p>Domain code holds all business logic and is used by the application layer.
If you want to dive further into this topic, you can read about it <a href="/blog/organise-by-domain">here</a>.</p>
<p>The following graph shows how application and domain code relate to each other:</p>
<p><img src="/resources/img/blog/project-stats/domain-v-application.png" srcset="/resources/img/blog/project-stats/domain-v-application-536x368.png 536w, /resources/img/blog/project-stats/domain-v-application-1073x738.png 1073w, /resources/img/blog/project-stats/domain-v-application-758x521.png 758w, /resources/img/blog/project-stats/domain-v-application-929x639.png 929w, /resources/img/blog/project-stats/domain-v-application-1200x826.png 1200w" sizes="" alt=""></img></p>
<p>By splitting business and application code,
we're able to provide a flexible, maintainable and highly testable core.
Application code makes use of this core and looks very much like your average Laravel project.</p>
<p>The bulk of our domain code consists of three types of classes:</p>
<ul>
<li>Models — <span class="number">80</span> classes</li>
<li>Actions — <span class="number">205</span> classes</li>
<li>
<abbr>DTO</abbr>s — <span class="number">63</span> classes</li>
</ul>
<p>While the application layer mostly consists of:</p>
<ul>
<li>Controllers — <span class="number">130</span> classes and <span class="number">309</span> routes</li>
<li>ViewModels — <span class="number">82</span> classes</li>
<li>Blade views — <span class="number">313</span> files; these are not included in the chart above</li>
</ul>
<p>Because of the lifecycle of the project, there's room for improvement.
For example, we're not using <a target="_blank" href="https://stitcher.io/blog/structuring-unstructured-data"><abbr>DTO</abbr>s</a> everywhere,
as they were added at a later time.</p>
<p>As with all things: we learn as we go.
After a year, it's normal that some parts of the code can be considered "old".
We have a rule that states that when we work in these old parts of the codebase, we refactor them.</p>
<p>A big advantage of moving code into domains is testability.
While our domain code is heavily unit tested, our application code is mostly only integration tested.
In our experience, it's a workable balance between highly tested code and being able to meet deadlines.</p>
<p>At the moment we have <span class="number">840</span> tests doing <span class="number">1,728</span> assertions.
Our test suite could always be improved,
but I am very confident deploying new features and refactors without the fear of breaking stuff — thanks to our test suite.</p>
<h2 id="code-structure"><a href="#code-structure" class="heading-anchor">#</a> Code structure</h2>
<p>I'm a big proponent of clean code.
We try to keep our code clean and maintainable, by setting a few rules of thumb:</p>
<ul>
<li>Classes should be small, 50 lines of code should be the maximum</li>
<li>Methods should also be small and easy to reason about</li>
<li>We prefer clear names over short and cryptic names</li>
</ul>
<p>You probably noticed that we don't always keep these rules.
There are some classes that are longer and more complex.</p>
<p>These classes are the result of making choices:
sometimes some technical debt is allowed to meet deadlines — as long as we're aware of it.</p>
<p>I've made a <a target="_blank" href="https://github.com/spatie/code-outliner">little tool</a> in the past which I use to generate "heat maps" of the codebase.
It will take all code in a folder, and generate an image by overlaying the code structure on top of it.</p>
<p>I can use this tool to locate large files, and refactor them when there's time.
We have done this in the past, and it works very well.</p>
<p>Here's part of this image of a subdomain in our project:</p>
<p><img src="/resources/img/blog/project-stats/outline.png" srcset="/resources/img/blog/project-stats/outline-715x1286.png 715w, /resources/img/blog/project-stats/outline-619x1113.png 619w, /resources/img/blog/project-stats/outline-505x908.png 505w, /resources/img/blog/project-stats/outline-357x642.png 357w, /resources/img/blog/project-stats/outline-800x1439.png 800w" sizes="" alt=""></img></p>
<p>The darker the image, the more code across all files in that position.
You can see that while some files are longer, most of the code lives in the upper 50 lines,
something we strive for.</p>
<p>We ensure these short classes and consistent code by using a few tools and methods:</p>
<ul>
<li>Internal <abbr>PR</abbr>s and code reviews; despite what you might think, this saves time</li>
<li>We use static analysis, more specifically <a target="_blank" href="https://github.com/phpstan/phpstan">PhpStan</a>;
to prevent subtle bugs</li>
<li>We use <a target="_blank" href="https://github.com/FriendsOfPHP/PHP-CS-Fixer"><abbr>PHP CS</abbr> fixer</a> to ensure consistent code style</li>
</ul>
<p>Like I said before: I'm a firm proponent of clean code.
When you're working with several people in the same codebase,
it's a must to keep your code clean and clear, to secure its future.</p>
<h2 id="in-closing"><a href="#in-closing" class="heading-anchor">#</a> In closing</h2>
<p>Finally, I'd like to show the <abbr>GIT</abbr> history of the project visualised with <a target="_blank" href="https://gource.io/">Gource</a>.
We've been working on this project with, in total, <span class="number">7</span> contributors, and now have more than <span class="number">4,000</span> commits listed.</p>
<p>
    <iframe width="560" height="315" src="https://www.youtube.com/embed/KkgAnOklQ7w" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>
</p>
<p>You can clearly see the different "branches" I talked about earlier: application- and domain code;
but this overview also includes Blade, JavaScript and <abbr>CSS</abbr> files.</p>
<hr />
<p>So what about your projects? Are you able to share your own stats?
Feel free to send me a <a target="_blank" href="https://twitter.com/brendt_gd">tweet</a> or an <a href="mailto:brendt@stitcher.io">email</a>!</p>
 ]]></summary>

                <updated>2019-05-30T00:00:00+00:00</updated>
            </entry>
                                <entry>
                <title><![CDATA[ A programmer&#039;s cognitive load ]]></title>

                <link rel="alternate" href="https://stitcher.io/blog/a-programmers-cognitive-load"/>

                <id>https://www.stitcher.io/blog/a-programmers-cognitive-load</id>

                <author>
                    <name><![CDATA[ Brent Roose ]]></name>
                </author>

                <summary type="html"><![CDATA[ <p>As a professional programmer, I'm reading and writing code on a daily basis.
I'm working on new projects, doing code reviews, working with legacy code, reading through documentation etc.
Based on my own experience and that of colleagues, being a programmer often involves a lot more reading than actually writing code.</p>
<p>Whether it's your own code or that of others, when you open a file you have to take it all in.
You need to wrap your head around what's going on, before you're able to write your code, do your thing.</p>
<p>Having to deal with code almost every day, it's important to find ways to make this process easy.
To try and reduce the cognitive load it puts on your brain as much as possible.</p>
<p>Making code easier to read will allow you to work faster and better, and also improve your mental state and mood.</p>
<blockquote>
<p>In cognitive psychology, cognitive load refers to the total amount of mental effort being used in the working memory - <a target="_blank" href="https://en.wikipedia.org/wiki/Cognitive_load">wikipedia</a></p>
</blockquote>
<p>Today I want to share some techniques that can help you reduce cognitive load while coding.
In contrast to some recent advocates of "visual debt", I won't talk about stripping away pieces of your codebase.
We'll look purely into the visual aspect: what makes code hard to read and reason about, and how to make it easier.</p>
<p><div class="ad-container">
    <script async type="text/javascript" src="//cdn.carbonads.com/carbon.js?serve=CK7ICK3W&placement=stitcherio" id="_carbonads_js"></script>
</div>
</p>
<h2 id="fonts-and-spacing"><a href="#fonts-and-spacing" class="heading-anchor">#</a> Fonts and spacing</h2>
<p>Fonts have an influence on our mood.
The <a target="_blank" href="https://crew.co/blog/the-psychology-of-fonts/">people at Crew</a> wrote an interesting piece about how fonts make us feel.
The font you choose has a big impact on how much load is put on your brain to process the text on your screen.
It's not just the font by the way, but also its size, line height and letter spacing plays a role.</p>
<p>Typography itself is a topic books are written about.
I encourage you to think about your current font choice, and how it influences the way you read code.</p>
<p>Here's a comparison between a not-so-good and better font configuration, in my experience.</p>
<p><img src="/resources/img/blog/cognitive-load/aestetics-1.png" srcset="/resources/img/blog/cognitive-load/aestetics-1-670x720.png 670w, /resources/img/blog/cognitive-load/aestetics-1-1341x1442.png 1341w, /resources/img/blog/cognitive-load/aestetics-1-1161x1249.png 1161w, /resources/img/blog/cognitive-load/aestetics-1-948x1020.png 948w, /resources/img/blog/cognitive-load/aestetics-1-1500x1614.png 1500w" sizes="" alt=""></img></p>
<p><img src="/resources/img/blog/cognitive-load/aestetics-2.png" srcset="/resources/img/blog/cognitive-load/aestetics-2-1341x1453.png 1341w, /resources/img/blog/cognitive-load/aestetics-2-1500x1626.png 1500w" sizes="" alt=""></img></p>
<h2 id="folding"><a href="#folding" class="heading-anchor">#</a> Folding</h2>
<p>Ever worked with a controller providing some CRUD actions?
A class with a few methods?
Folding your method bodies by default gives you a much clearer overview of the class when opening a file.
It makes it easier to decide where you want to go to, instead of scrolling and searching.
Take a look at the following example.</p>
<p><img src="/resources/img/blog/cognitive-load/aestetics-3.png" srcset="/resources/img/blog/cognitive-load/aestetics-3-670x576.png 670w, /resources/img/blog/cognitive-load/aestetics-3-1500x1291.png 1500w, /resources/img/blog/cognitive-load/aestetics-3-948x815.png 948w, /resources/img/blog/cognitive-load/aestetics-3-1341x1154.png 1341w, /resources/img/blog/cognitive-load/aestetics-3-1161x999.png 1161w" sizes="" alt=""></img></p>
<p>IDEs like IntelliJ can fold code by default: <code>Settings > Editor > General > Code Folding</code>.
I was a bit hesitant to enable it by default, but I can assure you this is an amazing feature once you're used to it.</p>
<p>It's also more convenient compared to the file structure navigator many IDEs and editors provide.
This approach allows you to see the visual structure, color and indentation of the class.</p>
<p>You'll probably want to learn the keybinds associated with folding too. On Mac with IntelliJ, these are the defaults: <code>⌘⇧+</code>, <code>⌘⇧-</code>, <code>⌘+</code> and <code>⌘-</code>.</p>
<h2 id="documentation"><a href="#documentation" class="heading-anchor">#</a> Documentation</h2>
<p>Documentation and comments are good tool to clarify what code actually does.
Furthermore, some languages and IDEs rely on comment meta data to provide proper static analysis.
We shouldn't overdo it though: docblocks and comments often state the obvious things, which are already known by reading the code.</p>
<p>After several years of programming, I can safely say that about 80-90% of comments are redundant.
They should be removed to clear visual overload, but you also need to provide something in their place:</p>
<ul>
<li>Clear naming of methods, variables, constants, etc.</li>
<li>Use proper type annotations and definitions</li>
</ul>
<p>Self documented code is better than relying on comments.
My rule of thumb when adding a comment is asking the following question:
"Does this comment actually add more information than already available through the code?".
If the answer is no, the comment shouldn't be there.</p>
<p>Removing these comment frees up your code, giving you visual "space to breath".</p>
<h2 id="naming-things"><a href="#naming-things" class="heading-anchor">#</a> Naming things</h2>
<p>Another important thing to keep in mind: how to name things?
It's better to give a variable a longer, descriptive name; rather than make them as short as possible.</p>
<p>Short, cryptic names make sense at the moment of writing the code;
but even a few days after you've written them, they already become vague and meaningless.</p>
<p>Better to write a little more, than to read ten times as much to understand what you've written in the past.</p>
<p>Here are a few examples from an project of mine:</p>
<ul>
<li>I renamed <code>createPage()</code> to <code>createPaginatedPage()</code>.</li>
<li>
<code>$process</code> became <code>$pageRenderProcess</code>.</li>
<li>
<code>testStitcher()</code> changed to multiple methods, one of which called <code>test_stitch_multiple_routes()</code>.</li>
</ul>
<h2 id="colours"><a href="#colours" class="heading-anchor">#</a> Colours</h2>
<p>This might be a sensitive topic for many people;
though I want to ask you to give me the benefit of the doubt for a minute.
We all like our dark, cool looking colour schemes, but there's a problem with them.</p>
<p>Research shows that the human eye is better equipped to read dark text on light backgrounds,
than the other way around. Back in the 80's, when personal computing was growing in popularity,
a guy called Etienne Grandjean did an <a target="_blank" href="https://dl.acm.org/citation.cfm?id=578434">extensive study</a>
on how text is best read on screens.</p>
<p>It turned out that light colour schemes are, for almost all people, the better choice.</p>
<p>Now your first thought might be that light colour schemes actually hurt your eyes,
but this has more to do with the brightness of your screen, than the colour scheme itself.</p>
<p>It's true that a light colour scheme can cause headaches and painful eyes if you don't turn down the brightness of your screen.
On the other hand, a less bright screen in combination with a light colour scheme will put less load on your eyes,
which makes reading code for long periods of time less exhaustive.</p>
<p>I can say what I want of course,
but the best thing I could do is challenge you to a one-week tryout.
I've challenged many programmers before, and most of them were actually convinced of a light theme after a few days.</p>
<p>It's up to you! Here's how my code looks like these days:</p>
<p><img src="/resources/img/blog/cognitive-load/aestetics-4.png" srcset="/resources/img/blog/cognitive-load/aestetics-4-1499x1320.png 1499w, /resources/img/blog/cognitive-load/aestetics-4-670x590.png 670w, /resources/img/blog/cognitive-load/aestetics-4-1161x1022.png 1161w, /resources/img/blog/cognitive-load/aestetics-4-948x834.png 948w, /resources/img/blog/cognitive-load/aestetics-4-1341x1180.png 1341w" sizes="" alt=""></img></p>
<p>Be sure to let me know how the challenge went!
You can reach me on <a target="_blank" href="https://twitter.com/brendt_gd">Twitter</a> or via <a href="mailto:brendt@stitcher.io">e-mail</a>.</p>
<hr />
<p>The points I listed today have almost nothing to do with how you write real code (programming logic, patterns used, etc.).
But they have an impact on the cognitive load put on your brain day by day.</p>
<p>They take away some of the pain points when writing code.
They allow you to enjoy programming more.</p>
 ]]></summary>

                <updated>2019-05-29T00:00:00+00:00</updated>
            </entry>
                                <entry>
                <title><![CDATA[ I&#039;m starting a podcast ]]></title>

                <link rel="alternate" href="https://stitcher.io/blog/starting-a-podcast"/>

                <id>https://www.stitcher.io/blog/starting-a-podcast</id>

                <author>
                    <name><![CDATA[ Brent Roose ]]></name>
                </author>

                <summary type="html"><![CDATA[ <p>It's only been two weeks since I announced I'm <a href="/blog/starting-a-newsletter">starting a newsletter</a>,
and here I am again with something new: a podcast.</p>
<p>People who know me IRL know I listen to <em>lots</em> of podcasts every day.
I did some internet radio a few years ago, and since then always wanted to pick it up again.</p>
<p>Ever since my wife and I bought our house, I've slowly been working on my amateur "studio",
and I've come to the point where I feel comfortable recording in it.
Here's my view when recording:</p>
<p><img src="/resources/img/blog/podcast/podcast.jpg" srcset="/resources/img/blog/podcast/podcast-3474x2404.jpg 3474w, /resources/img/blog/podcast/podcast-3107x2150.jpg 3107w, /resources/img/blog/podcast/podcast-1553x1074.jpg 1553w, /resources/img/blog/podcast/podcast-2197x1520.jpg 2197w, /resources/img/blog/podcast/podcast-2690x1861.jpg 2690w" sizes="" alt=""></img></p>
<p>Anyway, I just wanted to let you know that I'm starting this thing.
Just like the newsletter it'll be sporadic.
I prefer quality over quantity, so don't expect anything weekly.</p>
<p>I called it "Rant With Brent", and if you'd ask me to summarize,
I'd say it's a no-nonsense, straight to the point podcast about programming.
I don't want to waste 30 minutes of your time, when the same could be said in 10.</p>
<p>I do my best to make an episode highly informative and worth your time.
If you want to give it a chance,
you can find the podcast on <a target="_blank" href="https://podcasts.apple.com/be/podcast/rant-with-brent/id1462956030">iTunes</a>, <a target="_blank" href="https://www.stitcher.com/s?fid=403581&amp;refid=stpr.">Stitcher</a> and <a target="_blank" href="https://open.spotify.com/show/43sF0kY3BWepaO9CkLvVdJ?si=R-MIXaMHQbegQyq3gQm7Yw">Spotify</a>.</p>
 ]]></summary>

                <updated>2019-05-14T00:00:00+00:00</updated>
            </entry>
                                <entry>
                <title><![CDATA[ PHP in 2019 ]]></title>

                <link rel="alternate" href="https://stitcher.io/blog/php-in-2019"/>

                <id>https://www.stitcher.io/blog/php-in-2019</id>

                <author>
                    <name><![CDATA[ Brent Roose ]]></name>
                </author>

                <summary type="html"><![CDATA[ <p>Do you remember the popular "<a target="_blank" href="https://eev.ee/blog/2012/04/09/php-a-fractal-of-bad-design/">PHP: a fractal of bad design</a>" blog post?
The first time I read it, I was working in a crappy place with lots of legacy PHP projects.
This article got me wondering whether I should just quit and go do something entirely different than programming.</p>
<p>Luckily for me I was able to switch jobs shortly thereafter and,
more importantly, PHP managed to evolve quite a bit since the 5.* days.
Today I'm addressing the people who are either not programming in PHP anymore,
or are stuck in legacy projects.</p>
<p>Spoiler: some things still suck today, just like almost every programming language has its quirks.
Many core functions still have their inconsistent method signatures,
there are still confusing configuration settings,
there are still many developers out there writing crappy code — because they have to, or because they don't know better.</p>
<p><div class="ad-container">
    <script async type="text/javascript" src="//cdn.carbonads.com/carbon.js?serve=CK7ICK3W&placement=stitcherio" id="_carbonads_js"></script>
</div>
</p>
<p>Today I want to look at the bright side:
let's focus on the things that have changed and ways to write clean and maintainable PHP code.
I want to ask you to set aside any prejudice for just a few minutes.</p>
<p>Afterwards you're free to think exactly the same about PHP as you did before.
Though chances are you will be surprised by some of the improvements made to PHP in the last few years.</p>
<h2 id="tl;dr"><a href="#tl;dr" class="heading-anchor">#</a> TL;DR</h2>
<ul>
<li>PHP is actively developed with a new release each year</li>
<li>PHP 7.4 is one of the <a href="/blog/new-in-php-74">most feature-packed</a> releases ever</li>
<li>Performance since the PHP 5 era has doubled, if not tripled</li>
<li>There's a extremely active eco system of frameworks, packages and platforms</li>
<li>PHP has had lots of new features added to it over the past few years, and the language keeps evolving</li>
<li>Tooling like static analysers has matured over the past years, and only keeps growing</li>
</ul>
<p>Update: people asked me to show some actual code.
I'm happy to say that's possible! Here's the <a target="_blank" href="https://github.com/brendt/aggregate.stitcher.io">source code</a>
of one of my hobby projects, written in PHP and Laravel;
and <a target="_blank" href="https://spatie.be/open-source/packages">here</a> is a list of a few hundred OSS packages we maintain at our office.
Both are good examples of what modern PHP projects look like.</p>
<p>Let's start.</p>
<p><div class="author">
    Noticed a tpyo? You can submit a
    <a href="https://github.com/brendt/stitcher.io" target="_blank" rel="noopener noreferrer">PR</a> to fix it.

    If you want to stay up to date about what's happening on this blog, you can follow me
    <a href="https://mobile.twitter.com/brendt_gd" target="_blank" rel="noopener noreferrer">on Twitter</a> or subscribe to my newsletter:

    <form action="https://mail.stitcher.io/subscribe/81fa83d0-4a0b-4eff-b897-f6ce51dfb7f0" method="post" class="newsletter-form">
        <label for="newsletter-email-70">Email</label>
        <input type="email" name="email" id="newsletter-email-70"/>
        <button type="submit" class="cta cta-small">Subscribe</button>
    </form>
</div>
</p>
<h2 id="history-summarized"><a href="#history-summarized" class="heading-anchor">#</a> History summarized</h2>
<p>For good measure, let's quickly review PHP's release cycle today.
We're at PHP 7.4 now, and PHP 8.0 will be the next version after that.</p>
<p>Ever since the late 5.* era, the core team tries to keep a yearly release cycle,
and have succeeded in doing so for the past four years.</p>
<p>In general, every new release is actively supported for two years,
and gets one more year of "security fixes only".
The goal is to motivate PHP developers to stay up-to-date as much as possible:
small upgrades every year are way more easy than making the jump between 5.4 to 7.0, for example.</p>
<p>An active overview of PHP's timeline can be found <a target="_blank" href="https://www.php.net/supported-versions.php">here</a>.</p>
<p>Lastly, PHP 5.6 was the latest 5.* release, with 7.0 being the next one.
If you want to know what happened to PHP 6, you can listen to the <a target="_blank" href="https://www.phproundtable.com/episode/what-happened-to-php-6">PHP Roundtable podcast</a>.</p>
<p>With that out of the way, let's debunk some common misconceptions about modern PHP.</p>
<h2 id="php's-performance"><a href="#php's-performance" class="heading-anchor">#</a> PHP's performance</h2>
<p>Back in the 5.* days, PHP's performance was… average at best.
With 7.0 though, large parts of PHP's core were rewritten from the ground up,
resulting in two or three times performance increases.</p>
<p>Words don't suffice though. Let's look at benchmarks.
Luckily other people have spent lots of time in benchmarking PHP performance.
I find that <a target="_blank" href="https://kinsta.com/blog/php-benchmarks/">Kinsta</a> has a good updated list.</p>
<p>Ever since the 7.0 upgrade, performance only increased.
So much that PHP web applications have comparable — in some cases better — performance than web frameworks in other languages.
Take a look at this <a target="_blank" href="https://github.com/the-benchmarker/web-frameworks">extensive benchmark suite</a>.</p>
<p>Sure PHP frameworks won't outperform C and Rust, but they are equally performant as Django, Rails or Express.</p>
<h2 id="frameworks-and-ecosystem"><a href="#frameworks-and-ecosystem" class="heading-anchor">#</a> Frameworks and ecosystem</h2>
<p>Speaking of frameworks: PHP isn't just WordPress anymore.
Let me tell you something as a professional PHP developer:
WordPress isn't in any way representative of the contemporary ecosystem.</p>
<p>In general there are two major web application frameworks, and a few smaller ones: <a target="_blank" href="https://symfony.com/">Symfony</a> and <a target="_blank" href="https://laravel.com/">Laravel</a>.
Sure there's also Zend, now called Laminas; Yii, Cake, Code Igniter etc.
— but if you want to know what modern PHP development looks like, you're good with one of the first two.</p>
<p>Both frameworks have a large ecosystem of packages and products.
Ranging from admin panels and CRMs to standalone packages, CI to profilers,
numerous services like web sockets servers, queuing managers, payment integrations;
honestly there's too much to list.</p>
<p>These frameworks are meant for actual development though.
If you're in need of pure content management,
platforms like WordPress and CraftCMS are only improving more and more.</p>
<p>One way to measure the current state of PHP's ecosystem is to look at Packagist, the main package repository for PHP.
It has seen exponential growth.
With ±25 million downloads a day, it's fair to say that the PHP ecosystem isn't the small underdog it used to be.</p>
<p>Take a look at this graph, listing the amount of packages and versions over time.
It can also be found on <a target="_blank" href="https://packagist.org/statistics">the Packagist website</a>.</p>
<p><img src="/resources/img/blog/php-in-2019/packagist.png" srcset="/resources/img/blog/php-in-2019/packagist-1235x484.png 1235w, /resources/img/blog/php-in-2019/packagist-873x342.png 873w, /resources/img/blog/php-in-2019/packagist-1513x593.png 1513w, /resources/img/blog/php-in-2019/packagist-1954x766.png 1954w, /resources/img/blog/php-in-2019/packagist-1747x684.png 1747w" sizes="" alt=""></img></p>
<p>Besides application frameworks and CMSs, we've also seen the rise of asynchronous frameworks the past years.
These are frameworks and servers, written in PHP or other languages,
that allow users to run truly asynchronous PHP.
A few examples include <a target="_blank" href="https://www.swoole.co.uk/">Swoole</a>, <a target="_blank" href="https://amphp.org/">Amp</a> and <a target="_blank" href="https://reactphp.org/">ReactPHP</a>.</p>
<p>Since we've ventured into the async world,
stuff like web sockets and applications with lots of IO have become actually relevant in the PHP world.</p>
<p>There has also been talk on the internals mailing list — the place where core developers discuss the development of the language —
to <a target="_blank" href="https://externals.io/message/102415#102415">add libuv to the core</a>.
For those unaware of libuv: it's the same library Node.js uses to allow all its asynchronicity.</p>
<h2 id="the-language-itself"><a href="#the-language-itself" class="heading-anchor">#</a> The language itself</h2>
<p>While <code>async</code> and <code>await</code> are not available yet, lots of improvements to the language itself have been made over the past years.
Here's a non-exhaustive list of new features in PHP:</p>
<ul>
<li>
<a href="/blog/short-closures-in-php">Short closures</a>
</li>
<li>
<a target="_blank" href="https://wiki.php.net/rfc/union_types_v2">Union types</a> (PHP 8.0)</li>
<li>
<a href="/blog/shorthand-comparisons-in-php#null-coalescing-operator">Null coalescing operator</a>
</li>
<li>
<a target="_blank" href="https://www.php.net/manual/en/language.oop5.traits.php">Traits</a>
</li>
<li>
<a href="/blog/new-in-php-74#typed-properties-rfc">Typed properties</a>
</li>
<li>
<a target="_blank" href="https://wiki.php.net/rfc/argument_unpacking">Spread operator</a>
</li>
<li>
<a target="_blank" href="https://wiki.php.net/rfc/jit">JIT compiler</a> (PHP 8.0)</li>
<li>
<a target="_blank" href="https://wiki.php.net/rfc/ffi">FFI</a>
</li>
<li>
<a target="_blank" href="https://www.php.net/manual/en/language.oop5.anonymous.php">Anonymous classes</a>
</li>
<li>
<a target="_blank" href="https://www.php.net/manual/en/functions.returning-values.php#functions.returning-values.type-declaration">Return type declarations</a>
</li>
<li>
<a target="_blank" href="https://wiki.php.net/rfc/libsodium">Contemporary cryptography</a>
</li>
<li>
<a target="_blank" href="https://wiki.php.net/rfc/generators">Generators</a>
</li>
<li>
<a href="/blog/new-in-php-74">Lots more</a>
</li>
</ul>
<p>While we're on the topic of language features, let's also talk about the process of how the language is developed today.
There's an active core team of volunteers who move the language forward,
though the community is allowed to propose RFCs.</p>
<p>Next, these RFCs are discussed on the "internals" mailing list, which can also be <a target="_blank" href="https://externals.io/">read online</a>.
Before a new language feature is added, there must be a vote.
Only RFC with at least a 2/3 majority are allowed in the core.</p>
<p>Recently there has been an effort to move RFC discussions to GitHub, where the code actually lives. It seems like the small group of developers who's actively invested in PHP, are on board. You can read about the process <a target="_blank" href="https://externals.io/message/107747">here</a>.
It's still a work in progress because some people don't like GitHub. It's clear though that the most active contributors are on board with the decision, so it's fair to say the RFC discussion process will be moved to GitHub entirely within the next year or so.</p>
<p>Once an RFC is discussed, it goes into the voting phase. There are probably around 100 people allowed to vote, though you're not required to vote on each RFC.
Members of the core team are of course allowed to vote, they have to maintain the code base.
Besides them, there's a group of people who have been individually picked from the PHP community.
These people include maintainers of the PHP docs, contributors to the PHP project as a whole,
and prominent developers in the PHP community.</p>
<p>While most of core development is done on a voluntary basis, one of the core PHP developers,
Nikita Popov, has recently been <a target="_blank" href="https://blog.jetbrains.com/phpstorm/2019/01/nikita-popov-joins-phpstorm-team/">employed by JetBrains</a>
to work on the language full time.
Another example is the Linux foundation who recently decided to <a target="_blank" href="https://getlaminas.org/">invest into Zend framework</a>, now called Laminas.
Employments and acquisitions like these ensure stability for the future development of PHP.</p>
<h2 id="tooling"><a href="#tooling" class="heading-anchor">#</a> Tooling</h2>
<p>Besides lots of features and improvements added to PHP's core, we've seen an increase in tools around it the past few years.
What comes to mind are static analysers like <a target="_blank" href="https://github.com/vimeo/psalm">Psalm</a>, created by Vimeo;
<a target="_blank" href="https://github.com/phan/phan">Phan</a> and <a target="_blank" href="https://github.com/phpstan/phpstan">PHPStan</a>.</p>
<p>These tools will statically analyse your PHP code and report any type errors,
possible bugs etc.
In some way, the functionality they provide can be compared to TypeScript,
though for now the language isn't transpiled, so no custom syntax is allowed.</p>
<p>Even though that means we need to rely on docblocks, Rasmus Lerdorf, the original creator of PHP,
did mention the idea of <a target="_blank" href="https://externals.io/message/101477#101592">adding a static analysis engine</a> to the core.
While there would be lots of potential, it is a huge undertaking.</p>
<p>Speaking of transpiling, and inspired by the JavaScript community;
there have been efforts to extend PHPs syntax in user land.
A project called <a target="_blank" href="https://preprocess.io/">Pre</a> does exactly that:
allow new PHP syntax which is transpiled to normal PHP code.
While the idea has proven itself in the JavaScript world,
it could only work in PHP if proper IDE- and static analysis support was provided.
It's a very interesting idea, but has to grow before being able to call it "mainstream".</p>
<h2 id="in-closing"><a href="#in-closing" class="heading-anchor">#</a> In closing</h2>
<p>All of that being said, feel free to still think of PHP as a crappy language.
While the language definitely has its drawbacks and 20 years of legacy to carry with it;
I can say in confidence that I enjoy working with it.</p>
<p>In my experience, I'm able to create reliable, maintainable and quality software.
The clients I work for are happy with the end result, as am I.
While it's still possible to do lots of messed up things with PHP,
I'd say it's a great choice for web development if used wise and correct.</p>
<p>Don't you agree? Let me know why!
You can reach me via <a target="_blank" href="https://twitter.com/brendt_gd">Twitter</a> or <a href="mailto:brendt@stitcher.io">e-mail</a>.</p>
 ]]></summary>

                <updated>2019-05-10T00:00:00+00:00</updated>
            </entry>
                                <entry>
                <title><![CDATA[ SOLID, interfaces and final - Rant With Brent 01 ]]></title>

                <link rel="alternate" href="https://stitcher.io/blog/solid-interfaces-and-final-rant-with-brent"/>

                <id>https://www.stitcher.io/blog/solid-interfaces-and-final-rant-with-brent</id>

                <author>
                    <name><![CDATA[ Brent Roose ]]></name>
                </author>

                <summary type="html"><![CDATA[ <p>I'm giving podcasting a try. Let me know what you think of it via <a target="_blank" href="https://twitter.com/brendt_gd">Twitter</a> or <a href="mailto:brendt@stitcher.io">e-mail</a>.</p>
<p>In this episode I talk about why I think final helps you write better maintainable code.</p>
<p><audio
controls
src="http://feeds.soundcloud.com/stream/617976093-brent-roose-826312539-01-solid-interfaces-and-final-rant-with-brent.mp3">
</audio></p>
<p>You can download the episode <a target="_blank" href="http://feeds.soundcloud.com/stream/617976093-brent-roose-826312539-01-solid-interfaces-and-final-rant-with-brent.mp3">here</a>
or listen in <a target="_blank" href="https://podcasts.apple.com/be/podcast/rant-with-brent/id1462956030">iTunes</a>, <a target="_blank" href="https://www.stitcher.com/s?fid=403581&amp;refid=stpr.">Stitcher</a> and <a target="_blank" href="https://open.spotify.com/show/43sF0kY3BWepaO9CkLvVdJ?si=R-MIXaMHQbegQyq3gQm7Yw">Spotify</a></p>
<p><div class="ad-container">
    <script async type="text/javascript" src="//cdn.carbonads.com/carbon.js?serve=CK7ICK3W&placement=stitcherio" id="_carbonads_js"></script>
</div>
</p>
 ]]></summary>

                <updated>2019-05-07T00:00:00+00:00</updated>
            </entry>
                                <entry>
                <title><![CDATA[ I&#039;m starting a newsletter ]]></title>

                <link rel="alternate" href="https://stitcher.io/blog/starting-a-newsletter"/>

                <id>https://www.stitcher.io/blog/starting-a-newsletter</id>

                <author>
                    <name><![CDATA[ Brent Roose ]]></name>
                </author>

                <summary type="html"><![CDATA[ <p>I'm going to give it a try: newsletters.
I'm always on the lookout for connecting more with my audience,
and feel like newsletters are a more personalised way of communication:
people can hit reply to engage in a one-on-one conversation.
For me, email is the perfect platform to do that.</p>
<h2 id="the-concept"><a href="#the-concept" class="heading-anchor">#</a> The concept</h2>
<p>What to expect if you subscribe?
First of all I'll try to send out one newsletter every month, more or less.
I won't spam you every day or week.
This also gives me ample time to write, review and rewrite the mail.
That's the same way I write my blog posts, and works very well for me.</p>
<p>My goal is to write a mini-blog post for every mail,
about a topic I've encountered the past month.
Next I'll also give some useful php-related tips and tricks.
Finally I'll share one or two, maybe three; links to interesting reads on the web.</p>
<p>That's what I envision the newsletter to look like, at least for now.</p>
<p>So, if you're interested, here's the signup link: <a href="https://stitcher.io/signup">https://stitcher.io/signup</a>.
The first edition will be sent sometime in the next two weeks.</p>
 ]]></summary>

                <updated>2019-04-26T00:00:00+00:00</updated>
            </entry>
                                <entry>
                <title><![CDATA[ Unsafe SQL functions in Laravel ]]></title>

                <link rel="alternate" href="https://stitcher.io/blog/unsafe-sql-functions-in-laravel"/>

                <id>https://www.stitcher.io/blog/unsafe-sql-functions-in-laravel</id>

                <author>
                    <name><![CDATA[ Brent Roose ]]></name>
                </author>

                <summary type="html"><![CDATA[ <p>I recently learned that not all query builder functionality in Laravel is "safe".
This means that user input shouldn't be passed directly to it,
as it might expose your application to SQL injection vulnerabilities.</p>
<p><div class="ad-container">
    <script async type="text/javascript" src="//cdn.carbonads.com/carbon.js?serve=CK7ICK3W&placement=stitcherio" id="_carbonads_js"></script>
</div>
</p>
<p>The past few days it became clear that there is little community knowledge about these unsafe functions.
Many developers assume, as did I, that the Laravel query builder completely prevents SQL injection attacks.</p>
<p>This blog post aims to raise awareness about what's safe, and what's not.</p>
<h2 id="an-sql-injection-vulnerability?"><a href="#an-sql-injection-vulnerability?" class="heading-anchor">#</a> An SQL injection vulnerability?</h2>
<p>Let's start by mentioning that this vulnerability has been fixed as of <a target="_blank" href="https://github.com/laravel/framework/commits/v5.8.11">Laravel 5.8.11</a>.
While technically we could call this a "vulnerability",
Laravel developers should know that they also play a role in preventing these kinds of issues.</p>
<p>Let's examine the issue.</p>
<p>Laravel has the ability to manually specify which columns to select on a query.
It also offers the shorthand notation to query JSON data:</p>
<pre><code class="language-xml hljs xml" data-lang="xml"><span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">type&gt;</span>Blog<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>::<span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">prop&gt;</span>query<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>()
    -&gt;<span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">prop&gt;</span>addSelect<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>('<span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">green&gt;</span>title<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>-&gt;<span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">blue&gt;</span>en<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>');</code></pre>
<pre><code class="language-xml hljs xml" data-lang="xml"><span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">keyword&gt;</span>SELECT<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">prop&gt;</span>json_extract<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>(`<span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">green&gt;</span>title<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>`, '$."<span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">blue&gt;</span>en<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>"') <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">keyword&gt;</span>FROM<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span> blogs;</code></pre>
<p>Instead of manually writing <code>json_extract</code>, we can use the simplified <code>-></code> syntax,
which Laravel will convert to the correct SQL statement.</p>
<p>Be careful though: Laravel won't do any escaping during this conversion.
Consider the following example:</p>
<pre><code class="language-xml hljs xml" data-lang="xml"><span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">type&gt;</span>Blog<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>::<span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">prop&gt;</span>query<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>()
    -&gt;<span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">prop&gt;</span>addSelect<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>('<span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">green&gt;</span>title<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>-&gt;<span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">blue&gt;</span>en<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">red&gt;</span>'#<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>');</code></pre>
<p>By inserting <code>'#</code> in our input, we can manually close the <code>json_extract</code> function,
and ignore the rest of the query:</p>
<pre><code class="language-xml hljs xml" data-lang="xml"><span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">keyword&gt;</span>SELECT<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">prop&gt;</span>json_extract<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>(`<span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">green&gt;</span>title<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>`, '$."<span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">blue&gt;</span>en<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">red&gt;</span>'#<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>"') FROM blogs;<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span></code></pre>
<p>This query will fail because of syntax errors, but what about the next one?</p>
<pre><code class="language-xml hljs xml" data-lang="xml"><span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">keyword&gt;</span>SELECT<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">prop&gt;</span>json_extract<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>(
    `<span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">green&gt;</span>title<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>`, 
    '$."<span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">blue&gt;</span>en<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">red&gt;</span>"')) 
FROM blogs RIGHT OUTER JOIN users ON users.id <span class="hljs-tag">&lt;&gt;</span> null
#<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">hljs <span class="hljs-attr">textgrey&gt;</span>"') FROM blogs;<span class="hljs-tag">&lt;/<span class="hljs-name">hljs&gt;</span></code></pre>
<p>We're adding an outer join on the <code>users</code> table.
Essentially selecting all data in it.</p>
<p>For reference, this is the URL encoded version of the malicious code:</p>
<pre><code class="language-llvm hljs llvm" data-lang="llvm"><span class="hljs-highlight  red"><span class="hljs-symbol">%22</span><span class="hljs-symbol">%27</span><span class="hljs-symbol">%29</span><span class="hljs-symbol">%29</span>+FROM+blogs+RIGHT+OUTER+JOIN+users+ON+users.id+<span class="hljs-symbol">%3</span>C<span class="hljs-symbol">%3</span>E+<span class="hljs-keyword">null</span><span class="hljs-symbol">%23</span></span></code></pre>
<p>Say we have the following endpoint in our application, to query blog posts from a public API:</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-highlight  type">Route</span>::<span class="hljs-highlight  prop">get</span>(<span class="hljs-string">'/posts'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">(<span class="hljs-highlight  type">Request</span> $request)</span> </span>{
    $fields = $request-&gt;<span class="hljs-highlight  prop">get</span>(<span class="hljs-string">'fields'</span>, []);

    $users = <span class="hljs-highlight  type">Blog</span>::<span class="hljs-highlight  prop">query</span>()-&gt;<span class="hljs-highlight  prop">addSelect</span>($fields)-&gt;<span class="hljs-highlight  prop">get</span>();

    <span class="hljs-keyword">return</span> <span class="hljs-highlight  prop">response</span>()-&gt;<span class="hljs-highlight  prop">json</span>($users);
});</code></pre>
<p>Consumers of this API might only be interested in a few fields,
that's why we added a <code>fields</code> filter.
Something similar to <a target="_blank" href="https://jsonapi.org/format/#fetching-sparse-fieldsets">sparse fieldsets</a> from the JSON api spec.</p>
<p>The endpoint can now be used like this:</p>
<pre><code class="language-sas hljs sas" data-lang="sas">/blog?fields[]=url<span class="hljs-variable">&amp;fields</span>[]=<span class="hljs-meta">title</span></code></pre>
<p>Now we insert our malicious code instead:</p>
<pre><code class="language-llvm hljs llvm" data-lang="llvm">/blog?fields[]=<span class="hljs-highlight  red"><span class="hljs-symbol">%22</span><span class="hljs-symbol">%27</span><span class="hljs-symbol">%29</span><span class="hljs-symbol">%29</span>+FROM+blogs+RIGHT+OUTER+JOIN+users+ON+users.id+<span class="hljs-symbol">%3</span>C<span class="hljs-symbol">%3</span>E+<span class="hljs-keyword">null</span><span class="hljs-symbol">%23</span></span></code></pre>
<p>It will be added to the query. And by returning the query result as JSON,
we'll see the full contents of the users table.</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-highlight  type">Blog</span>::<span class="hljs-highlight  prop">query</span>()-&gt;<span class="hljs-highlight  prop">addSelect</span>([
    <span class="hljs-string">'<span class="hljs-highlight  red">%22%27%29%29+FROM+blogs+RIGHT+OUTER+JOIN+users+ON+users.id+%3C%3E+null%23</span>'</span>
])-&gt;<span class="hljs-highlight  prop">get</span>();</code></pre>
<p>Two things need to be in place for this attack to be possible:</p>
<ul>
<li>An accessible API endpoint, which allows an attacker to pass his malicious code to <code>select</code> or <code>addSelect</code>.
Chances are you're not doing this manually in your project.
Though there are popular packages which provide this functionality for easy API endpoints and URL filtering.</li>
<li>The entry point table must have a column with JSON data.
Otherwise the <code>json_extract</code> function will fail, stopping our query.
From the entry point though, you can access all data.</li>
</ul>
<h2 id="prevention?"><a href="#prevention?" class="heading-anchor">#</a> Prevention?</h2>
<p>As mentioned before, this particular vulnerability has been fixed as of <a target="_blank" href="https://github.com/laravel/framework/commits/v5.8.11">Laravel 5.8.11</a>.
It's always good to keep up to date with the latest Laravel version.</p>
<p>More importantly though, developers should never allow user input directly to specify columns, without a whitelist.
In our previous example, you could prevent this attack by only allowing certain fields to be requested,
this would prevent the issue completely.</p>
<p>Next, one of our widely-used packages, <code>spatie/laravel-querybuilder</code>,
opened up <code>addSelect</code> by design.
This meant that websites using our package, were vulnerable to the underlying issue.
We immediately fixed it and Freek <a target="_blank" href="https://murze.be/an-important-security-release-for-laravel-query-builder">wrote about it</a> in depth.
If you're using our package and unable to update to the latest Laravel version,
you should immediately update the package.</p>
<p>Finally, the <a target="_blank" href="https://laravel.com/docs/5.8/queries">Laravel docs</a> have also been updated
to warn developers not to pass user input directly to columns when using the query builder.</p>
 ]]></summary>

                <updated>2019-04-10T00:00:00+00:00</updated>
            </entry>
                                <entry>
                <title><![CDATA[ Array destructuring in PHP ]]></title>

                <link rel="alternate" href="https://stitcher.io/blog/array-destructuring-with-list-in-php"/>

                <id>https://www.stitcher.io/blog/array-destructuring-with-list-in-php</id>

                <author>
                    <name><![CDATA[ Brent Roose ]]></name>
                </author>

                <summary type="html"><![CDATA[ <h2 id="list-or-[]"><a href="#list-or-[]" class="heading-anchor">#</a> List or []</h2>
<p>In PHP, <code>list</code> or <code>[]</code> is a so called "language construct", just like <code>array()</code>.
This language construct is used to "pull" variables out of an array.
In other words: it will "destructure" the array into separate variables.</p>
<p>Note that the word is "destructure", not "destruction" — that's something different 😉</p>
<p><div class="ad-container">
    <script async type="text/javascript" src="//cdn.carbonads.com/carbon.js?serve=CK7ICK3W&placement=stitcherio" id="_carbonads_js"></script>
</div>
</p>
<p>Here's what that looks like:</p>
<pre><code class="language-php hljs php" data-lang="php">$array = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]; 

<span class="hljs-comment">// Using the list syntax:</span>
<span class="hljs-keyword">list</span>($a, $b, $c) = $array;

<span class="hljs-comment">// Or the shorthand syntax:</span>
[$a, $b, $c] = $array;

<span class="hljs-comment">// $a = 1</span>
<span class="hljs-comment">// $b = 2</span>
<span class="hljs-comment">// $c = 3</span></code></pre>
<p>Whether you prefer <code>list</code> or its shorthand <code>[]</code> is up to you.
People might argue that <code>[]</code> is ambiguous with the shorthand array syntax,
and therefor prefer <code>list</code>.
I'll be using the shorthand version in code samples though.</p>
<p>So what more can <code>list</code> do?</p>
<h2 id="skip-elements"><a href="#skip-elements" class="heading-anchor">#</a> Skip elements</h2>
<p>Say you only need the third element of an array,
the first two can be skipped by simply not providing a variable.</p>
<pre><code class="language-php hljs php" data-lang="php">[, , $c] = $array;

<span class="hljs-comment">// $c = 3</span></code></pre>
<p>Also note that <code>list</code> will always start at index 0.
Take for example the following array:</p>
<pre><code class="language-php hljs php" data-lang="php">$array = [
    <span class="hljs-number">1</span> =&gt; <span class="hljs-string">'a'</span>,
    <span class="hljs-number">2</span> =&gt; <span class="hljs-string">'b'</span>,
    <span class="hljs-number">3</span> =&gt; <span class="hljs-string">'c'</span>,
];</code></pre>
<p>The first variable pulled out with <code>list</code> would be <code>null</code>,
because there's no element with index <code>0</code>.
This might seem like a shortcoming, but luckily there are more possibilities.</p>
<h2 id="non-numerical-keys"><a href="#non-numerical-keys" class="heading-anchor">#</a> Non-numerical keys</h2>
<p>PHP 7.1 allows <code>list</code> to be used with arrays that have non-numerical keys.
This opens a world of possibilities.</p>
<pre><code class="language-php hljs php" data-lang="php">$array = [
    <span class="hljs-string">'a'</span> =&gt; <span class="hljs-number">1</span>,
    <span class="hljs-string">'b'</span> =&gt; <span class="hljs-number">2</span>,
    <span class="hljs-string">'c'</span> =&gt; <span class="hljs-number">3</span>,
];</code></pre>
<pre><code class="language-php hljs php" data-lang="php">[<span class="hljs-string">'c'</span> =&gt; $c, <span class="hljs-string">'a'</span> =&gt; $a] = $array;</code></pre>
<p>As you can see, you can change the order however you want, and also skip elements entirely.</p>
<h2 id="in-practice"><a href="#in-practice" class="heading-anchor">#</a> In practice</h2>
<p>One of the uses of <code>list</code> are functions like <code>parse_url</code> and <code>pathinfo</code>.
Because these functions return an array with named parameters,
we can use <code>list</code> to pull out the information we'd like:</p>
<pre><code class="language-php hljs php" data-lang="php">[
    <span class="hljs-string">'basename'</span> =&gt; $file,
    <span class="hljs-string">'dirname'</span> =&gt; $directory,
] = pathinfo(<span class="hljs-string">'/users/test/file.png'</span>);</code></pre>
<p>As you can see, the variables don't need the same name as the key.
Also note that destructuring an array with an unknown key will trigger a notice:</p>
<pre><code class="language-php hljs php" data-lang="php">[
    <span class="hljs-string">'path'</span> =&gt; $path, 
    <span class="hljs-string">'query'</span> =&gt; $query,
] = parse_url(<span class="hljs-string">'https://stitcher.io/blog'</span>);

<span class="hljs-comment">// PHP Notice:  Undefined index: query</span></code></pre>
<p>In this case, <code>$query</code> would be <code>null</code>.</p>
<p>One last detail: trailing commas are allowed with named destructs,
just like you're used to with arrays.</p>
<h2 id="in-loops"><a href="#in-loops" class="heading-anchor">#</a> In loops</h2>
<p>You can also use the list construct in loops:</p>
<pre><code class="language-php hljs php" data-lang="php">$array = [
    [
        <span class="hljs-string">'name'</span> =&gt; <span class="hljs-string">'a'</span>,
        <span class="hljs-string">'id'</span> =&gt; <span class="hljs-number">1</span>
    ],
    [
        <span class="hljs-string">'name'</span> =&gt; <span class="hljs-string">'b'</span>,
        <span class="hljs-string">'id'</span> =&gt; <span class="hljs-number">2</span>
    ],
];

<span class="hljs-keyword">foreach</span> ($array <span class="hljs-keyword">as</span> [<span class="hljs-string">'id'</span> =&gt; $id, <span class="hljs-string">'name'</span> =&gt; $name]) {
    <span class="hljs-comment">// …</span>
}</code></pre>
<p>This could be useful when parsing for example a JSON or CSV file.
Be careful though that undefined keys will still trigger a notice.</p>
<p>In summary, there are some pretty good cases in which <code>list</code> can be of help!</p>
 ]]></summary>

                <updated>2019-04-01T00:00:00+00:00</updated>
            </entry>
                                <entry>
                <title><![CDATA[ Upgrade to PHP 7.3 with Homebrew on Mac ]]></title>

                <link rel="alternate" href="https://stitcher.io/blog/php-73-upgrade-mac"/>

                <id>https://www.stitcher.io/blog/php-73-upgrade-mac</id>

                <author>
                    <name><![CDATA[ Brent Roose ]]></name>
                </author>

                <summary type="html"><![CDATA[ <p><div class="sidenote">
    <p>
        Tired of managing servers?
        Check out <a href="https://gumroad.com/a/575280243" ping="https://analytics.stitcher.io/r" target="_blank" rel="noopener noreferrer">Serverless Visually Explained</a> by Matthieu Napoli and learn how to create scalable PHP applications on AWS.
    </p>
</div>
</p>
<h2 id="upgrading-with-homebrew"><a href="#upgrading-with-homebrew" class="heading-anchor">#</a> Upgrading with Homebrew</h2>
<p>Start by making sure brew is up-to-date:</p>
<pre><code class="language-bash hljs bash" data-lang="bash">brew update</code></pre>
<p>Next, upgrade PHP:</p>
<pre><code class="language-bash hljs bash" data-lang="bash">brew upgrade php</code></pre>
<p>Check the current version by running <code>php -v</code>:</p>
<pre><code class="language-bash hljs bash" data-lang="bash">php -v

<span class="hljs-comment"># PHP 7.3.3 (cli) (built: Mar  8 2019 16:42:07) ( NTS )</span>
<span class="hljs-comment"># Copyright (c) 1997-2018 The PHP Group</span>
<span class="hljs-comment"># Zend Engine v3.3.3, Copyright (c) 1998-2018 Zend Technologies</span>
<span class="hljs-comment">#     with Zend OPcache v7.3.3, Copyright (c) 1999-2018, by Zend Technologies</span></code></pre>
<p>Restart Nginx or Apache:</p>
<pre><code class="language-bash hljs bash" data-lang="bash">sudo nginx -s reload</code></pre>
<pre><code class="language-bash hljs bash" data-lang="bash">sudo apachectl restart</code></pre>
<p>And make sure that your local web server also uses PHP 7.3 by visiting this script:</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-comment"># index.php, accessible to your web server</span>

phpinfo(); <span class="hljs-keyword">die</span>();</code></pre>
<p>The version should show <code>7.3.x</code>.</p>
<p>Note: if you're using Laravel Valet, please keep on reading,
you need some extra steps in order for the web server to properly work.</p>
<h2 id="jit-compilation-failed-error"><a href="#jit-compilation-failed-error" class="heading-anchor">#</a> <code>JIT compilation failed</code> error</h2>
<p>You might notice this error showing up when running PHP scripts, for example: <code>composer global update</code>.</p>
<pre><code class="language-vim hljs vim" data-lang="vim">PHP Warnin<span class="hljs-variable">g:</span> preg_match(): JIT compilation failed</code></pre>
<p>This is due to a <a target="_blank" href="https://bugs.php.net/bug.php?id=77260">PHP 7.3 bug</a>,
and can easily be solved by making a change in your PHP ini file.</p>
<p>If you don't know which ini file is used, you can run the following:</p>
<pre><code class="language-bash hljs bash" data-lang="bash">php --ini

<span class="hljs-comment"># Configuration File (php.ini) Path: /usr/local/etc/php/7.3</span>
<span class="hljs-comment"># Loaded Configuration File:         /usr/local/etc/php/7.3/php.ini</span>
<span class="hljs-comment"># Scan for additional .ini files in: /usr/local/etc/php/7.3/conf.d</span>
<span class="hljs-comment"># Additional .ini files parsed:      /usr/local/etc/php/7.3/conf.d/ext-opcache.ini,</span>
<span class="hljs-comment"># /usr/local/etc/php/7.3/conf.d/php-memory-limits.ini</span></code></pre>
<p>Solving the above error can be done by manually disabling the <code>pcre.jit</code> option in our ini file.</p>
<pre><code class="language-diff hljs diff" data-lang="diff"># /usr/local/etc/php/7.3/php.ini

<span class="hljs-deletion">- ;pcre.jit=1</span>
<span class="hljs-addition">+ pcre.jit=0</span></code></pre>
<h2 id="extensions"><a href="#extensions" class="heading-anchor">#</a> Extensions</h2>
<p>You may have heard of Homebrew dropping support for PHP extensions,
this should now be done with PECL.
I personally use Imagick, Redis and Xdebug.</p>
<p>They can be installed like so:</p>
<pre><code class="language-bash hljs bash" data-lang="bash">pecl install imagick
pecl install redis
pecl install xdebug</code></pre>
<p>You can run <code>pecl list</code> to see which extensions are installed:</p>
<pre><code class="language-bash hljs bash" data-lang="bash">pecl list

<span class="hljs-comment"># Installed packages, channel pecl.php.net:</span>
<span class="hljs-comment"># =========================================</span>
<span class="hljs-comment"># Package Version State</span>
<span class="hljs-comment"># imagick 3.4.3   stable</span>
<span class="hljs-comment"># redis   4.3.0   stable</span>
<span class="hljs-comment"># xdebug  2.7.0   stable</span></code></pre>
<p>You can search for other extensions using <code>pecl search</code>:</p>
<pre><code class="language-bash hljs bash" data-lang="bash">pecl search pdf

<span class="hljs-comment"># Retrieving data...0%</span>
<span class="hljs-comment"># ..</span>
<span class="hljs-comment"># Matched packages, channel pecl.php.net:</span>
<span class="hljs-comment"># =======================================</span>
<span class="hljs-comment"># Package Stable/(Latest) Local</span>
<span class="hljs-comment"># pdflib  4.1.2 (stable)        Creating PDF on the fly with the PDFlib library</span></code></pre>
<p>Make sure to restart your web server after installing new packages:</p>
<pre><code class="language-bash hljs bash" data-lang="bash">sudo nginx -s reload</code></pre>
<pre><code class="language-bash hljs bash" data-lang="bash">sudo apachectl restart</code></pre>
<h2 id="valet"><a href="#valet" class="heading-anchor">#</a> Valet</h2>
<p>If you're using Laravel Valet, you should do the following steps to upgrade it:</p>
<pre><code class="language-bash hljs bash" data-lang="bash">composer global update</code></pre>
<p>Now run <code>valet install</code>:</p>
<pre><code class="language-bash hljs bash" data-lang="bash">valet install</code></pre>
<p>Note that if you're upgrading Valet from 2.0 to 2.1, your Valet config folder will automatically be moved from
<code>~/.valet</code> to <code>~/.config/valet</code>.</p>
<p>If you have any paths pointing to this folder, you'll have to update them.
I, for example, have a custom Nginx config file for one of my local sites.
This config file contained absolute paths to the Valet socket.
These had to be manually changed.</p>
<p>If you're running into problems with Nginx, you can check out the errors in the logs:</p>
<pre><code class="language-txt">cat /usr/local/var/log/nginx/error.log</code></pre>
<p>If any changes were made to your Valet config, you should restart it:</p>
<pre><code class="language-bash hljs bash" data-lang="bash">valet restart</code></pre>
<p><div class="author">
    Noticed a tpyo? You can submit a
    <a href="https://github.com/brendt/stitcher.io" target="_blank" rel="noopener noreferrer">PR</a> to fix it.

    If you want to stay up to date about what's happening on this blog, you can follow me
    <a href="https://mobile.twitter.com/brendt_gd" target="_blank" rel="noopener noreferrer">on Twitter</a> or subscribe to my newsletter:

    <form action="https://mail.stitcher.io/subscribe/81fa83d0-4a0b-4eff-b897-f6ce51dfb7f0" method="post" class="newsletter-form">
        <label for="newsletter-email-72">Email</label>
        <input type="email" name="email" id="newsletter-email-72"/>
        <button type="submit" class="cta cta-small">Subscribe</button>
    </form>
</div>
</p>
<h2 id="last-step"><a href="#last-step" class="heading-anchor">#</a> Last step</h2>
<p>Finally you should test and upgrade your projects for <a href="/blog/new-in-php-73">PHP 7.3 compatibility</a>.</p>
 ]]></summary>

                <updated>2019-03-21T00:00:00+00:00</updated>
            </entry>
                                <entry>
                <title><![CDATA[ Queueable actions in Laravel ]]></title>

                <link rel="alternate" href="https://stitcher.io/blog/laravel-queueable-actions"/>

                <id>https://www.stitcher.io/blog/laravel-queueable-actions</id>

                <author>
                    <name><![CDATA[ Brent Roose ]]></name>
                </author>

                <summary type="html"><![CDATA[ <p>People who follow my work or Spatie's, might have come across a pattern we use in some of our projects.
We call them "actions", and simply put they are classes to encapsulate business logic.</p>
<p>You can read up on how we structure projects by domains and actions <a href="/blog/organise-by-domain">here</a>,
and find examples of actions in the <a target="_blank" href="https://github.com/brendt/aggregate.stitcher.io/blob/master/app/Domain/Post/Actions/AddViewAction.php">code of my aggregate project</a>.</p>
<p><div class="ad-container">
    <script async type="text/javascript" src="//cdn.carbonads.com/carbon.js?serve=CK7ICK3W&placement=stitcherio" id="_carbonads_js"></script>
</div>
</p>
<p>Let's give one example using actions: creating a contract.
A contract creation not only saves a model in the database, but also generates a PDF of that contract.</p>
<p>Here's how we'd program this action:</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CreateContractAction</span>
</span>{
    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span><span class="hljs-params">(
        GeneratePdfAction $generatePdfAction
    )</span> </span>{ <span class="hljs-comment">/* … */</span> }
    
    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">execute</span><span class="hljs-params">(
        ContractData $contractData
    )</span>: <span class="hljs-title">Contract</span> </span>{
        $contract = Contract::createFromDTO($contractData);
        
        <span class="hljs-keyword">$this</span>-&gt;generatePdfAction-&gt;execute($contract);
        
        <span class="hljs-keyword">return</span> $contract-&gt;refresh();
    }
}</code></pre>
<p>If you know DDD, actions can be thought of as a command and its handler combined.
There are projects where this approach doesn't suffice, but there are also cases where they are very helpful.</p>
<p>We use this pattern a lot, because of the three benefits it offers:</p>
<ul>
<li>It's very easy to unit test individual action classes.</li>
<li>Actions can be composed out of other actions via the dependency container.</li>
<li>Actions allow us to think in well-defined context, they reduce cognitive load and decrease maintenance cost.</li>
</ul>
<p>One detail: there are some cases where we want actions to be executed asynchronously.</p>
<p>In the case of our example: we want to create the contract immediately,
but we don't want our users to wait until the PDF is generated.
This should be done asynchronously.</p>
<p>In the past, we used to wrap actions into jobs. It would look something like this:</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">GeneratePdfJob</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">ShouldQueue</span>
</span>{
    <span class="hljs-keyword">use</span> <span class="hljs-title">Dispatchable</span>, 
        <span class="hljs-title">InteractsWithQueue</span>, 
        <span class="hljs-title">Queueable</span>, 
        <span class="hljs-title">SerializesModels</span>;

    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span><span class="hljs-params">(
        Contract $contract 
    )</span> </span>{ <span class="hljs-comment">/* … */</span> }
    
    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">handle</span><span class="hljs-params">(
        GeneratePdfAction $generatePdfAction
    )</span> </span>{
        $generatePdfAction
            -&gt;execute(<span class="hljs-keyword">$this</span>-&gt;contract);
    }
}</code></pre>
<p>Instead of directly calling the action within another action, we dispatch a new job.</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CreateContractAction</span>
</span>{
    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">execute</span><span class="hljs-params">(
        ContractData $contractData
    )</span>: <span class="hljs-title">Contract</span> </span>{
        <span class="hljs-comment">// …</span>
        
        dispatch(<span class="hljs-keyword">new</span> GeneratePdfJob($contract));
        
        <span class="hljs-comment">// …</span>
    }
}</code></pre>
<p>This works fine, but manually wrapping an action in a job started to be kind of tedious in our larger projects.</p>
<p>That's why we started looking into ways of automating this.
And sure thing: we can!</p>
<p>Here's what the <code>GeneratePdfAction</code> would look like, using our package:</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-keyword">use</span> <span class="hljs-title">Spatie</span>\<span class="hljs-title">QueueableAction</span>\<span class="hljs-title">QueueableAction</span>;

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">GeneratePdfAction</span>
</span>{
    <span class="hljs-keyword">use</span> <span class="hljs-title">QueueableAction</span>;

    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span><span class="hljs-params">(
        Renderer $renderer,
        Browsershot $browsershot
    )</span> </span>{ <span class="hljs-comment">/* … */</span> }
    
    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">execute</span><span class="hljs-params">(Pdfable $pdfable)</span>: <span class="hljs-title">void</span>
    </span>{
        $html = <span class="hljs-keyword">$this</span>-&gt;renderer-&gt;render($pdfable);
        
        <span class="hljs-keyword">$this</span>-&gt;browsershot
            -&gt;html($html)
            -&gt;save($pdfable-&gt;getPath());
    }
}</code></pre>
<p>By using <code>QueueableAction</code>, this action can now be executed asynchronously.
Here's how it's used:</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CreateContractAction</span>
</span>{
    <span class="hljs-comment">// …</span>
    
    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">execute</span><span class="hljs-params">(
        ContractData $contractData
    )</span>: <span class="hljs-title">Contract</span> </span>{
        <span class="hljs-comment">// …</span>
        
        <span class="hljs-keyword">$this</span>-&gt;generatePdfAction
            -&gt;onQueue()
            -&gt;execute($contract);
            
        <span class="hljs-comment">// …</span>
    }
}</code></pre>
<p>It's important to note that the above will still have auto completion of the <code>execute</code> method,
as well as DI support; just like normal actions:</p>
<p><img src="/resources/img/blog/queueable/autocompletion.png" srcset="/resources/img/blog/queueable/autocompletion-599x92.png 599w, /resources/img/blog/queueable/autocompletion-847x131.png 847w, /resources/img/blog/queueable/autocompletion-1340x208.png 1340w, /resources/img/blog/queueable/autocompletion-1037x160.png 1037w, /resources/img/blog/queueable/autocompletion-1198x185.png 1198w" sizes="" alt=""></img></p>
<h2 id="what's-the-difference-with-jobs?!?"><a href="#what's-the-difference-with-jobs?!?" class="heading-anchor">#</a> What's the difference with Jobs?!?</h2>
<p>Actions allow for constructor injection, which means you can use actions within actions within actions, and so forth.</p>
<p>Jobs on the other hand get container injection in their <code>handle</code> method.
This means you cannot compose jobs of of other jobs via the dependency container.</p>
<p>It's obvious why Laravel cannot provide constructor injection in jobs:
job-specific data, like our contract, needs to be serialised on order for jobs to be queueable,
and the constructor is required to ensure the job has valid data.</p>
<p>By introducing the concept of actions, we're able to separate responsibilities between classes better:
jobs are used for data serialisation and executing tasks asynchronously;
but they are not concerned with business logic anymore.</p>
<p>If you're concerned with difficult to debug actions when they're queued,
you can put your mind at ease.
<code>ActionJob</code> classes that are dispatched to for example, Horizon,
have their name changed to the action class they wrap:</p>
<p><img src="/resources/img/blog/queueable/horizon.png" srcset="/resources/img/blog/queueable/horizon-1599x103.png 1599w, /resources/img/blog/queueable/horizon-1384x89.png 1384w, /resources/img/blog/queueable/horizon-799x51.png 799w, /resources/img/blog/queueable/horizon-1788x115.png 1788w, /resources/img/blog/queueable/horizon-1130x73.png 1130w" sizes="" alt=""></img></p>
<p>The underlying details of making actions queueable are hidden to the developer using them,
making it very easy to work with them, even in an asynchronous context.</p>
<p>Like I said: we made this into a small package.
It consists of a simple trait and an <code>ActionJob</code>.
If you want to give it a try, you can check it out here: <a target="_blank" href="https://github.com/spatie/laravel-queueable-action">spatie/laravel-queueable-action</a>.</p>
 ]]></summary>

                <updated>2019-03-11T00:00:00+00:00</updated>
            </entry>
                                <entry>
                <title><![CDATA[ Craftsmen know their tools ]]></title>

                <link rel="alternate" href="https://stitcher.io/blog/craftsmen-know-their-tools"/>

                <id>https://www.stitcher.io/blog/craftsmen-know-their-tools</id>

                <author>
                    <name><![CDATA[ Brent Roose ]]></name>
                </author>

                <summary type="html"><![CDATA[ <p>When programmers call themselves craftsmen or artisans,
I can agree that we are.
At the same time though, some of these programmers underestimate what craftsmanship actually means.</p>
<p><div class="ad-container">
    <script async type="text/javascript" src="//cdn.carbonads.com/carbon.js?serve=CK7ICK3W&placement=stitcherio" id="_carbonads_js"></script>
</div>
</p>
<p>Let's make a comparison.</p>
<p>My younger brother is an apprentice wood worker,
here's a picture of his shop:</p>
<p><img src="/resources/img/blog/craftsmen/3.jpeg" srcset="/resources/img/blog/craftsmen/3-1011x568.jpeg 1011w, /resources/img/blog/craftsmen/3-715x402.jpeg 715w, /resources/img/blog/craftsmen/3-1600x900.jpeg 1600w, /resources/img/blog/craftsmen/3-1239x696.jpeg 1239w, /resources/img/blog/craftsmen/3-1431x804.jpeg 1431w" sizes="" alt=""></img></p>
<p>To me this looks like chaos,
but my brother manages to find his way around.
Even better: he actually makes pretty and useful things.</p>
<p>Granted, he is still an apprentice,
but I've been happily surprised by the things he has crafted up until now.
I can imagine his skills will improve only more and more over time.</p>
<p>For example, take a look at this display thingy he made:</p>
<p><img src="/resources/img/blog/craftsmen/6.jpeg" srcset="/resources/img/blog/craftsmen/6-1000x1000.jpeg 1000w, /resources/img/blog/craftsmen/6-774x774.jpeg 774w, /resources/img/blog/craftsmen/6-894x894.jpeg 894w, /resources/img/blog/craftsmen/6-632x632.jpeg 632w, /resources/img/blog/craftsmen/6-447x447.jpeg 447w" sizes="" alt=""></img></p>
<p>Or this clock:</p>
<p><img src="/resources/img/blog/craftsmen/4.jpeg" srcset="/resources/img/blog/craftsmen/4-1000x563.jpeg 1000w, /resources/img/blog/craftsmen/4-894x503.jpeg 894w, /resources/img/blog/craftsmen/4-774x435.jpeg 774w, /resources/img/blog/craftsmen/4-447x251.jpeg 447w, /resources/img/blog/craftsmen/4-632x355.jpeg 632w" sizes="" alt=""></img></p>
<p>He also made me some nice sound absorbing panels for my podcast studio at home:</p>
<p><img src="/resources/img/blog/craftsmen/5.jpeg" srcset="/resources/img/blog/craftsmen/5-447x282.jpeg 447w, /resources/img/blog/craftsmen/5-632x398.jpeg 632w, /resources/img/blog/craftsmen/5-894x564.jpeg 894w, /resources/img/blog/craftsmen/5-774x488.jpeg 774w, /resources/img/blog/craftsmen/5-1000x631.jpeg 1000w" sizes="" alt=""></img></p>
<p>The same way my brother is crafting things with wood,
we are building websites and programs with code.
I wonder if we have mastered our toolset like he has.</p>
<p>See, he isn't building all this stuff with his bare hands.
He's using the right tools for the job.
Have a look at some of the machines he's working with:</p>
<p><img src="/resources/img/blog/craftsmen/2.jpeg" srcset="/resources/img/blog/craftsmen/2-894x503.jpeg 894w, /resources/img/blog/craftsmen/2-774x435.jpeg 774w, /resources/img/blog/craftsmen/2-447x251.jpeg 447w, /resources/img/blog/craftsmen/2-632x355.jpeg 632w, /resources/img/blog/craftsmen/2-1000x563.jpeg 1000w" sizes="" alt=""></img></p>
<p>Or this one:</p>
<p><img src="/resources/img/blog/craftsmen/1.jpeg" srcset="/resources/img/blog/craftsmen/1-632x355.jpeg 632w, /resources/img/blog/craftsmen/1-447x251.jpeg 447w, /resources/img/blog/craftsmen/1-1000x563.jpeg 1000w, /resources/img/blog/craftsmen/1-894x503.jpeg 894w, /resources/img/blog/craftsmen/1-774x435.jpeg 774w" sizes="" alt=""></img></p>
<p>I've got no clue what these monstrosities do
or how to use them — but my brother does.</p>
<p>He had to <em>learn</em> to work these tools.
Not only did he need to know which button does what;
he had learn how to apply specific techniques to these machines
in order to cut and saw the wood as he wants.</p>
<p>He has a mentor and spends a considerate amount of time learning and improving his tools and techniques.
It takes patience:
he couldn't just dive in at the beginning,
there is a learning curve to creating quality.</p>
<p>What is a programmer's equivalent?
As we call ourselves craftsmen and artisans,
can I assume we also know our tools inside and out?</p>
<p>Can I assume we dedicate time to properly learn how to work with those tools,
how to improve our skillset on a day-by-day basis?</p>
<p>Does it seem like a detail to us?
Do we think a simple saw gets us equally far as the big monster machine my brother is using?</p>
<p>Can I assume we know the value of our tools?
Do we realise they help us be efficient;
they simplify mundane tasks so that we can focus on core problems;
they are a safeguard when we tend to make stupid mistakes?</p>
<p>Are those fair assumptions when we call ourselves craftsmen?</p>
<p>All these questions pop into my head
when I hear people complain about how learning to use an IDE,
setting up your local environment, properly learning version control or learning a framework;
takes too much time.</p>
<p>What did you expect?
In order to write good code, maintainable code, code you can be proud of;
in order to do that, you need to master the right tools.</p>
<p>There are no shortcuts to this, you need to spend time learning.</p>
<p>I want to challenge you to think about how you use your tools.
There might be opportunities, areas you can improve on.
Be willing to spend time improving your skillset.</p>
<p>It's time well invested.</p>
<p>PS: if you're into wood working,
be sure to check out my brother's <a target="_blank" href="https://www.instagram.com/t_werkhuis/">Instagram</a>!</p>
 ]]></summary>

                <updated>2019-02-21T00:00:00+00:00</updated>
            </entry>
                                <entry>
                <title><![CDATA[ PHP 8: The JIT ]]></title>

                <link rel="alternate" href="https://stitcher.io/blog/php-jit"/>

                <id>https://www.stitcher.io/blog/php-jit</id>

                <author>
                    <name><![CDATA[ Brent Roose ]]></name>
                </author>

                <summary type="html"><![CDATA[ <div class="sidenote">
    <p>Heads up! I've done some <a href="/blog/jit-in-real-life-web-applications">benchmarks on the JIT</a> in real-life web applications. Be sure to check them out.</p>
</div>
<p>Dmitry Stogov recently opened an <a target="_blank" href="https://wiki.php.net/rfc/jit">RFC</a> to add a JIT compiler to PHP.
So, what is that about? Does "JIT" mean "instantly better PHP",
or is this a more nuanced topic?
Today we'll briefly look at what the "JIT" actually does,
and more importantly: the difficulties <em>and</em> opportunities it brings to the PHP world.</p>
<p><div class="ad-container">
    <script async type="text/javascript" src="//cdn.carbonads.com/carbon.js?serve=CK7ICK3W&placement=stitcherio" id="_carbonads_js"></script>
</div>
</p>
<h2 id="what-is-jit?"><a href="#what-is-jit?" class="heading-anchor">#</a> What is JIT?</h2>
<p>"JIT" stands for "just in time".
You probably know that PHP is an interpreted language:
it's not compiled like a C, Java or Rust program.
Instead it is translated to machine code — stuff the CPU understands — at runtime.</p>
<blockquote>
<p>"JIT" is a technique that will compile parts of the code at runtime,
so that the compiled version can be used instead.</p>
</blockquote>
<p>Think of it like a "cached version" of the interpreted code, generated at runtime.</p>
<p>How does that work, you ask?</p>
<p>There's a so called "monitor" that will look at the code as it's running.
When this monitor detects parts of your code that are re-executed,
it will mark those parts as "warm" or "hot", depending on the frequency.
These hot parts can be compiled as optimised machine code,
and used on the fly instead of the real code.</p>
<p>You can imagine there's a lot more complexity to this topic.
If you want to know a little more,
you can check out <a target="_blank" href="https://hacks.mozilla.org/2017/02/a-crash-course-in-just-in-time-jit-compilers/">Mozilla's crash course in JIT compilers</a>.
For the purpose of this blog post, it's enough to understand that a JIT compiler
may improve the performance of your program significantly,
<em>but</em> it's a difficult thing to get right.</p>
<p>Zeev, one of the PHP core developers, showed a demo with fractal generation a while back:</p>
<p>
    <iframe width="560" height="400" 
        src="https://www.youtube.com/embed/dWH65pmnsrI" 
        frameborder="0" 
        allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" 
        allowfullscreen>
    </iframe>
</p>
<p>Fancy, right? Hold on though…</p>
<p><div class="author">
    Noticed a tpyo? You can submit a
    <a href="https://github.com/brendt/stitcher.io" target="_blank" rel="noopener noreferrer">PR</a> to fix it.

    If you want to stay up to date about what's happening on this blog, you can follow me
    <a href="https://mobile.twitter.com/brendt_gd" target="_blank" rel="noopener noreferrer">on Twitter</a> or subscribe to my newsletter:

    <form action="https://mail.stitcher.io/subscribe/81fa83d0-4a0b-4eff-b897-f6ce51dfb7f0" method="post" class="newsletter-form">
        <label for="newsletter-email-73">Email</label>
        <input type="email" name="email" id="newsletter-email-73"/>
        <button type="submit" class="cta cta-small">Subscribe</button>
    </form>
</div>
</p>
<h2 id="it's-not-all-fun-and-games"><a href="#it's-not-all-fun-and-games" class="heading-anchor">#</a> It's not all fun and games</h2>
<p>Let's address the elephpant in the room:
PHP is seldom used to generate fractal animations.</p>
<p>Knowing that the JIT compiler tries to identify hot parts of your code,
you can guess why it has such an impact on the fractal example:
there's a lot of the same calculations happening over and over again.
However, since PHP is most often used in a web context,
we should also measure the JIT's impact there.</p>
<p>It turns out that, unfortunately, there's a <a href="/blog/jit-in-real-life-web-applications">lot less hot code while handling a web request</a>.
This doesn't mean the JIT couldn't improve web performance at all,
but we also won't see similar improvements like with the fractal example.</p>
<p>Is this a reason to ditch the JIT? Definitely not!
There are good arguments to add it,
even though it might not have the performance impact we'd hope for.</p>
<ul>
<li>It opens the door for PHP to be used as a very performant language outside of the web.</li>
<li>The JIT can be improved upon over time, as well could our code.</li>
</ul>
<p>These are valid arguments in favour of the JIT.
Unfortunately though, there are also more arguments against it.</p>
<h2 id="a-complexity-to-maintain"><a href="#a-complexity-to-maintain" class="heading-anchor">#</a> A complexity to maintain</h2>
<p>Because the JIT generates machine code,
you can imagine it's complex material for a "higher level programmer" to understand.</p>
<p>For example: having machine code as output, it will be harder to debug possible bugs in PHP's JIT compiler.
Luckily there are tools to help debugging.
But still, it <em>is</em> machine code.
Say there is a bug in the JIT compiler, you need a developer who knows how to fix it.
Dmitry is the one who did most of the coding up until now,
and remember that PHP core development is done on a voluntary basis.</p>
<p>With just a few people being able to maintain such a code base today,
the question whether the JIT compiler can be maintained properly seems justified.
Of course people can learn how the compiler works.
But it is complex material nevertheless.
The <a target="_blank" href="https://github.com/php/php-src/pull/3792">pull request right now</a> counts around 50k lines of added code.
And mind you: this is not your average client-web-application-codebase.
This is almost-as-close-as-you-can-get-to-the-CPU-programming.</p>
<p>Again this should not be a reason to ditch the JIT,
but the cost of maintenance should be carefully considered.
In first place by the ones who have to maintain the code;
but also by the userland community, who should also be aware that some bugfixes or version updates might take longer than what we're used to right now.</p>
<div class="sidenote">
    <h2>Cross platform?</h2>
    <p>
        As of newer versions of the JIT, it now also works Windows and Mac!
        A big step forward, and definitely worth mentioning.
    </p>
</div>
<h2 id="so-why-would-you-want-it?"><a href="#so-why-would-you-want-it?" class="heading-anchor">#</a> So why would you want it?</h2>
<p>If right now you're thinking that the JIT offers little short-term benefits for your web applications,
you might be right.
It's difficult to tell what impact it will have on production applications, before actually using it.</p>
<p>The JIT RFC proposed to enable it in PHP 8, but also to add an experimental version in PHP 7.4.
Unfortunately the <a target="_blank" href="https://wiki.php.net/rfc/jit#proposed_voting_choices">RFC</a> has passed for PHP 8, but not for 7.4.
This means we'll have to wait until PHP 8 before being able to try it out on real projects.
You can of course compile PHP 8 from source, if you already want to take a look.</p>
<p>Even though the JIT might not offer any significant short-term improvements,
we should remember that it will open a lot of possibilities for PHP to grow,
both as a web language and a more generally purposed language.
So the question that needs answering: is this possibly bright future worth the investment today?</p>
<p>What do you, the userland programmer think?
Let's discuss it on <a target="_blank" href="https://news.ycombinator.com/item?id=22953879">Hacker News</a>.
If you want to personally reach out, you can find me on <a target="_blank" href="https://twitter.com/brendt_gd">Twitter</a> or via <a href="mailto:brendt@stitcher.io">e-mail</a>!</p>
<p><div class="sidenote">
    <p>
        Tired of managing servers?
        Check out <a href="https://gumroad.com/a/575280243" ping="https://analytics.stitcher.io/r" target="_blank" rel="noopener noreferrer">Serverless Visually Explained</a> by Matthieu Napoli and learn how to create scalable PHP applications on AWS.
    </p>
</div>
</p>
 ]]></summary>

                <updated>2019-02-06T00:00:00+00:00</updated>
            </entry>
                                <entry>
                <title><![CDATA[ I&#039;m building something ]]></title>

                <link rel="alternate" href="https://stitcher.io/blog/announcing-aggregate"/>

                <id>https://www.stitcher.io/blog/announcing-aggregate</id>

                <author>
                    <name><![CDATA[ Brent Roose ]]></name>
                </author>

                <summary type="html"><![CDATA[ <p>Being a blogger myself, I realise how much
quality content is written on the internet every day;
content that gets lost in an endless stream of online information.</p>
<p>I know how much you want to be able to share your content with an audience,
but it's so difficult to do.
Twitter is very momentarily; Reddit suffers from spam and angry people;
and Facebook is, well, Facebook.</p>
<p>I want a platform where I don't have to feel guilty about sharing my content,
and where readers can easily discover new things to read.</p>
<p>So I took one of the oldest blogging concepts and made a community driven platform out of it: RSS.</p>
<h2 id="community-driven?"><a href="#community-driven?" class="heading-anchor">#</a> Community driven?</h2>
<p>I realise that starting a project on my own, won't get me far.
We live in a day and age where every possible app has been invented at least twice.
Trying to do this myself won't get me far.</p>
<p>That's why I decided on two things.</p>
<p>The code is <strong>open source</strong>. I want to encourage people to contribute,
help build the platform they want it to be.</p>
<p>The <strong>content</strong> is provided by the community, and the platform will always redirect to the source of origin.
It will never try to host your content, it's merely a portal.</p>
<h2 id="how-does-it-work?"><a href="#how-does-it-work?" class="heading-anchor">#</a> How does it work?</h2>
<p>Content creators can add their RSS feed to the platform.
Their posts are synced and tagged according to the content and RSS meta data.</p>
<p>Readers can explore new content daily in their feed.
I've decided to not try and do anything fancy while building this feed.
Platforms like Facebook and Twitter try to be smart and build a feed based on "your interests".
They never succeed.</p>
<p>So the feed is a simple chronological list, which you can filter on tags.
That's it. There are no votes, no comments.
You're encouraged to go the blogs themselves, and share your thoughts over there.</p>
<p>The goal of the platform is simple: help readers discover new content,
and get them to that original content as fast as possible.
Meanwhile, content creators get a platform where they are allowed to share their own stuff,
and an audience hungry for more.</p>
<h2 id="get-in-touch"><a href="#get-in-touch" class="heading-anchor">#</a> Get in touch</h2>
<p>Even though the basic concept is stable and up and running, there's still lots of things to do.
There's improvements to be made to the tagging system,
there are some convenience features that need to be added and more.</p>
<p>If you're a web programmer yourself who's interested in open source,
feel free to take a look around the <a target="_blank" href="https://github.com/brendt/aggregate.stitcher.io/projects/1">project board</a>.</p>
<p>Oh and, of course, here's a link to the platform: <a target="_blank" href="https://aggregate.stitcher.io/">aggregate.stitcher.io</a>.</p>
 ]]></summary>

                <updated>2019-01-29T00:00:00+00:00</updated>
            </entry>
                                <entry>
                <title><![CDATA[ Analytics for developers ]]></title>

                <link rel="alternate" href="https://stitcher.io/blog/analytics-for-developers"/>

                <id>https://www.stitcher.io/blog/analytics-for-developers</id>

                <author>
                    <name><![CDATA[ Brent Roose ]]></name>
                </author>

                <summary type="html"><![CDATA[ <p>I've been running this blog for almost three years now.
I've used Google Analytics, not only to track the amount of users,
but also to actively improve my blog.</p>
<p>I'm no marketeer, just a simple developer.
Today I want to share from my technical experience, how I use traffic data and react to it.</p>
<p><div class="ad-container">
    <script async type="text/javascript" src="//cdn.carbonads.com/carbon.js?serve=CK7ICK3W&placement=stitcherio" id="_carbonads_js"></script>
</div>
</p>
<h2 id="filtering-data"><a href="#filtering-data" class="heading-anchor">#</a> Filtering data</h2>
<p>First and foremost, the boring part.
It takes less than five minutes to set up, but will improve the correctness of your data: filters.</p>
<p>As you know, Google Analytics works with a tracking code which you can place everywhere.
That tracking code can easily be used somewhere else, polluting your data.
I'm thinking of local development environments or, more malicious:
people who steal your tracking code as a deliberate attack.</p>
<p>Luckily this can easily be prevented with filters.
So take five minutes to set up some filters in the admin section:</p>
<p><img src="/resources/img/blog/analytics/filter-1.png" srcset="/resources/img/blog/analytics/filter-1-754x459.png 754w, /resources/img/blog/analytics/filter-1-1066x649.png 1066w, /resources/img/blog/analytics/filter-1-1686x1028.png 1686w, /resources/img/blog/analytics/filter-1-1508x919.png 1508w, /resources/img/blog/analytics/filter-1-1305x795.png 1305w" sizes="" alt=""></img></p>
<p>With filters, you can build a whitelist of traffic you want to include.
I usually make a separate view called "Filtered", and keep the "All Web Site Data" view as is, for testing.</p>
<p>Here's an example of a filter I set up, to only include traffic from the "stitcher.io" domain:</p>
<p><img src="/resources/img/blog/analytics/filter-2.png" srcset="/resources/img/blog/analytics/filter-2-923x600.png 923w, /resources/img/blog/analytics/filter-2-753x490.png 753w, /resources/img/blog/analytics/filter-2-1192x775.png 1192w, /resources/img/blog/analytics/filter-2-533x346.png 533w, /resources/img/blog/analytics/filter-2-1066x693.png 1066w" sizes="" alt=""></img></p>
<p>You can also filter out local domains, whitelist IP addresses and more.
If you want to be really safe, you could whitelist the IP address of your host,
in combination with the host name.</p>
<p>With the correct filters set up, it's time to interpret data.</p>
<h2 id="decreasing-bounce-rate"><a href="#decreasing-bounce-rate" class="heading-anchor">#</a> Decreasing bounce rate</h2>
<p>Here's a good question to start with: "should I want to decrease my bounce rate"?
The corporate marketeer will of course scream "YES".</p>
<p>I say: it depends. Take for example this blog, or almost any other blog.
When I share a post on social media, most visitors come to read that post, and that post only.</p>
<p>It's not that weird when you think about it: don't we all do the same when browsing?</p>
<p>A high bounce rate means that not a lot of visitors click through after their first page visit.
In case of a blog, there's nothing wrong with that:
many of these people will return the next time you share a link on social media.</p>
<p>Let's take a look at the traffic in November of 2018, on this blog.</p>
<p><img src="/resources/img/blog/analytics/bounce-rate-1.png" srcset="/resources/img/blog/analytics/bounce-rate-1-1685x873.png 1685w, /resources/img/blog/analytics/bounce-rate-1-1376x713.png 1376w, /resources/img/blog/analytics/bounce-rate-1-1946x1008.png 1946w, /resources/img/blog/analytics/bounce-rate-1-973x504.png 973w, /resources/img/blog/analytics/bounce-rate-1-2176x1128.png 2176w" sizes="" alt=""></img></p>
<p>That's a rather high bounce rate.
Though over the last year, I see a consistent 20-ish percent of returning visitors.
These people also add to the bounce rate,
though they are the ones who visit this site over and over again, albeit only one page at a time.</p>
<p><img src="/resources/img/blog/analytics/bounce-rate-2.png" srcset="/resources/img/blog/analytics/bounce-rate-2-600x576.png 600w, /resources/img/blog/analytics/bounce-rate-2-268x257.png 268w, /resources/img/blog/analytics/bounce-rate-2-464x445.png 464w, /resources/img/blog/analytics/bounce-rate-2-536x514.png 536w, /resources/img/blog/analytics/bounce-rate-2-379x363.png 379w" sizes="" alt=""></img></p>
<p>You can see how relative this data is,
and how you cannot simply say "decrease the bounce rate".</p>
<p>But what can we learn from it though?</p>
<p>If you're a regular reader of my blog, first of all: thanks, you're in the 20% !
Secondly: you know that I place an "up next" link down at the bottom of each post.</p>
<p>In the past, these links were automatically generated and just showed the post before the current one.</p>
<p>When analysing the bounce rate of individual pages though,
I noticed that some pages had a way lower bounce rate than others.</p>
<p>Looking at these low bounce pages,
they were the pages where I deliberately put another link at the bottom,
one to a post of which I thought was a little related to the current one.</p>
<p>So how do you analyse this?</p>
<p>The "Content Drilldown" page is great to analyse per-page statistics.
You can find it under <code>Behavior > Site Content</code>.</p>
<p><img src="/resources/img/blog/analytics/bounce-rate-3.png" srcset="/resources/img/blog/analytics/bounce-rate-3-1113x510.png 1113w, /resources/img/blog/analytics/bounce-rate-3-2490x1142.png 2490w, /resources/img/blog/analytics/bounce-rate-3-1928x884.png 1928w, /resources/img/blog/analytics/bounce-rate-3-1574x721.png 1574w, /resources/img/blog/analytics/bounce-rate-3-2227x1021.png 2227w" sizes="" alt=""></img></p>
<p>Also note how the "advanced filter" is applied to only show pages with lower bounce rates.
We can use this data to learn what we're doing right,
and target pages that might need optimisation.</p>
<h2 id="top-referrals"><a href="#top-referrals" class="heading-anchor">#</a> Top referrals</h2>
<p>I know most of my traffic comes from links that are shared.
I've got some posts that show up high in Google, but more about that later.</p>
<p>The "Referrals" page under <code>Acquisition > All Traffic</code> is an important one to know where your traffic is coming from.</p>
<p><img src="/resources/img/blog/analytics/referrals-1.png" srcset="/resources/img/blog/analytics/referrals-1-1874x752.png 1874w, /resources/img/blog/analytics/referrals-1-2420x971.png 2420w, /resources/img/blog/analytics/referrals-1-1082x434.png 1082w, /resources/img/blog/analytics/referrals-1-2164x869.png 2164w, /resources/img/blog/analytics/referrals-1-1530x614.png 1530w" sizes="" alt=""></img></p>
<p>You can see peaks in traffic during the day, by using the real time overview.
I often check the referrals at these moments, to know where traffic is coming from.</p>
<p>I believe that, as an author, it's important to engage with your readers.
When content is shared on social media, reactions often show up there;
so it's only natural that you reply to them there.</p>
<p>A quick Google search on the blog title and website of the referral,
often gets me to the right place in no time.</p>
<h2 id="average-session-duration"><a href="#average-session-duration" class="heading-anchor">#</a> Average session duration</h2>
<p>Now that we know people are visiting our blog,
we also want to know whether they are actually reading the content.</p>
<p>Again, the "Content Drilldown" page gets us this data.
By adding a simple regex filter <code>^\/[a-z\-]+$</code>, we filter out pages with query parameters.
We're also not interested in pages with very low pageviews.</p>
<p><img src="/resources/img/blog/analytics/session-duration-1.png" srcset="/resources/img/blog/analytics/session-duration-1-1726x1054.png 1726w, /resources/img/blog/analytics/session-duration-1-2229x1362.png 2229w, /resources/img/blog/analytics/session-duration-1-1993x1217.png 1993w, /resources/img/blog/analytics/session-duration-1-1409x860.png 1409w, /resources/img/blog/analytics/session-duration-1-996x608.png 996w" sizes="" alt=""></img></p>
<p>What we're actually interested in, are the pages with the lowest session duration,
to see whether some things can be improved.</p>
<p><img src="/resources/img/blog/analytics/session-duration-2.png" srcset="/resources/img/blog/analytics/session-duration-2-2230x1032.png 2230w, /resources/img/blog/analytics/session-duration-2-1727x799.png 1727w, /resources/img/blog/analytics/session-duration-2-997x461.png 997w, /resources/img/blog/analytics/session-duration-2-1410x652.png 1410w, /resources/img/blog/analytics/session-duration-2-1994x922.png 1994w" sizes="" alt=""></img></p>
<p>Some of these blog posts are very short ones, so nothing strange there.
Though it also shows what posts were less interesting to my audience.
It's a good metric to know what kind of content I shouldn't focus on.</p>
<h2 id="analysing-behaviour-flow"><a href="#analysing-behaviour-flow" class="heading-anchor">#</a> Analysing behaviour flow</h2>
<p>The "Behavior Flow" chart under the <code>Behavior</code> menu is one
that helps visualising how visitors browse your site.</p>
<p>This is what it looks like.</p>
<p><img src="/resources/img/blog/analytics/flow-1.png" srcset="/resources/img/blog/analytics/flow-1-1852x1146.png 1852w, /resources/img/blog/analytics/flow-1-1656x1024.png 1656w, /resources/img/blog/analytics/flow-1-1171x724.png 1171w, /resources/img/blog/analytics/flow-1-1434x887.png 1434w, /resources/img/blog/analytics/flow-1-828x512.png 828w" sizes="" alt=""></img></p>
<p>As with the bounce rate optimisations,
this overview can help identifying pages that encourage people to click through,
and pages that don't.</p>
<p>I use this overview in combination with the "Content Drilldown" page,
to analyse where people come from, where they go,
and whether I can improve my content to help them read what they are actually interested in.</p>
<h2 id="analysing-keywords-and-search"><a href="#analysing-keywords-and-search" class="heading-anchor">#</a> Analysing keywords and search</h2>
<p>I know that most of my traffic comes from links that are shared over the internet,
though I also want to know how much comes through search sites like Google.
These pages get a more constant amount of monthly visitors,
and might pose a good opportunity to introduce readers to my blog.</p>
<p>By going to <code>Acquisition > All Traffic > Channels</code>,
you can click through to the "Organic Search" channel.</p>
<p>By default, this overview shows what keywords were searched on,
which isn't very useful to us right now.
You'll also notice that most of the time, this keyword data is simply missing.</p>
<p>You can however specify a "Secondary Dimension", on the "Landing Page".
Now the overview will be grouped per page the visitor landed on,
which is exactly what we want to know!</p>
<p><img src="/resources/img/blog/analytics/channels-1.png" srcset="/resources/img/blog/analytics/channels-1-2041x1146.png 2041w, /resources/img/blog/analytics/channels-1-1290x724.png 1290w, /resources/img/blog/analytics/channels-1-1825x1024.png 1825w, /resources/img/blog/analytics/channels-1-912x512.png 912w, /resources/img/blog/analytics/channels-1-1580x887.png 1580w" sizes="" alt=""></img></p>
<p>Now we know what pages are good candidates to optimise,
but we still don't know what keywords people actually searched for.</p>
<p>If you link your Search Console to Analytics, you'll get the data you need.
On <code>Acquisition > Search Console > Queries</code>, you'll see an overview of these keywords.</p>
<p>Here's an example, for this past week in January, 2019:</p>
<p><img src="/resources/img/blog/analytics/channels-2.png" srcset="/resources/img/blog/analytics/channels-2-2054x970.png 2054w, /resources/img/blog/analytics/channels-2-918x433.png 918w, /resources/img/blog/analytics/channels-2-1299x613.png 1299w, /resources/img/blog/analytics/channels-2-1837x867.png 1837w, /resources/img/blog/analytics/channels-2-1591x751.png 1591w" sizes="" alt=""></img></p>
<h2 id="measuring-site-speed"><a href="#measuring-site-speed" class="heading-anchor">#</a> Measuring site speed</h2>
<p>Lastly, something I'm very proud of: my blog's performance.
When building this blog I really wanted it to be fast, everywhere.</p>
<p>Analytics also helps with that. Under <code>Behavior > Site Speed > Page Timings</code>,
you can monitor the performance of individual pages.
Take, for example, the most visited pages of November, 2018.</p>
<p><img src="/resources/img/blog/analytics/performance-1.png" srcset="/resources/img/blog/analytics/performance-1-1728x723.png 1728w, /resources/img/blog/analytics/performance-1-998x417.png 998w, /resources/img/blog/analytics/performance-1-1411x590.png 1411w, /resources/img/blog/analytics/performance-1-2232x934.png 2232w, /resources/img/blog/analytics/performance-1-1996x835.png 1996w" sizes="" alt=""></img></p>
<p>The red lines are the interesting ones: these pages load slower than the site's average.
This can be because of many reasons: lots of visitors with a bad connection to the host,
images that should be better optimised, maybe a problem with a script I wrote for a post?</p>
<p>This view allows me to find performance problems early on, and fix them.</p>
<h2 id="in-closing"><a href="#in-closing" class="heading-anchor">#</a> In closing</h2>
<p>This was of course nothing close to all the features Analytics offers.
But I hope that I did show you the mindset I have when analysing data.
These are real people visiting my site, and I want to do good for my audience.</p>
<p>Google Analytics is a great tool to help you with that,
but in the end, it all starts with good content.</p>
 ]]></summary>

                <updated>2019-01-22T00:00:00+00:00</updated>
            </entry>
                                <entry>
                <title><![CDATA[ Share a blog: sebastiandedeyne ]]></title>

                <link rel="alternate" href="https://stitcher.io/blog/share-a-blog-sebastiandedeyne-com"/>

                <id>https://www.stitcher.io/blog/share-a-blog-sebastiandedeyne-com</id>

                <author>
                    <name><![CDATA[ Brent Roose ]]></name>
                </author>

                <summary type="html"><![CDATA[ <p>Sebastian's blog has seen many forms the past few years.
From his own personal blog to an aggregator newsletter;
he now settled on a combination of both.</p>
<p>He writes and shares content about web development,
design and programming in general.
In short: a good blog for every programmer to follow!</p>
<p><a target="_blank" href="https://sebastiandedeyne.com/">Check it out</a>!</p>
 ]]></summary>

                <updated>2019-01-15T00:00:00+00:00</updated>
            </entry>
                                <entry>
                <title><![CDATA[ Comparing dates ]]></title>

                <link rel="alternate" href="https://stitcher.io/blog/comparing-dates"/>

                <id>https://www.stitcher.io/blog/comparing-dates</id>

                <author>
                    <name><![CDATA[ Brent Roose ]]></name>
                </author>

                <summary type="html"><![CDATA[ <p>Here's a simple question:</p>
<p>Does the date range <span class="no-break">"2019-01-01 – 2019-01-31"</span> contain the date <span class="no-break">"2019-01-31"</span>?</p>
<p>The answer is yes, right?</p>
<p>… Right?</p>
<p>What if the range ends at 10 o'clock, while our test date starts at 11 o'clock?
Now they don't overlap.</p>
<p>How can we reliably compare dates, if there's always a smaller unit of time we might not know about?
There's two solutions.</p>
<p><div class="ad-container">
    <script async type="text/javascript" src="//cdn.carbonads.com/carbon.js?serve=CK7ICK3W&placement=stitcherio" id="_carbonads_js"></script>
</div>
</p>
<h2 id="excluding-boundaries"><a href="#excluding-boundaries" class="heading-anchor">#</a> Excluding boundaries</h2>
<p>Here a little mathematics refresher, ranges can be written like so:</p>
<pre><code class="language-txt">[start, end]</code></pre>
<p>Obviously, this notation can be applied to date periods:</p>
<pre><code class="language-txt">[2019-01-01, 2019-01-31]</code></pre>
<p>The square brackets indicate that the boundary is included in the range,
round brackets mean a boundary is excluded:</p>
<pre><code class="language-txt">(0, 3)</code></pre>
<p>This notation tells us this range contains all numbers between 0 and 3, namely <code>1</code> and <code>2</code>.</p>
<p>Using exclusive boundaries, we can compare dates with 100% certainty of correctness.</p>
<p>Instead of testing whether <span class="no-break"><code>[2019-01-01, 2019-01-31]</code></span> contains the date <span class="no-break"><code>2019-01-31</code></span>,
why don't we test whether <span class="no-break"><code>[2019-01-01, 2019-02-01)</code></span> contains it?</p>
<p>An excluded end boundary allows us to say that "all dates before <span class="no-break">2019-02-01</span>" are contained within this range.
The times of our date and period don't matter anymore,
we're always sure that a date before <span class="no-break">2019-02-01</span> will fall within our range.</p>
<h2 id="ensuring-the-same-precision"><a href="#ensuring-the-same-precision" class="heading-anchor">#</a> Ensuring the same precision</h2>
<p>While the above solution mathematically works, it gets awkward in a real world context.
Say we want to note "the whole month of January, 2019" as a range.
It looks like this:</p>
<pre><code class="language-txt">[2019-01-01, 2019-02-01)</code></pre>
<p>This is a little counter intuitive, at least it's not the way we humans think about "January".
We'd never say "from January 1, until February 1, with February 1 excluded".</p>
<p>As it goes in programming, we often sacrifice the "common way of human thinking"
to ensure correctness.</p>
<p>But there <em>is</em> a way to ensure program correctness, <em>with</em> the notation that makes sense to humans:</p>
<pre><code class="language-txt">[2019-01-01, 2019-01-31]</code></pre>
<p>Our problem originated because we weren't sure about the time of the dates we're working with.
My suggestion is to not work around the problem by excluding boundaries,
but to eliminate it for good.</p>
<p>Let's fix the root of the problem instead of working our way around it.
Shouldn't that always be the mindset of every programmer?</p>
<p>Let me say that again, because it's oh so important:</p>
<blockquote>
<p>Let's fix the root of the problem instead of working our way around it.</p>
</blockquote>
<p>The solution? When you're comparing days, make sure you're only comparing days; not hours, minutes or seconds.</p>
<p>When programming, this means you'll have to store the precision of a date range within that range.
It also means you'll have to disallow comparing dates who have different precisions.</p>
<p>What's your opinion?
Let me know via <a target="_blank" href="https://twitter.com/brendt_gd">Twitter</a> or <a href="mailto:brendt@stitcher.io">e-mail</a>.</p>
 ]]></summary>

                <updated>2018-12-21T00:00:00+00:00</updated>
            </entry>
                                <entry>
                <title><![CDATA[ Have you thought about casing? ]]></title>

                <link rel="alternate" href="https://stitcher.io/blog/have-you-thought-about-casing"/>

                <id>https://www.stitcher.io/blog/have-you-thought-about-casing</id>

                <author>
                    <name><![CDATA[ Brent Roose ]]></name>
                </author>

                <summary type="html"><![CDATA[ <p id="uncamel-button"></p>
<p>I've made the argument <a href="/blog/where-a-curly-bracket-belongs">many</a> <a href="/blog/visual-perception-of-code">times</a> <a href="/blog/a-programmers-cognitive-load">before</a>:
programmers shouldn't underestimate the value of code readability.
Today I'll argue once more against a common practice we all seem to take for granted: casing.</p>
<p>It seems like such a minor detail, right?
Using camels or snakes or kebabs to string words together, who cares?
There's more to this question though.</p>
<p>Code readability shouldn't be neglected.
It impacts how easy you can navigate and <em>understand</em> your code.
We should talk about the casing conventions we use.</p>
<h2 id="a-little-history"><a href="#a-little-history" class="heading-anchor">#</a> A little history</h2>
<p>Early programming languages didn't have the same conventions we have today.
Languages like Lisp and COBOL originated before widespread ASCII support,
explaining the difference.
Upper- and lower case, and special characters like underscores
simply weren't supported by compilers back in the 50s and early 60s.</p>
<p>Both Lisp and COBOL allowed for hyphens to split words.
Lisp's parser was smart enough to detect whether a hyphen was between two words,
or whether it should be used as the subtraction operator.
COBOL only has full words as operators, eliminating the problem alltogether.
Here's a subtraction in COBOL:</p>
<pre><code class="language-txt">SUBTRACT data-item-1 FROM data-item-2</code></pre>
<p>Because the hyphen isn't a reserved keyword, it can be used to split words.</p>
<p>When programming languages matured in the 80s and 90s,
it became clear that the hyphen should be reserved for mathematical operations.
Another issue with Lisp's smart approach was that it didn't scale in modern languages,
it slowed down tokenisation significantly.</p>
<p>Spaces obviously could never be used,
as almost every programming language uses them as the boundary between tokens.
So what's left? How could we write multiple words as one, while keeping these words readable?</p>
<h2 id="conventions-today"><a href="#conventions-today" class="heading-anchor">#</a> Conventions today</h2>
<p>This is why we're left with two major conventions today: camel case, either lower- or upper; and snake case.
As a sidenote: upper camel case is also called pascal case.</p>
<p>Most of the time, a language tends to favourite one of the two casings.
We <em>could</em> say it's a matter of community guidelines, and be done with it.</p>
<p>It's my opinion that there's more to it.
There is one better, more readable way of writing words.
You can probably guess which one, based on the start of this blog post.
camel case makes text more difficult to read, compared to snake case.</p>
<p>Given the word <code>user id</code>, compare the two ways of writing it:</p>
<pre><code class="language-txt">userId
user_id</code></pre>
<p>It's true: camel case is more compact: you don't have to write as much.
But which style is the closest to how the human brain actually reads a text?</p>
<p>This is the only argument that matters to me in this discussion:</p>
<blockquote>
<p>How can we make it as easy as possible for our brain to read and understand code?</p>
</blockquote>
<p>Readable code, reduces cognitive load.
Less cognitive load means more memory space for humans to think about other things,
things like writing business logic.</p>
<p>"All of that just by using underscores?"
No, not just because of underscores.
There's much more to writing readable code than naming conventions.
But all small things help in getting a bigger solution.</p>
<div id="camelcase-end"></div>
<script>
    /**/
    const blog = document.querySelector('.blog');
    const startDiv = blog.querySelector('#uncamel-button');
    const endDiv = blog.querySelector('#camelcase-end');
    const normalParagraphs = blog.querySelectorAll('.blog > p');
    const otherElements = blog.querySelectorAll('.blog > *:not(p):not(script):not(h1):not(aside)');
    const camelParagraphs = [];

    for (let normalParagraph of normalParagraphs) {
        const camelParagraph = document.createElement('p');

        camelParagraph.innerHTML = camelize(normalParagraph.textContent);
        camelParagraph.style.cssText = 'display: block; word-break: break-all;';
        normalParagraph.style.cssText = 'display: none;';

        endDiv.append(camelParagraph);

        camelParagraphs.push(camelParagraph);
    }
    
    for (let otherElement of otherElements) {
        if (otherElement.getAttribute('id') === 'camelcase-end') {
            continue;
        }
        
        otherElement.style.cssText = 'display:none;';
    }

    startDiv.append(createButton());
    startDiv.style.cssText = 'margin-bottom: 1em;font-size:1em; text-align:center;'

    function createButton() {
        const uncamelButton = document.createElement('button');

        uncamelButton.classList.add('cta');
        uncamelButton.classList.add('cta-light');

        uncamelButton.innerHTML = 'Uncammelise';

        uncamelButton.addEventListener('click', function (e) {
            e.preventDefault();
            e.stopPropagation();

            for (let normalParagraph of normalParagraphs) {
                normalParagraph.style.cssText = 'display: block;';
            }

            for (let camelParagraph of camelParagraphs) {
                camelParagraph.style.cssText = 'display: none;';
            }
    
            for (let otherElement of otherElements) {
                otherElement.style.cssText = 'display:block;';
            }

            uncamelButton.style.cssText = 'display: none;';
        });

        return uncamelButton;
    }

    function camelize(str) {
        return str.replace(/(?:^\w|[A-Z]|\b\w|\s+)/g, function (match, index) {
            if (+match === 0) {
                return "";
            }

            return match.toUpperCase();
        });
    }
    /**/
</script>
 ]]></summary>

                <updated>2018-12-20T00:00:00+00:00</updated>
            </entry>
                                <entry>
                <title><![CDATA[ Share a blog: betterwebtype ]]></title>

                <link rel="alternate" href="https://stitcher.io/blog/share-a-blog-betterwebtype-com"/>

                <id>https://www.stitcher.io/blog/share-a-blog-betterwebtype-com</id>

                <author>
                    <name><![CDATA[ Brent Roose ]]></name>
                </author>

                <summary type="html"><![CDATA[ <p>My colleague <a target="_blank" href="https://mobile.twitter.com/willemvbockstal">Willem</a> always amazes me: the backend developer;
with his insights into design.
It's he who recommended following a blog — it's more like a newsletter — about web typography.</p>
<p>This course broadened the way I think about fonts, and it's the primary reason my own blog, this blog; looks the way it does.
Whether you're a frontend or backend dev, everyone should have basic knowledge about typography,
and I'd recommend following the course over at <a target="_blank" href="https://betterwebtype.com">betterwebtype.com</a> to do so.</p>
 ]]></summary>

                <updated>2018-12-15T00:00:00+00:00</updated>
            </entry>
                                <entry>
                <title><![CDATA[ New in PHP 7.3 ]]></title>

                <link rel="alternate" href="https://stitcher.io/blog/new-in-php-73"/>

                <id>https://www.stitcher.io/blog/new-in-php-73</id>

                <author>
                    <name><![CDATA[ Brent Roose ]]></name>
                </author>

                <summary type="html"><![CDATA[ <h1 id="new-in-php-7.3"><a href="#new-in-php-7.3" class="heading-anchor">#</a> New in PHP 7.3</h1>
<ul>
<li>Released on December 6, 2018</li>
<li>
<a href="#trailing-commas-in-function-calls-rfc">Trailing commas</a> are now allowed in function calls</li>
<li>The <a href="#is_countable-rfc"><code>is_countable</code></a> function</li>
<li>Improvements to the <a href="#flexible-heredoc-syntax-rfc">Heredoc syntax</a> makes it more flexible to use</li>
<li>
<a href="#array_key_first-and-array_key_last-rfc"><code>array_key_first</code> and <code>array_key_last</code></a> are two new array helper functions</li>
</ul>
<p><div class="ad-container">
    <script async type="text/javascript" src="//cdn.carbonads.com/carbon.js?serve=CK7ICK3W&placement=stitcherio" id="_carbonads_js"></script>
</div>
</p>
<h2 id="is_countable-rfc"><a href="#is_countable-rfc" class="heading-anchor">#</a> <code>is_countable</code> <small><a target="_blank" href="https://wiki.php.net/rfc/is-countable">rfc</a></small></h2>
<p>PHP 7.2 added a warning when counting uncountable objects.
The <code>is_countable</code> function can help prevent this warning.</p>
<pre><code class="language-php hljs php" data-lang="php">$count = is_countable($variable) ? count($variable) : <span class="hljs-keyword">null</span>;</code></pre>
<h2 id="array_key_first-and-array_key_last-rfc"><a href="#array_key_first-and-array_key_last-rfc" class="heading-anchor">#</a> <code>array_key_first</code> and <code>array_key_last</code> <small><a target="_blank" href="https://wiki.php.net/rfc/array_key_first_last">rfc</a></small></h2>
<p>These two functions basically do what the name says.</p>
<pre><code class="language-php hljs php" data-lang="php">$array = [
    <span class="hljs-string">'a'</span> =&gt; <span class="hljs-string">'…'</span>,
    <span class="hljs-string">'b'</span> =&gt; <span class="hljs-string">'…'</span>,
    <span class="hljs-string">'c'</span> =&gt; <span class="hljs-string">'…'</span>,
];

array_key_first($array); <span class="hljs-comment">// 'a'</span>
array_key_last($array); <span class="hljs-comment">// 'c'</span></code></pre>
<p>The original RFC also proposed <code>array_value_first</code> and <code>array_value_last</code>,
but these were voted against by the majority of people.</p>
<p>Another idea for <code>array_first</code> and <code>array_last</code> was proposed which would return a tuple <code>[$key => $value]</code>,
but opinions were mixed.
For now we only have two functions to get the first and last key of an array.</p>
<h2 id="flexible-heredoc-syntax-rfc"><a href="#flexible-heredoc-syntax-rfc" class="heading-anchor">#</a> Flexible Heredoc syntax <small><a target="_blank" href="https://wiki.php.net/rfc/flexible_heredoc_nowdoc_syntaxes">rfc</a></small></h2>
<p>Heredoc can be a useful tool for larger strings, though they had an indentation quirk in the past.</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-comment">// Instead of this:</span>

$query = <span class="hljs-string">&lt;&lt;&lt;SQL
SELECT * 
FROM `table`
WHERE `column` = true;
SQL;</span>

<span class="hljs-comment">// You can do this:</span>

$query = <span class="hljs-string">&lt;&lt;&lt;SQL
    SELECT * 
    FROM `table`
    WHERE `column` = true;
    SQL;</code></pre>
<p>This is especially useful when you're using Heredoc in an already nested context.</p>
<p>The whitespaces in front of the closing marker will be ignored on all lines.</p>
<p>An important note: because of this change, some existing Heredocs might break,
when they are using the same closing marker in their body.</p>
<pre><code class="language-php hljs php" data-lang="php">$str = <span class="hljs-string">&lt;&lt;&lt;FOO
abcdefg</span>
    FOO
FOO;

<span class="hljs-comment">// Parse error: Invalid body indentation level in PHP 7.3</span></code></pre>
<h2 id="trailing-commas-in-function-calls-rfc"><a href="#trailing-commas-in-function-calls-rfc" class="heading-anchor">#</a> Trailing commas in function calls <small><a target="_blank" href="https://wiki.php.net/rfc/trailing-comma-function-calls">rfc</a></small></h2>
<p>What was already possible with arrays, can now also be done with function calls.
Note that it's not possible in function definitions!</p>
<pre><code class="language-php hljs php" data-lang="php">$compacted = compact(
    <span class="hljs-string">'posts'</span>,
    <span class="hljs-string">'units'</span>,
);</code></pre>
<h2 id="better-type-error-reporting"><a href="#better-type-error-reporting" class="heading-anchor">#</a> Better type error reporting</h2>
<p><code>TypeErrors</code> for integers and booleans used to print out their full name,
it has been changed to <code>int</code> and <code>bool</code>, to match the type hints in the code.</p>
<pre><code class="language-txt">Argument 1 passed to foo() must be of the type int/bool</code></pre>
<p>In comparison to PHP 7.2:</p>
<pre><code class="language-txt">Argument 1 passed to foo() must be of the type 
integer/boolean</code></pre>
<h2 id="json-errors-can-be-thrown-rfc"><a href="#json-errors-can-be-thrown-rfc" class="heading-anchor">#</a> JSON errors can be thrown <small><a target="_blank" href="https://wiki.php.net/rfc/json_throw_on_error">rfc</a></small></h2>
<p>Previously, JSON parse errors were a hassle to debug.
The JSON functions now accept an extra option to make them throw an exception on parsing errors.
This change obviously adds a new exception: <code>JsonException</code>.</p>
<pre><code class="language-php hljs php" data-lang="php">json_encode($data, JSON_THROW_ON_ERROR);

json_decode(<span class="hljs-string">"invalid json"</span>, <span class="hljs-keyword">null</span>, <span class="hljs-number">512</span>, JSON_THROW_ON_ERROR);

<span class="hljs-comment">// Throws JsonException</span></code></pre>
<p>While this feature is only available with the newly added option,
there's a chance it'll be the default behaviour in a future version.</p>
<h2 id="list-reference-assignment-rfc"><a href="#list-reference-assignment-rfc" class="heading-anchor">#</a> <code>list</code> reference assignment <small><a target="_blank" href="https://wiki.php.net/rfc/list_reference_assignment">rfc</a></small></h2>
<p>The <code>list()</code> and its shorthand <code>[]</code> syntax now support references.</p>
<pre><code class="language-php hljs php" data-lang="php">$array = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>];

<span class="hljs-keyword">list</span>($a, &amp;$b) = $array;

$b = <span class="hljs-number">3</span>;

<span class="hljs-comment">// $array = [1, 3];</span></code></pre>
<h2 id="undefined-variables-in-compact-rfc"><a href="#undefined-variables-in-compact-rfc" class="heading-anchor">#</a> Undefined variables in <code>compact</code> <small><a target="_blank" href="https://wiki.php.net/rfc/compact">rfc</a></small></h2>
<p>Undefined variables passed to <code>compact</code> will be reported with a notice, they were previously ignored.</p>
<pre><code class="language-php hljs php" data-lang="php">$a = <span class="hljs-string">'foo'</span>;

compact(<span class="hljs-string">'a'</span>, <span class="hljs-string">'b'</span>); 

<span class="hljs-comment">// Notice: compact(): Undefined variable: b</span></code></pre>
<h2 id="case-insensitive-constants-rfc"><a href="#case-insensitive-constants-rfc" class="heading-anchor">#</a> Case-insensitive constants <small><a target="_blank" href="https://wiki.php.net/rfc/case_insensitive_constant_deprecation">rfc</a></small></h2>
<p>There were a few edge cases were case-insensitive constants were allowed.
These have been deprecated.</p>
<h2 id="same-site-cookie-rfc"><a href="#same-site-cookie-rfc" class="heading-anchor">#</a> Same site cookie <small><a target="_blank" href="https://wiki.php.net/rfc/same-site-cookie">rfc</a></small></h2>
<p>This change not only adds a new parameter,
it also changes the way the <code>setcookie</code>, <code>setrawcookie</code> and <code>session_set_cookie_params</code> functions work in a non-breaking manner.</p>
<p>Instead of one more parameters added to already huge functions, they now support an array of options, whilst still being backwards compatible.
An example:</p>
<pre><code class="language-autoit hljs autoit" data-lang="autoit">bool setcookie(
    <span class="hljs-built_in">string</span> $name 
    [, <span class="hljs-built_in">string</span> $value = <span class="hljs-string">""</span> 
    [, <span class="hljs-built_in">int</span> $expire = <span class="hljs-number">0</span> 
    [, <span class="hljs-built_in">string</span> $path = <span class="hljs-string">""</span> 
    [, <span class="hljs-built_in">string</span> $domain = <span class="hljs-string">""</span> 
    [, bool $secure = <span class="hljs-literal">false</span> 
    [, bool $httponly = <span class="hljs-literal">false</span> ]]]]]] 
)

bool setcookie ( 
    <span class="hljs-built_in">string</span> $name 
    [, <span class="hljs-built_in">string</span> $value = <span class="hljs-string">""</span> 
    [, <span class="hljs-built_in">int</span> $expire = <span class="hljs-number">0</span> 
    [, array $options ]]] 
)

// Both ways work.</code></pre>
<h2 id="pcre2-migration-rfc"><a href="#pcre2-migration-rfc" class="heading-anchor">#</a> PCRE2 migration <small><a target="_blank" href="https://wiki.php.net/rfc/pcre2-migration">rfc</a></small></h2>
<p>PCRE — short for "Perl Compatible Regular Expressions" — has been updated to v2.</p>
<p>The migration had a focus on maximum backwards compatibility, though there are a few breaking changes.
Be sure to read the <a target="_blank" href="https://wiki.php.net/rfc/pcre2-migration">RFC</a> to know about them.</p>
<h2 id="string-search-functions-readme"><a href="#string-search-functions-readme" class="heading-anchor">#</a> String search functions <small><a target="_blank" href="https://github.com/php/php-src/blob/43329e85e682bed4919bb37c15acb8fb3e63175f/UPGRADING#L327-L339">README</a></small></h2>
<p>You can no longer pass a non-string needle to string search functions.
These are the affected functions:</p>
<pre><code class="language-php hljs php" data-lang="php">strpos()
strrpos()
stripos()
strripos()
strstr()
strchr()
strrchr()
stristr()</code></pre>
<h2 id="mbstring-updates-readme"><a href="#mbstring-updates-readme" class="heading-anchor">#</a> MBString updates <small><a target="_blank" href="https://github.com/php/php-src/blob/php-7.3.0RC6/UPGRADING#L186-L232">README</a></small></h2>
<p><code>MBString</code> is PHP's way of <a target="_blank" href="http://php.net/manual/en/intro.mbstring.php">handling complex strings</a>.
This module has received some updates in this version of PHP.
You can read about it <a target="_blank" href="https://github.com/php/php-src/blob/php-7.3.0RC6/UPGRADING#L186-L232">here</a>.</p>
<h2 id="several-deprecations-rfc"><a href="#several-deprecations-rfc" class="heading-anchor">#</a> Several deprecations <small><a target="_blank" href="https://wiki.php.net/rfc/deprecations_php_7_3">rfc</a></small></h2>
<p>Several small things have been deprecated, there's a possibility errors can show up in your code because of this.</p>
<ul>
<li>Undocumented <code>mbstring</code> function aliases</li>
<li>String search functions with integer needle</li>
<li>
<code>fgetss()</code> function and <code>string.strip_tags</code> filter</li>
<li>Defining a free-standing <code>assert()</code> function</li>
<li>
<code>FILTER_FLAG_SCHEME_REQUIRED</code> and <code>FILTER_FLAG_HOST_REQUIRED</code> flags</li>
<li>
<code>pdo_odbc.db2_instance_name</code> php.ini directive</li>
</ul>
<p>Please refer to the <a target="_blank" href="https://wiki.php.net/rfc/deprecations_php_7_3">RFC</a> for a full explanation of each deprecation.</p>
 ]]></summary>

                <updated>2018-12-06T00:00:00+00:00</updated>
            </entry>
                                <entry>
                <title><![CDATA[ Share a blog: codingwriter.com ]]></title>

                <link rel="alternate" href="https://stitcher.io/blog/share-a-blog-codingwriter-com"/>

                <id>https://www.stitcher.io/blog/share-a-blog-codingwriter-com</id>

                <author>
                    <name><![CDATA[ Brent Roose ]]></name>
                </author>

                <summary type="html"><![CDATA[ <p>When asking on Twitter for writing advice, I was suggested to check out <a target="_blank" href="https://twitter.com/codingwriter">Sarah Mischinger's</a> blog:
<a target="_blank" href="https://codingwriter.com/">codingwriter.com</a>.
This is a great blog to follow for the technical bloggers out there, myself included.</p>
<p>To me, blogging is more than just shouting my opinion in some corner of the web;
I hope people may learn, the same way I do, by reading other people's blogs.
Writing good content is essential, and I was happy to discover a blog focused on this exact topic.</p>
 ]]></summary>

                <updated>2018-11-14T00:00:00+00:00</updated>
            </entry>
                                <entry>
                <title><![CDATA[ Structuring unstructured data ]]></title>

                <link rel="alternate" href="https://stitcher.io/blog/structuring-unstructured-data"/>

                <id>https://www.stitcher.io/blog/structuring-unstructured-data</id>

                <author>
                    <name><![CDATA[ Brent Roose ]]></name>
                </author>

                <summary type="html"><![CDATA[ <h2 id="have-you-ever…"><a href="#have-you-ever…" class="heading-anchor">#</a> Have you ever…</h2>
<p>…worked with an array in PHP that was actually more than just an array?
Did you use the array keys as fields?
And did you feel the pain of not knowing exactly what was in that array?
Not being sure whether the data in it is actually what you expect it to be,
or what fields are available?</p>
<p><div class="ad-container">
    <script async type="text/javascript" src="//cdn.carbonads.com/carbon.js?serve=CK7ICK3W&placement=stitcherio" id="_carbonads_js"></script>
</div>
</p>
<p>Let's visualise what I'm talking about:</p>
<pre><code class="language-php hljs php" data-lang="php">$line = <span class="hljs-comment">// Get a line from a CSV file</span>

import($line[<span class="hljs-string">'id'</span>], $line[<span class="hljs-string">'name'</span>], $line[<span class="hljs-string">'amount'</span>]);</code></pre>
<p>Another example: what about validated request data?</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">store</span><span class="hljs-params">(PostRequest $request, Post $post)</span> 
</span>{
    $data = $request-&gt;validated();
    
    $post-&gt;title = $data[<span class="hljs-string">'title'</span>];
    $post-&gt;author_id = $data[<span class="hljs-string">'author_id'</span>];
    
    <span class="hljs-comment">// …</span>
}</code></pre>
<p>Arrays in PHP are a powerful and versatile data structure.
At some point though, one should wonder whether there are better solutions for their problems.</p>
<h2 id="know-what-you're-writing"><a href="#know-what-you're-writing" class="heading-anchor">#</a> Know what you're writing</h2>
<p>Regular readers of this blog may know that I've written about type theory in <a href="/blog/liskov-and-type-safety">the past</a>.
I won't revisit the pros and cons on strong type systems;
but I do want to say that array are a terrible choice
if they are meant to be used as anything else but lists.</p>
<p>Here's a simple question for you: what's in this array?</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">doSomething</span><span class="hljs-params">(array $blogPost)</span>
</span>{
    $blogPost[<span class="hljs-comment">/* Now what?? */</span>];
}</code></pre>
<p>In this case, there are several ways of knowing what data we're dealing with:</p>
<ul>
<li>Read the source code.</li>
<li>Read the documentation.</li>
<li>Dump <code>$blogPost</code> to inspect it.</li>
<li>Or use a debugger to inspect it.</li>
</ul>
<p>I simply wanted to use this data,
but next I know I'm deep into debugging what kind of data I'm actually dealing with.
Are these really the things a programmer should be focused on?</p>
<p>Eliminating this uncertainty can reduce your cognitive load significantly.
This means you can focus on things that really matter:
stuff like application- and business logic.
You know, that's what most clients pay you to do.</p>
<p>It turns out that strongly typed systems can be a great help in understanding what exactly we're dealing with.
Languages like Rust, for example, solve this problem cleanly:</p>
<pre><code class="language-c hljs arduino" data-lang="c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">BlogPost</span> {</span>
    title: <span class="hljs-keyword">String</span>,
    body: <span class="hljs-keyword">String</span>,
    active: <span class="hljs-keyword">bool</span>,
}</code></pre>
<p>A struct is what we need!
Unfortunately PHP doesn't have structs.
It has arrays and objects, and that's it.</p>
<p>However, we <em>can</em> do something like this:</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BlogPost</span>
</span>{
    <span class="hljs-keyword">public</span> string $title;
    <span class="hljs-keyword">public</span> string $body;
    <span class="hljs-keyword">public</span> bool $active;
}</code></pre>
<p>Hang on, I know; we can't really do this, not <em>yet</em>.
PHP 7.4 <a target="_blank" href="https://wiki.php.net/rfc/typed_properties_v2">will add typed properties</a>,
but they are still a long way away.</p>
<p>Imagine for a minute though that typed properties are already supported;
we could use the previous example like so, which our IDE could auto complete:</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">doSomething</span><span class="hljs-params">(BlogPost $blogPost)</span>
</span>{
    $blogPost-&gt;title;
    $blogPost-&gt;body;
    $blogPost-&gt;active;
}</code></pre>
<p>We could even support relations:</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BlogPost</span>
</span>{
    <span class="hljs-keyword">public</span> Author $author;
    
    <span class="hljs-comment">// …</span>
}</code></pre>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">doSomething</span><span class="hljs-params">(BlogPost $blogPost)</span>
</span>{
    $blogPost-&gt;author-&gt;name;
}</code></pre>
<p>Our IDE would always be able to tell us what data we're dealing with.
But of course, typed properties don't exist in PHP yet.
What does exist… are docblocks.</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BlogPost</span>
</span>{
    <span class="hljs-comment">/** <span class="hljs-doctag">@var</span> string */</span>
    <span class="hljs-keyword">public</span> $title;
    
    <span class="hljs-comment">/** <span class="hljs-doctag">@var</span> string */</span>
    <span class="hljs-keyword">public</span> $body;
    
    <span class="hljs-comment">/** <span class="hljs-doctag">@var</span> bool */</span>
    <span class="hljs-keyword">public</span> $active;
    
    <span class="hljs-comment">/** <span class="hljs-doctag">@var</span> \Author */</span>
    <span class="hljs-keyword">public</span> $author;
}</code></pre>
<p>Docblocks are kind of a mess though: they are quite verbose and ugly;
but more important: they don't give any guarantees that the data is of the type they say it is!</p>
<p>Luckily, PHP has its reflection API. With it, a lot more is possible, even today.
The above example can actually be type validated with a little reflection magic,
as long as we don't write to the properties directly.</p>
<pre><code class="language-php hljs php" data-lang="php">$blogPost = <span class="hljs-keyword">new</span> BlogPost([
    <span class="hljs-string">'title'</span> =&gt; <span class="hljs-string">'First'</span>,
    <span class="hljs-string">'body'</span> =&gt; <span class="hljs-string">'Lorem ipsum'</span>,
    <span class="hljs-string">'active'</span> =&gt; <span class="hljs-keyword">false</span>,
    <span class="hljs-string">'author'</span> =&gt; <span class="hljs-keyword">new</span> Author()
]);</code></pre>
<p>That seems like a lot of overhead, right?
Remember the first example though!
We're not trying to construct these object manually,
we're reading them from a CSV file, a request or somewhere else:</p>
<pre><code class="language-php hljs php" data-lang="php">$blogPost = <span class="hljs-keyword">new</span> BlogPost($line);</code></pre>
<p>That's not bad, right?
And remember: a little reflection magic will ensure the values are of the correct type.
I'll show you how that works later.</p>
<p>I prefer this approach.
It enables auto completion on what would otherwise be a black box.
While it requires a little more setup: you'll have to write definitions of data;
the benefits in the long run are worth it.</p>
<p>Sidenote: when I say "in the long run", I mean that this approach is especially useful in larger projects,
where you're working in the same code base with multiple developers, over a longer timespan.</p>
<h2 id="reflecting-types"><a href="#reflecting-types" class="heading-anchor">#</a> Reflecting types</h2>
<p>So, how can we assure that our properties are of the correct type?
Simple: read the <code>@var</code> docblock declartion, validate the value against that type,
and only than set it.
If the value is of a wrong type, we simply throw a <code>TypeError</code>.</p>
<p>Doing this extra check means we cannot write to the properties directly.
At least not if they are declared public.
And in our case public properties is something we really want,
because of when we're using these objects.
We want to be able to easily read data from them;
we don't care as much on making writes easy,
because we should never write to them after the object is constructed.</p>
<p>So we need a "hook" to validate a value against its type, before setting it.
There are two ways to do this in PHP.
Actually there are more, but these two are relevant.</p>
<h3 id="with-a-magic-setter"><a href="#with-a-magic-setter" class="heading-anchor">#</a> With a magic setter</h3>
<p>A magic setter in combination with private or protected properties
would allow us to run type validation before setting the value.</p>
<p>However, as mentioned before, we want a clean and public API to read from;
so magic setters are, unfortunately, a no go.</p>
<h3 id="via-the-constructor"><a href="#via-the-constructor" class="heading-anchor">#</a> Via the constructor</h3>
<p>Like in the previous example, we pass an array of data to the constructor,
and the constructor will map that data unto the properties of its class.
This is the way to go.</p>
<p>Here's a simplified way of doing this:</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span><span class="hljs-params">(array $parameters)</span>
</span>{
    $publicProperties = <span class="hljs-keyword">$this</span>-&gt;getPublicProperties();
   
    <span class="hljs-keyword">foreach</span> ($publicProperties <span class="hljs-keyword">as</span> $property) {
        $value = $parameters[$property-&gt;getName()];
        
        <span class="hljs-keyword">if</span> (! <span class="hljs-keyword">$this</span>-&gt;isValidType($property, $value) {
            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> TypeError(<span class="hljs-string">"…"</span>);
        }
        
        <span class="hljs-keyword">$this</span>-&gt;{$property-&gt;getName()} = $value;
    }
}</code></pre>
<p>Maybe you're curious as to what <code>isValidType</code> exactly does?
Here is, again a simplified, implementation:</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-keyword">protected</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">isValidType</span><span class="hljs-params">(ReflectionProperty $property, $value)</span>: <span class="hljs-title">bool</span>
</span>{
    $type = <span class="hljs-keyword">$this</span>-&gt;getTypeDeclaration($property);
    
    <span class="hljs-keyword">return</span> $value <span class="hljs-keyword">instanceof</span> $type
        || gettype($value) === $type;
    }
}</code></pre>
<p>Of course, there are some things missing here:</p>
<ul>
<li>Union types: <code>@var string|int</code>
</li>
<li>
<code>@var mixed</code> support</li>
<li>Generic collections: <code>@var \Foo[]</code>
</li>
<li>Nullable support: <code>@var int|null</code>
</li>
</ul>
<p>But it is very easy to add these checks to our <code>isValidType</code> method.
And that's exactly what we did by the way, we made this into a package: <a target="_blank" href="https://github.com/spatie/data-transfer-object">spatie/data-transfer-object</a>.</p>
<h2 id="what-about-immutability?"><a href="#what-about-immutability?" class="heading-anchor">#</a> What about immutability?</h2>
<p>How to handle immutability is the last question to answer.
If we use these objects to represent data from the outside,
are there any valid use cases for changing these objects once they are constructed?</p>
<p>In 98% of the cases, the answer should be plain and simple: no.
We'll never be able to change the data source,
hence we shouldn't be able to change the object representing that source.</p>
<p>Real life projects are often not as black and white as I portray it here.
While there might be some use cases, I think the mindset of "construct once, and never change"
is a good one.</p>
<p>So how to enforce this in PHP?</p>
<p>Unfortunately: we don't.
There has been talk of so called "read only" properties in PHP's core,
but it's a difficult thing to get right.
Than what about our userland type system?
Unless we're giving up the ease of reading, the auto completion part;
there will be no way to achieve this goal in PHP.</p>
<p>See, we <em>need</em> magic getters to support this behaviour;
at the same time we <em>don't</em> want them.
They would negate one of the goals we're trying to achieve: easy discoverability.</p>
<p>So for now, unfortunately,
our package will allow writes to an object's properties after it is constructed.
We are just careful not to do it.</p>
<p>I hope this post inspired you to think about your own code bases,
and that you might be prompted to try this pattern out in your projects;
with <a target="_blank" href="https://github.com/spatie/data-transfer-object">our package</a> or your own implementation.</p>
<p>If there are any thoughts coming to your mind,
if you want to discuss this further; I'd love to here from you!
You can reach me via <a target="_blank" href="https://twitter.com/brendt_gd">Twitter</a> or <a href="mailto:brendt@stitcher.io">e-mail</a>.</p>
 ]]></summary>

                <updated>2018-11-11T00:00:00+00:00</updated>
            </entry>
                                <entry>
                <title><![CDATA[ PhpStorm OSX performance: October 2018 ]]></title>

                <link rel="alternate" href="https://stitcher.io/blog/phpstorm-performance-october-2018"/>

                <id>https://www.stitcher.io/blog/phpstorm-performance-october-2018</id>

                <author>
                    <name><![CDATA[ Brent Roose ]]></name>
                </author>

                <summary type="html"><![CDATA[ <p>PhpStorm has had performance issues on OSX for a very long time now,
sometimes to the point of being unusable.</p>
<p>I've written about these issues before, but it's good to keep a regularly updated list of what's going on.
So without further ado: if you're on OSX (Sierra, High Sierra or Mojave);
if you're experiencing PhpStorm performance issues, this post might help you.</p>
<p><div class="ad-container">
    <script async type="text/javascript" src="//cdn.carbonads.com/carbon.js?serve=CK7ICK3W&placement=stitcherio" id="_carbonads_js"></script>
</div>
</p>
<h2 id="external-monitor-resolution"><a href="#external-monitor-resolution" class="heading-anchor">#</a> External monitor resolution</h2>
<p>Do you have an external monitor plugged into your MacBook?
There's an issue in Java Swing, the UI framework that PhpStorm uses under the hood.
In short: if you're using a non-default resolution,
Java has to do a lot of calculations to deal with half pixels and such.</p>
<p>In case of 4k monitors, we've seen good results with 1080p and 4k resolutions,
as they are natively supported.
All other resolutions can cause massive performance issues.</p>
<div class="image-noborder"></div>
<p><img src="/resources/img/blog/phpstorm-performance-october/resolution-default.png" srcset="/resources/img/blog/phpstorm-performance-october/resolution-default-894x606.png 894w, /resources/img/blog/phpstorm-performance-october/resolution-default-447x303.png 447w, /resources/img/blog/phpstorm-performance-october/resolution-default-632x428.png 632w, /resources/img/blog/phpstorm-performance-october/resolution-default-774x524.png 774w, /resources/img/blog/phpstorm-performance-october/resolution-default-999x677.png 999w" sizes="" alt=""></img></p>
<p>Default resolutions work fine.</p>
<div class="image-noborder"></div>
<p><img src="/resources/img/blog/phpstorm-performance-october/resolution-scaled.png" srcset="/resources/img/blog/phpstorm-performance-october/resolution-scaled-447x303.png 447w, /resources/img/blog/phpstorm-performance-october/resolution-scaled-894x606.png 894w, /resources/img/blog/phpstorm-performance-october/resolution-scaled-632x428.png 632w, /resources/img/blog/phpstorm-performance-october/resolution-scaled-999x677.png 999w, /resources/img/blog/phpstorm-performance-october/resolution-scaled-774x524.png 774w" sizes="" alt=""></img></p>
<p>Scaled resolutions not so much…</p>
<h2 id="font-antialiasing"><a href="#font-antialiasing" class="heading-anchor">#</a> Font antialiasing</h2>
<p>In your settings, under <code>Editor > Appearance & Bahaviour > Appearance</code>,
you'll find the editor font antialiasing options.</p>
<p>By default, antialiasing is set to <code>subpixel</code>, to render very smooth fonts.
Again, because of Java graphical issues, there can be a big performance hit.</p>
<p><img src="/resources/img/blog/phpstorm-performance-october/font-settings.png" srcset="/resources/img/blog/phpstorm-performance-october/font-settings-1134x284.png 1134w, /resources/img/blog/phpstorm-performance-october/font-settings-507x126.png 507w, /resources/img/blog/phpstorm-performance-october/font-settings-717x179.png 717w, /resources/img/blog/phpstorm-performance-october/font-settings-1014x253.png 1014w, /resources/img/blog/phpstorm-performance-october/font-settings-878x219.png 878w" sizes="" alt=""></img></p>
<p>It's better to set the antialiasing setting to <code>greyscale</code>, or disable it altogether.</p>
<p>Your font choice might also impact performance.
I know this might take some time to get used to, but try using another font.
I always used Ubuntu Mono, but switched to Monaco, and had noticeable improvements.</p>
<h2 id="javafx-enabled-plugins"><a href="#javafx-enabled-plugins" class="heading-anchor">#</a> JavaFX enabled plugins</h2>
<p>Some plugins make use of JavaFX, that may cause rendering issues.
As an easy way to know if you're running such plugins, you can do the following.</p>
<p>Get the PID of the running PhpStorm process:</p>
<pre><code class="language-bash hljs bash" data-lang="bash">&gt; top | grep phpstorm

82912  phpstorm         …</code></pre>
<p>Next, run <code>jstack</code> with PhpStorm's process ID, and grep for "quantum":</p>
<pre><code class="language-bash hljs bash" data-lang="bash">&gt; jstack 82912 | grep quantum

at com.sun.javafx.tk.quantum.QuantumRenderer<span class="hljs-variable">$PipelineRunnable</span>.run(QuantumRenderer.java:125)</code></pre>
<p>If you see any output (as above), it means that plugins are using JavaFX.
Using these plugins will increase performance issues over time, especially if you're running PhpStorm as a maximized window.</p>
<p>The only way to know which plugins are using JavaFX is by disabling plugins, one by one; restarting PhpStorm and doing the above <code>jstack</code> test again.
One very popular plugin depending on JavaFX is the Markdown plugin.</p>
<h2 id="jdk-versions"><a href="#jdk-versions" class="heading-anchor">#</a> JDK versions</h2>
<p>The last thing you can do is download a new Java JDK, another version, and use that one to run PhpStorm.</p>
<p>You can configure the JDK PhpStorm is using by opening the command palette and search for <code>Switch Boot JDK…</code>.</p>
<p><img src="/resources/img/blog/phpstorm-performance-october/jdk.png" srcset="/resources/img/blog/phpstorm-performance-october/jdk-622x194.png 622w, /resources/img/blog/phpstorm-performance-october/jdk-359x112.png 359w, /resources/img/blog/phpstorm-performance-october/jdk-804x252.png 804w, /resources/img/blog/phpstorm-performance-october/jdk-719x225.png 719w, /resources/img/blog/phpstorm-performance-october/jdk-508x159.png 508w" sizes="" alt="Boot JDK">Boot JDK</img></p>
<p>It's important to note that IntelliJ products won't run on all JDKs!
At the time of writing, Java 10 won't work yet.</p>
<p>If you've configured a JDK that broke PhpStorm, you can still fix it though.
There's a file in your preferences folder which contains the JDK you're using:</p>
<pre><code class="language-gradle hljs gradle" data-lang="gradle">~<span class="hljs-regexp">/Library/</span>Preferences<span class="hljs-regexp">/IntelliJIdea&lt;VERSION&gt;/i</span>dea.jdk</code></pre>
<p>You can change the JDK path there.
More information on switching JDKs can be found <a target="_blank" href="https://intellij-support.jetbrains.com/hc/en-us/articles/206544879-Selecting-the-JDK-version-the-IDE-will-run-under">here</a>.</p>
<h2 id="in-closing:"><a href="#in-closing:" class="heading-anchor">#</a> In closing:</h2>
<p>Software development is hard.</p>
<p>It's understandable why JetBrains chooses Java as a platform for their IDEs.
Unfortunately Java Swing, an older UI framework, doesn't play well with modern OSX platforms.</p>
<p>Whose fault is this? Should JetBrains fix it? Will they be able to?
There's no clear answer to those questions.
There's an active issue <a target="_blank" href="https://youtrack.jetbrains.com/issue/JRE-526">here</a>,
where you can follow the progress;
though I doubt there will be any solutions soon.</p>
<p>For now, we'll have to deal with these performance issues,
because — even though they are annoying — PhpStorm is still the best PHP IDE out there, by far.</p>
 ]]></summary>

                <updated>2018-10-26T00:00:00+00:00</updated>
            </entry>
                                <entry>
                <title><![CDATA[ Share a blog: assertchris.io ]]></title>

                <link rel="alternate" href="https://stitcher.io/blog/share-a-blog-assertchris-io"/>

                <id>https://www.stitcher.io/blog/share-a-blog-assertchris-io</id>

                <author>
                    <name><![CDATA[ Brent Roose ]]></name>
                </author>

                <summary type="html"><![CDATA[ <p><a target="_blank" href="https://twitter.com/assertchris">Christopher Pitt</a> is one of the inspirations why I got into blogging and conference talks.
Being an excellent writer — he used to blog on Sitepoint and Medium — he now decided to host his content on his own website.
A wise decision!</p>
<p>I'd highly recommend adding his blog to your RSS reader, or bookmark it somewhere: <a target="_blank" href="https://assertchris.io/">assertchris.io</a>.
There's lots of good content to look forward to!</p>
 ]]></summary>

                <updated>2018-10-25T00:00:00+00:00</updated>
            </entry>
                                <entry>
                <title><![CDATA[ array_merge or + in PHP ]]></title>

                <link rel="alternate" href="https://stitcher.io/blog/array-merge-vs+"/>

                <id>https://www.stitcher.io/blog/array-merge-vs+</id>

                <author>
                    <name><![CDATA[ Brent Roose ]]></name>
                </author>

                <summary type="html"><![CDATA[ <p>PHP has several ways of combining two arrays into one. You can use <code>array_merge</code> or the <code>+</code> operator.
There's a subtle difference between these two methods though, a difference worth knowing.</p>
<p><div class="ad-container">
    <script async type="text/javascript" src="//cdn.carbonads.com/carbon.js?serve=CK7ICK3W&placement=stitcherio" id="_carbonads_js"></script>
</div>
</p>
<p>Let's take a look at how these two methods compare:</p>
<pre><code class="language-php hljs php" data-lang="php">array_merge($first, $second);

<span class="hljs-comment">// vs.</span>

$first + $second;</code></pre>
<p>Let's say these are the two arrays we're working with:</p>
<pre><code class="language-php hljs php" data-lang="php">$first = [
    <span class="hljs-string">'a'</span>,
    <span class="hljs-string">'b'</span>,
];

$second = [
    <span class="hljs-string">'c'</span>,
];</code></pre>
<p>This would be the result of a simple <code>array_merge</code> call:</p>
<pre><code class="language-php hljs php" data-lang="php">array_merge($first, $second);

[
    <span class="hljs-string">'a'</span>,
    <span class="hljs-string">'b'</span>,
    <span class="hljs-string">'c'</span>,
]</code></pre>
<p>While the <code>+</code> operator gives us this result:</p>
<pre><code class="language-php hljs php" data-lang="php">$first + $second;

[
    <span class="hljs-string">'a'</span>,
    <span class="hljs-string">'b'</span>,
]</code></pre>
<p>Switching the operands while using the <code>+</code> operator, gives a different result:</p>
<pre><code class="language-php hljs php" data-lang="php">$second + $first;

[
    <span class="hljs-string">'c'</span>,
    <span class="hljs-string">'b'</span>,
]</code></pre>
<p>Confused? So was I.</p>
<p>Let's write out the <code>$first</code> and <code>$second</code> arrays in full, with their indices.
This will make things more clear:</p>
<pre><code class="language-php hljs php" data-lang="php">$first = [
    <span class="hljs-number">0</span> =&gt; <span class="hljs-string">'a'</span>,
    <span class="hljs-number">1</span> =&gt; <span class="hljs-string">'b'</span>,
];

$second = [
    <span class="hljs-number">0</span> =&gt; <span class="hljs-string">'c'</span>,
];</code></pre>
<p>By now you can probably guess what's going on:
the <code>+</code> operator will only <em>add</em> the elements of the rightside operand, if their key
doesn't exist in the leftside operand, while <code>array_merge</code> will <em>override</em> existing keys.</p>
<p>By that definition, we can also determine that <code>+</code> can never be used to recursively merge arrays,
as it will leave existing elements untouched:</p>
<pre><code class="language-php hljs php" data-lang="php">$first = [
    <span class="hljs-string">'A'</span> =&gt; [
        <span class="hljs-string">'B'</span> =&gt; <span class="hljs-keyword">true</span>,
        <span class="hljs-string">'C'</span> =&gt; <span class="hljs-keyword">true</span>,
    ],
];

$second = [
    <span class="hljs-string">'A'</span> =&gt; [
        <span class="hljs-string">'B'</span> =&gt; <span class="hljs-keyword">false</span>,
        <span class="hljs-string">'C'</span> =&gt; <span class="hljs-keyword">false</span>,
    ],
];

$first + $second;</code></pre>
<p>Here's the result:</p>
<pre><code class="language-php hljs php" data-lang="php">[
    <span class="hljs-string">'A'</span> =&gt; [
        <span class="hljs-string">'B'</span> =&gt; <span class="hljs-keyword">true</span>,
        <span class="hljs-string">'C'</span> =&gt; <span class="hljs-keyword">true</span>,
    ],
]</code></pre>
<p>While using <code>array_merge</code>, would give this result:</p>
<pre><code class="language-php hljs php" data-lang="php">[
    <span class="hljs-string">'A'</span> =&gt; [
        <span class="hljs-string">'B'</span> =&gt; <span class="hljs-keyword">false</span>,
        <span class="hljs-string">'C'</span> =&gt; <span class="hljs-keyword">false</span>,
    ],
]</code></pre>
<p>"Hang on", I hear you say, "isn't that what <code>array_merge_recursive</code> is supposed to do?".</p>
<p>Here we have a case of unfortunate naming.
Please don't be surprised — it's PHP after all.</p>
<p>See, <code>array_merge</code> will merge matching elements by overriding them.
<code>array_merge_recursive</code> on the other hand will keep both elements, and merge them in a new array, keeping both values.</p>
<p>This is what our previous example would look like, using <code>array_merge_recursive</code>:</p>
<pre><code class="language-php hljs php" data-lang="php">[
    <span class="hljs-string">'A'</span> =&gt; [
        <span class="hljs-string">'B'</span> =&gt; [
            <span class="hljs-keyword">true</span>,
            <span class="hljs-keyword">false</span>,
        ],
        <span class="hljs-string">'C'</span> =&gt; [
            <span class="hljs-keyword">true</span>,
            <span class="hljs-keyword">false</span>,
        ],
    ],
]</code></pre>
<p>What about merging multiple arrays?
You can probably guess the outcome by now:</p>
<pre><code class="language-php hljs php" data-lang="php">$first = [<span class="hljs-string">'a'</span>];
$second = [<span class="hljs-string">'b'</span>];
$third = [<span class="hljs-string">'c'</span>];</code></pre>
<p>Here's what <code>array_merge</code> results in:</p>
<pre><code class="language-php hljs php" data-lang="php">array_merge($first, $second, $third)</code></pre>
<pre><code class="language-php hljs php" data-lang="php">[
    <span class="hljs-string">'a'</span>,
    <span class="hljs-string">'b'</span>,
    <span class="hljs-string">'c'</span>,
]</code></pre>
<p>Chaining the <code>+</code> operator also works, with the following result:</p>
<pre><code class="language-php hljs php" data-lang="php">$first + $second + $third</code></pre>
<pre><code class="language-php hljs php" data-lang="php">[
    <span class="hljs-string">'a'</span>,
]</code></pre>
<hr />
<p>With this little refresher,
I hope that you won't find yourself confused anymore when you're deep into your code and need to merge arrays.</p>
<p>I found it to be a cognitive burden when I had to stop and think about "hang on, what is the correct way to do this?".
Luckily now, we know!</p>
 ]]></summary>

                <updated>2018-10-24T00:00:00+00:00</updated>
            </entry>
                                <entry>
                <title><![CDATA[ Laravel view models vs. view composers ]]></title>

                <link rel="alternate" href="https://stitcher.io/blog/laravel-view-models-vs-view-composers"/>

                <id>https://www.stitcher.io/blog/laravel-view-models-vs-view-composers</id>

                <author>
                    <name><![CDATA[ Brent Roose ]]></name>
                </author>

                <summary type="html"><![CDATA[ <div class="author">
    Update: I've written a new version of this post, as part of my <a href="/blog/laravel-beyond-crud">Laravel beyond CRUD</a> series. You can read it <a href="/blog/laravel-beyond-crud-08-view-models">here</a>. 
</div>
<p>Last month I wrote about view models in Laravel.
I received a lot of good reactions on the post, but also the same question over and over again:
how do view models differ from view composers in Laravel?</p>
<p>Time to clarify this question once and for all.</p>
<p><div class="ad-container">
    <script async type="text/javascript" src="//cdn.carbonads.com/carbon.js?serve=CK7ICK3W&placement=stitcherio" id="_carbonads_js"></script>
</div>
</p>
<h2 id="view-composers"><a href="#view-composers" class="heading-anchor">#</a> View composers</h2>
<p>Let's look at how view composers are used in Laravel.
View composers are a way of binding data to a view from global configuration.</p>
<p>The Laravel documentation explains it like this:</p>
<blockquote>
<p>View composers are callbacks or class methods that are called when a view is rendered.
If you have data that you want to be bound to a view each time that view is rendered,
a view composer can help you organize that logic into a single location.</p>
</blockquote>
<p>View composers are registered like this, the example is taken from the Laravel docs.</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ComposerServiceProvider</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">ServiceProvider</span>
</span>{
    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">boot</span><span class="hljs-params">()</span>
    </span>{
        View::composer(
            <span class="hljs-string">'profile'</span>, ProfileComposer::class
        );

        View::composer(<span class="hljs-string">'dashboard'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">($view)</span> </span>{
            <span class="hljs-comment">// …</span>
        });
    }
    
    <span class="hljs-comment">// …</span>
}</code></pre>
<p>As you can see you can both use a class and a closure which you can use to add variables to a view.</p>
<p>Here's how view composers are used in controllers.</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ProfileController</span>
</span>{
    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">index</span><span class="hljs-params">()</span>
    </span>{
        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> view(<span class="hljs-string">'profile'</span>);
    }
}</code></pre>
<p>Can you see them? Nope, of course not: view composers are registered somewhere in the global state,
and you don't know which variables are available to the view, without that implicit knowledge.</p>
<p>Now I <em>know</em> that this isn't a problem in small projects.
When you're the single developer and only have 20 controllers and maybe 20 view composers,
it'll all fit in your head.</p>
<p>But what about a project with three or four developers, with hundreds of controllers?
What if you're taking over a legacy project where you don't have this implicit knowledge?</p>
<p>This is why at <a target="_blank" href="https://spatie.be">Spatie</a>, we use view models in our larger projects.
They make everything much more explicit, which helps us keep the code maintainable.</p>
<p>Here's what we do:</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ProfileController</span>
</span>{
    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">index</span><span class="hljs-params">(User $user)</span>
    </span>{
        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> view(
            <span class="hljs-string">'profile'</span>, 
            <span class="hljs-keyword">new</span> ProfileViewModel($user)
        );
    }
}</code></pre>
<p>Now it's clear now from the controller itself what variables are available to the view.
We can also re-use the same view for multiple contexts.
An example would be the same form view used in the create and edit actions.</p>
<p>One last added benefit, one you might not have thought about,
is that we can pass data into the view model explicitly.
If you want to use a route argument or bound model to determine data passed to the view,
it is done explicitly.</p>
<p>In conclusion: managing global state is a pain in large applications,
especially when you're working with multiple developers on the same project.
Also remember that just because two means have the same end result,
that doesn't mean that they are the same!</p>
<p>I hope this quick writeup answers all the questions about the difference between view models and -composers.
If you want to know more about view models in particular,
be sure to read the blog post about them <a href="/blog/laravel-view-models">here</a>.</p>
 ]]></summary>

                <updated>2018-10-16T00:00:00+00:00</updated>
            </entry>
                                <entry>
                <title><![CDATA[ Organise by domain ]]></title>

                <link rel="alternate" href="https://stitcher.io/blog/organise-by-domain"/>

                <id>https://www.stitcher.io/blog/organise-by-domain</id>

                <author>
                    <name><![CDATA[ Brent Roose ]]></name>
                </author>

                <summary type="html"><![CDATA[ <p>In this post we'll look at a different approach of structuring large code bases into separate domains.
The name "domain" is derived from the popular DDD paradigm, or also: domain driven design.</p>
<div class="author">
Since I wrote this post, I actually started a whole blog series on how to organise larger Laravel projects. I'd recommend to <a href="/blog/laravel-beyond-crud">check it out</a> instead. 
</div>
<p>While many concepts in this post are inspired by DDD principles,
they don't strictly follow domain driven design.
In our context, "domain" could also be named "module".
A "domain" simply refers to a category of related stuff,
that's it.</p>
<p><div class="ad-container">
    <script async type="text/javascript" src="//cdn.carbonads.com/carbon.js?serve=CK7ICK3W&placement=stitcherio" id="_carbonads_js"></script>
</div>
</p>
<p>It's also important to note is that this approach isn't a silver bullet.
At <a target="_blank" href="https://spatie.be">Spatie</a> we choose a different project structure
based on the needs of that specific project.
It is possible that your project isn't a good fit for what we'll be reviewing today.</p>
<p>In our experience, today's principles are mostly beneficial in larger projects:</p>
<ul>
<li>Long running projects with an initial development timespan of half a year to one year or more,
with several years of maintenance and extensions after that.</li>
<li>Around fifty to hundred models representing the business.</li>
<li>Several hundred routes exposing functionality to the outside.</li>
</ul>
<h2 id="so,-what-is-a-&quot;domain&quot;-?"><a href="#so,-what-is-a-"domain"-?" class="heading-anchor">#</a> So, what is a "domain" ?</h2>
<p>If you've worked on these kinds of large projects before,
you know that "the business logic" never is just <em>one</em> thing.
Often during development, you'll identify "sub-systems" within the larger domain;
that is: the collection of problems you're trying to solve with your code.</p>
<p>To name a few examples: user management, inventory management, invoicing and contracts.
I'm sure you can think of many others.</p>
<p>Most likely, every sub-system has one or several models.
But it doesn't stop there:
models can be interacted with,
actions can be performed with them,
there can be system-specific validation rules,
ways of passing data between systems, and more.</p>
<p>Looking at a standard Laravel application, the code describing a single system
is often spread across multiple directories:</p>
<pre><code class="language-reasonml hljs reasonml" data-lang="reasonml">app/
├── Enums/
│   ├── <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ContractDurationType</span>.</span></span>php
│   └── <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ContractType</span>.</span></span>php
├── Exceptions/
│   └── <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">InvalidContractDate</span>.</span></span>php
├── Models/
│   └── <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Contract</span>.</span></span>php
└── Rules/
    ├── <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ContractAvailabilityRule</span>.</span></span>php
    └── <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ContractDurationRule</span>.</span></span>php</code></pre>
<p>This structure was the first struggle that prompted me to look for a better solution.
I often found myself searching through several places in order to work one thing, one system.</p>
<p>So why not group sub-systems together?
It looks something like this:</p>
<pre><code class="language-pgsql hljs pgsql" data-lang="pgsql"><span class="hljs-keyword">Domain</span>/
├── Contracts/
├── Invoicing/
└── Users/</code></pre>
<p>You can see the name <code>Domain</code> here.
According to Oxford Dictionary, a "domain" can be described like so:</p>
<blockquote>
<p>A specified sphere of activity or knowledge.</p>
</blockquote>
<p>We're grouping code together based on their sphere of activity, their domain.
Let's zoom into one specific domain folder:</p>
<pre><code class="language-fortran hljs fortran" data-lang="fortran">Contracts/
├── Actions/
├── Enums/
├── Exceptions/
├── Models/
├── Rules/
├── <span class="hljs-keyword">Status</span>/
└── ValueObjects/</code></pre>
<p>Modern PHP developers are most likely familiar with most of these folder names.
Though some deserve a little more attention.</p>
<h3 id="actions"><a href="#actions" class="heading-anchor">#</a> Actions</h3>
<p>Actions are probably the most powerful tool within this whole setup.
An action is a class that performs an operation within its domain.
This might be a simple task like creating or updating a model,
or something more complex following one or several business rules like approving a contract.</p>
<p>Because a single action only focuses on one task,
they are extremely flexible:
an action can be composed out of other actions and they can be injected wherever you want.</p>
<p>Here's an example of two actions working together: <code>CreateOrUpdateContractLine</code> and <code>ResolveContractLines</code>.
The first one will do as its name says: create or update a single contract line.
The second one will loop over a collection of user input, and resolve the lines one by one.</p>
<p>Here's what <code>ResolveContractLines</code> will do:</p>
<ul>
<li>Loop over the user input and create or update existing lines.</li>
<li>Keep a list of contract lines which are currently added to the contract.</li>
<li>Remove all lines that don't exist anymore, the user has removed them.</li>
</ul>
<p>Here's the code:</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ResolveContractLines</span>
</span>{
    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span><span class="hljs-params">(
        CreateOrUpdateContractLine $createOrUpdateContractLine,
        RemoveContractLine $removeContractLine
    )</span> </span>{ <span class="hljs-comment">/* … */</span> }

    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">execute</span><span class="hljs-params">(
        Contract $contract,
        ContractLinesCollection $contractLinesCollection
    )</span> </span>{
        $lineIds = [];

        <span class="hljs-keyword">foreach</span> ($contractLinesCollection <span class="hljs-keyword">as</span> $contractLineData) {
            $contractLine = <span class="hljs-keyword">$this</span>-&gt;createOrUpdateContractLine
                -&gt;execute($contractLineData);

            $lineIds[] = $contractLine-&gt;id;
        }

        $contractLinesToRemove = ContractLine::query()
            -&gt;whereContract($contract)
            -&gt;whereNotIn(<span class="hljs-string">'id'</span>, $lineIds)
            -&gt;get();

        <span class="hljs-keyword">foreach</span> ($contractLinesToRemove <span class="hljs-keyword">as</span> $contractLine) {
            <span class="hljs-keyword">$this</span>-&gt;removeContractLine-&gt;execute($contractLine);
        }
    }
}</code></pre>
<p>Besides composing actions together, they are also great for testing.
Because of an action's small size and single responsibility,
it can be unit tested very efficiently.</p>
<p>Actions also encapsulate most of the business logic for the app:
generating contract numbers, changing statuses, handling side-effects in an explicit way,…
This makes it easier for developers to reason about what the application does,
as most of its business is encapsulated as actions.</p>
<p>If you're into DDD, you're probably thinking of commands right now.
Actions are a simpler version of them.
There's no command bus and actions may directly return values.
For the scope of our projects, it's a very manageable approach.</p>
<h3 id="valueobjects"><a href="#valueobjects" class="heading-anchor">#</a> ValueObjects</h3>
<p>You're probably wondering how this domain stuff ties together with controllers or CLI commands.
That's of course the place where you'll use them.
There's one more abstraction we need to understand though: value objects.</p>
<p><em>Update</em>: since writing this blog post there has been an interesting discussion
on the name of "value object". We've changed the name to "data transfer object".
You can read more about this naming <a target="_blank" href="https://github.com/spatie/data-transfer-object/issues/17">here</a>.</p>
<p>Have you noticed the <code>ContractLinesCollection</code> passed to the <code>ResolveContractLines</code> action in the previous example?
That's a value object.</p>
<p>Working with user input isn't always straight forward.
For example, in Laravel applications you'll get an array of form data or an array of CLI arguments,
the rest is up to you.</p>
<p>Value objects are a representation of that user data, in a structured way.
Because we want don't want to concern our actions with input validation,
we pass them a value object.
There's one rule applied to value objects: if they exist, they are valid.</p>
<p>Most of the time, value objects are a simple mapping between validated request data,
and properties that can be used by actions.</p>
<p>Here's an example of a value object:</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ContractLineData</span>
</span>{
    <span class="hljs-keyword">public</span> $price;
    <span class="hljs-keyword">public</span> $dateFrom;
    <span class="hljs-keyword">public</span> $dateTo;
    <span class="hljs-keyword">public</span> $article;

    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fromArray</span><span class="hljs-params">(
        array $input
    )</span>: <span class="hljs-title">ContractLineData</span> </span>{
        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-keyword">self</span>(
            $input[<span class="hljs-string">'price'</span>],
            Carbon::make($input[<span class="hljs-string">'date_from'</span>]),
            Carbon::make($input[<span class="hljs-string">'date_to'</span>]),
            Article::find($input[<span class="hljs-string">'article_id'</span>])
        );
    }

    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span><span class="hljs-params">(
        int $price,
        Carbon $dateFrom,
        Carbon $dateTo,
        Article $article
    )</span> </span>{ <span class="hljs-comment">/* … */</span> }
}</code></pre>
<p>Because of convenience, we're using public properties.
You can imagine why we're looking forward to strongly typed and readonly properties in PHP.</p>
<p>Value objects allow actions to only focus on the actual action,
and not be concerned whether input is valid or not.
Furthermore, it's easy to fake a value object, making tests simpler once more.</p>
<h2 id="tying-it-together"><a href="#tying-it-together" class="heading-anchor">#</a> Tying it together</h2>
<p>Up until this point, I've said almost nothing about controllers or CLI commands,
and how they fit into this picture. That's intentional.</p>
<p>See, because our domains are split into separate areas,
we're able to develop a whole domain, without ever writing a single controller or view.
Everything in the domain is easily testable,
and almost every domain can be be developed side by side with other domains.</p>
<p>In larger projects, this is a highly efficient approach.
We've got two or three backend developers working on one project,
and each of them has a domain they are working on next to each other.</p>
<p>Also, because every domain is tested, we're very certain that all business logic
required by the client works as intended, before writing a single form and integration tests.</p>
<p>Once a domain is done, it can be consumed.
The domain itself doesn't care when or where it is used,
its usage rules are clear to the outside.</p>
<p>This means we're able to build one or more applications, using the existing domains.
In one of our projects, there's an admin HTTP application and a REST API.
Both of them use the same domains; their actions, models, rules, etc.
You can see how this approach is not only efficient during development,
but also enables for much better scaling.</p>
<p>Here's an example of how a controller in the admin HTTP application looks:</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ContractsController</span>
</span>{
    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">index</span><span class="hljs-params">()</span> </span>{ <span class="hljs-comment">/* … */</span> }

    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">edit</span><span class="hljs-params">(Contract $contract)</span> </span>{ <span class="hljs-comment">/* … */</span> }

    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">update</span><span class="hljs-params">(
        Contract $contract,
        UpdateContract $updateContract,
        UpdateContractRequest $updateContractRequest
    )</span> </span>{
        $contract = $updateContract-&gt;execute(
            $contract,
            ContractData::fromRequest($updateContractRequest)
        );
        
        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> ContractViewModel($contract);
    }
}</code></pre>
<p>Almost all our controllers actions are as simple as this:</p>
<ul>
<li>Validate the request data and parse it into a value object.</li>
<li>Execute the action, we don't care anymore what happens underneath at this point.</li>
<li>Return the result, in our case using <a href="/blog/laravel-view-models">view models</a>.</li>
</ul>
<h2 id="in-closing"><a href="#in-closing" class="heading-anchor">#</a> In closing</h2>
<p>Structuring code in domains increases efficiency between developers on a single project.
Furthermore, it decreases the complexity of maintenance, because sub-systems are separated and well tested.</p>
<p>By using actions and value objects, you're able to communicate with the domain
in a controlled and testable way.
While it takes longer to initially write, this approach pays off very quickly,
even during early development.</p>
<p>Maybe the most important reason for structuring our code this way,
is that it's easier to understand.
We humans don't think in abstracts like "models", "actions" and "rules";
we categorize complex business processes into sub-systems.
Things like "contracts" and "invoicing".</p>
<p>I've been structuring complex code bases like this for two years,
and can say from experience that it's significantly more easy to reason about them now.
In end, I believe developer experience is equally important as theoretical knowledge and paradigms to succeed.</p>
<hr />
<p>👋 Hi, thanks for reading!
I hope this post can help you in one way or another.</p>
<p>If you want to talk more about this topic –I do– you can always send me a Tweet or e-mail.
Here's my <a target="_blank" href="https://twitter.com/brendt_gd">Twitter</a>, and here my <a href="mailto:brendt@stitcher.io">e-mail</a>.</p>
 ]]></summary>

                <updated>2018-10-16T00:00:00+00:00</updated>
            </entry>
                                <entry>
                <title><![CDATA[ Laravel view models ]]></title>

                <link rel="alternate" href="https://stitcher.io/blog/laravel-view-models"/>

                <id>https://www.stitcher.io/blog/laravel-view-models</id>

                <author>
                    <name><![CDATA[ Brent Roose ]]></name>
                </author>

                <summary type="html"><![CDATA[ <div class="author">
    Update: I've written a new version of this post, as part of my <a href="/blog/laravel-beyond-crud">Laravel beyond CRUD</a> series. You can read it <a href="/blog/laravel-beyond-crud-08-view-models">here</a>. 
</div>
<p>View models are an abstraction to simplify controller and model code.
View models are responsible for providing data to a view,
which would otherwise come directly from the controller or the model.
They allow a better separation of concerns, and provide more flexibility for the developer.</p>
<p>In essence, view models are simple classes that take some data,
and transform it into something usable for the view.
In this post I'll show you the basic principles of the pattern,
we'll take a look at how they integrate in Laravel projects,
and finally I'll show you how we use the pattern in one of <a target="_blank" href="https://spatie.be">Spatie</a>'s, our company, projects.</p>
<p><div class="ad-container">
    <script async type="text/javascript" src="//cdn.carbonads.com/carbon.js?serve=CK7ICK3W&placement=stitcherio" id="_carbonads_js"></script>
</div>
</p>
<p>Let's get started.
Say you have a form to create a blog post with a category.
You'll need a way to fill the select box in the view with category options.
The controller has to provide those.</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">create</span><span class="hljs-params">()</span>
</span>{
    <span class="hljs-keyword">return</span> view(<span class="hljs-string">'blog.form'</span>, [
        <span class="hljs-string">'categories'</span> =&gt; Category::all(),
    ]);
}</code></pre>
<p>The above example works for the create method,
but let's not forget we should also be able to edit existing posts.</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">edit</span><span class="hljs-params">(Post $post)</span>
</span>{
    <span class="hljs-keyword">return</span> view(<span class="hljs-string">'blog.form'</span>, [
        <span class="hljs-string">'post'</span> =&gt; $post,
        <span class="hljs-string">'categories'</span> =&gt; Category::all(),
    ]);
}</code></pre>
<p>Next there's a new business requirement:
users should be restricted in which categories they are allowed to post in.
In other words: the category selection should be restricted based on the user.</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-keyword">return</span> view(<span class="hljs-string">'blog.form'</span>, [
    <span class="hljs-string">'categories'</span> =&gt; Category::allowedForUser(
        current_user()
    )-&gt;get(),
]);</code></pre>
<p>This approach doesn't scale.
You'll have to change code both in the <code>create</code> and <code>edit</code> method.
Can you imagine what happens when you need to add tags to a post?
Or if there's another special admin form for creating and editing posts?</p>
<p>The next solution is to have the post model itself provide the categories, like so:</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Post</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Model</span>
</span>{
    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">allowedCategories</span><span class="hljs-params">()</span>: <span class="hljs-title">Collection</span> 
    </span>{
        <span class="hljs-keyword">return</span> Category::query()
            -&gt;allowedForUser(current_user())
            -&gt;get();
    }
}</code></pre>
<p>There are numerous reasons why this is a bad idea, though it happens often in Laravel projects.
Let's focus on the most relevant problem for our case: it still allows for duplication.</p>
<p>Say there's a new model <code>News</code> which also needs the same category selection.
This causes again duplication, but on the model level instead of in the controllers.</p>
<p>Another option is to put the method on the <code>User</code> model.
This makes the most sense, but also makes maintenance harder.
Imagine we're using tags as mentioned before.
They don't rely on the user.
Now we need to get the categories from the user model, and tags from somewhere else.</p>
<p>I hope it's clear that using models as data providers for views also isn't the silver bullet.</p>
<p>In summary, wherever you try to get the categories from,
there always seems to be some code duplication.
This makes it harder to maintain and reason about the code.</p>
<p>This is where view models come into play.
They encapsulate all this logic so that it can be reused in different places.
They have one responsibility and one responsibility only: providing the view with the correct data.</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PostFormViewModel</span>
</span>{
    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span><span class="hljs-params">(
        User $user, 
        Post $post = null
    )</span> </span>{
        <span class="hljs-keyword">$this</span>-&gt;user = $user;
        <span class="hljs-keyword">$this</span>-&gt;post = $post;
    }
    
    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">post</span><span class="hljs-params">()</span>: <span class="hljs-title">Post</span>
    </span>{
        <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;post ?? <span class="hljs-keyword">new</span> Post();
    }
    
    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">categories</span><span class="hljs-params">()</span>: <span class="hljs-title">Collection</span>
    </span>{
        <span class="hljs-keyword">return</span> Category::allowedForUser(<span class="hljs-keyword">$this</span>-&gt;user)-&gt;get();
    }
}</code></pre>
<p>Let's name a few key features of such a class:</p>
<ul>
<li>All dependencies are injected, this gives the most flexibility to the outside.</li>
<li>The view model exposes some methods that can be used by the view.</li>
<li>There will either be a new or existing post provided by the <code>post</code> method,
depending on whether your creating or editing a post.</li>
</ul>
<p>This is what the controller looks like:</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PostsController</span>
</span>{
    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">create</span><span class="hljs-params">()</span>
    </span>{
        $viewModel = <span class="hljs-keyword">new</span> PostFormViewModel(
            current_user()
        );
        
        <span class="hljs-keyword">return</span> view(<span class="hljs-string">'blog.form'</span>, compact(<span class="hljs-string">'viewModel'</span>));
    }
    
    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">edit</span><span class="hljs-params">(Post $post)</span>
    </span>{
        $viewModel = <span class="hljs-keyword">new</span> PostFormViewModel(
            current_user(), 
            $post
        );
    
        <span class="hljs-keyword">return</span> view(<span class="hljs-string">'blog.form'</span>, compact(<span class="hljs-string">'viewModel'</span>));
    }
}</code></pre>
<p>And finally, it can be used in the view like so:</p>
<pre><code class="language-html hljs xml" data-lang="html"><span class="hljs-tag">&lt;<span class="hljs-name">input <span class="hljs-attr">value=<span class="hljs-string">"{{ $viewModel-&gt;post()-&gt;title }}"</span> /&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">input <span class="hljs-attr">value=<span class="hljs-string">"{{ $viewModel-&gt;post()-&gt;body }}"</span> /&gt;</span>

<span class="hljs-tag">&lt;<span class="hljs-name">select&gt;</span>
    @foreach ($viewModel-&gt;categories() as $category)
        <span class="hljs-tag">&lt;<span class="hljs-name">option <span class="hljs-attr">value=<span class="hljs-string">"{{ $category-&gt;id }}"</span>&gt;</span>
            {{ $category-&gt;name }}
        <span class="hljs-tag">&lt;/<span class="hljs-name">option&gt;</span>
    @endforeach
<span class="hljs-tag">&lt;/<span class="hljs-name">select&gt;</span></code></pre>
<p>These are the two benefits of using view models:</p>
<ul>
<li>They encapsulate the logic</li>
<li>They can be reused in multiple contexts</li>
</ul>
<h2 id="view-models-in-laravel"><a href="#view-models-in-laravel" class="heading-anchor">#</a> View models in Laravel</h2>
<p>The previous example showed a simple class with some methods.
This is enough to use the pattern,
but within Laravel projects, there are a few more niceties we can add.</p>
<p>For example, you can pass a view model directly to the <code>view</code> function if the view model implements <code>Arrayable</code>.</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">create</span><span class="hljs-params">()</span>
</span>{
    $viewModel = <span class="hljs-keyword">new</span> PostFormViewModel(
        current_user()
    );
    
    <span class="hljs-keyword">return</span> view(<span class="hljs-string">'blog.form'</span>, $viewModel);
}</code></pre>
<p>The view can now directly use the view model's properties like <code>$post</code> and <code>$categories</code>.
The previous example now looks like this:</p>
<pre><code class="language-html hljs xml" data-lang="html"><span class="hljs-tag">&lt;<span class="hljs-name">input <span class="hljs-attr">value=<span class="hljs-string">"{{ $post-&gt;title }}"</span> /&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">input <span class="hljs-attr">value=<span class="hljs-string">"{{ $post-&gt;body }}"</span> /&gt;</span>

<span class="hljs-tag">&lt;<span class="hljs-name">select&gt;</span>
    @foreach ($categories as $category)
        <span class="hljs-tag">&lt;<span class="hljs-name">option <span class="hljs-attr">value=<span class="hljs-string">"{{ $category-&gt;id }}"</span>&gt;</span>
            {{ $category-&gt;name }}
        <span class="hljs-tag">&lt;/<span class="hljs-name">option&gt;</span>
    @endforeach
<span class="hljs-tag">&lt;/<span class="hljs-name">select&gt;</span></code></pre>
<p>You can also return the view model itself as JSON data, by implementing <code>Responsable</code>.
This can be useful when you're saving the form via an AJAX call,
and want to repopulate it with up-to-date data after the call is done.</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">update</span><span class="hljs-params">(Request $request, Post $post)</span>
</span>{
    <span class="hljs-comment">// Update the post…</span>

    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> PostFormViewModel(
        current_user(),
        $post
    );
}</code></pre>
<p>You might see a similarity between view models and Laravel resources.
Remember that resources map one-to-one on a model, when view models may provide whatever data they want.</p>
<p>In one of our projects, we're actually using resources in view models!</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PostViewModel</span>
</span>{
    <span class="hljs-comment">// …</span>
    
    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">values</span><span class="hljs-params">()</span>: <span class="hljs-title">array</span>
    </span>{
        <span class="hljs-keyword">return</span> PostResource::make(
            <span class="hljs-keyword">$this</span>-&gt;post ?? <span class="hljs-keyword">new</span> Post()
        )-&gt;resolve();
    }
}</code></pre>
<p>Finally, in this project we're working with Vue form components, which require JSON data.
We've made an abstraction which provides this JSON data instead of objects or arrays,
when calling the magic getter:</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ViewModel</span>
</span>{
    <span class="hljs-comment">// …</span>
    
    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__get</span><span class="hljs-params">($name)</span>: ?<span class="hljs-title">string</span>
    </span>{
        $name = Str::camel($name);
    
        <span class="hljs-comment">// Some validation…</span>
    
        $values = <span class="hljs-keyword">$this</span>-&gt;{$name}();
    
        <span class="hljs-keyword">if</span> (! is_string($values)) {
            <span class="hljs-keyword">return</span> json_encode($values);
        }
    
        <span class="hljs-keyword">return</span> $values;
    }
}</code></pre>
<p>Instead of calling the view model methods, we can call their property and get a JSON back.</p>
<pre><code class="language-html hljs xml" data-lang="html"><span class="hljs-tag">&lt;<span class="hljs-name">select-field
    <span class="hljs-attr">label=<span class="hljs-string">"{{ __('Post category') }}"</span>
    <span class="hljs-attr">name</span>=<span class="hljs-string">"post_category_id"</span>
    <span class="hljs-attr">:options</span>=<span class="hljs-string">"{{ $postViewModel-&gt;post_categories }}"</span>
&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">select-field&gt;</span></code></pre>
<h3 id="wait,-what-about-view-composers?"><a href="#wait,-what-about-view-composers?" class="heading-anchor">#</a> Wait, what about view composers?</h3>
<p>I hear you! There's a whole separate blog post on that topic.
You can read it <a href="/blog/laravel-view-models-vs-view-composers">here</a>.</p>
<hr />
<p>In summary, view models can be a viable alternative to working with the data directely in a controller.
They allow for better reusability and encapsulate logic that doesn't belong in the controller.</p>
<p>You're also not confined to forms when using them.
At Spatie we also use them to populate facet filter options,
based on a complex context the user is currently working in.</p>
<p>I'd recommend trying this pattern out.
You don't need anything to get started by the way.
All Laravel gimmicks listed above are optional and can be added depending on your use case.</p>
<p>And just in case you'd like to use Laravel gimmicks, we've got a package for it:
<a target="_blank" href="https://github.com/spatie/laravel-view-models">spatie/laravel-view-models</a> 🤗.</p>
 ]]></summary>

                <updated>2018-09-10T00:00:00+00:00</updated>
            </entry>
                                <entry>
                <title><![CDATA[ Eloquent MySQL views ]]></title>

                <link rel="alternate" href="https://stitcher.io/blog/eloquent-mysql-views"/>

                <id>https://www.stitcher.io/blog/eloquent-mysql-views</id>

                <author>
                    <name><![CDATA[ Brent Roose ]]></name>
                </author>

                <summary type="html"><![CDATA[ <p>MySQL views are a way of storing queries on the database level, and producing virtual tables with them.
In this post we'll look at why you want to use them and how they can be integrated in Laravel with Eloquent models.</p>
<p>If you're already convinced of the power of MySQL views, or just want to know how to implement them in Laravel,
you're free to <a href="#impatient">skip ahead</a>.</p>
<p><div class="ad-container">
    <script async type="text/javascript" src="//cdn.carbonads.com/carbon.js?serve=CK7ICK3W&placement=stitcherio" id="_carbonads_js"></script>
</div>
</p>
<h2 id="benefits-of-mysql-views"><a href="#benefits-of-mysql-views" class="heading-anchor">#</a> Benefits of MySQL views</h2>
<p>A view in MySQL stores the result of a query in a table-like structure.
You're able to query this view just like you would query a normal table.</p>
<p>The power of views is twofold:</p>
<ul>
<li>Complex queries with joins and unions can be represented as a queryable table on their own.</li>
<li>MySQL is generally smarter than us when it comes to querying data.
Compared to using collections or array functions in PHP, there's a big performance gain.</li>
</ul>
<p>There's also a caveat to using views though.
Depending on the kind of query, MySQL will need to construct an "in memory" table representing the view, at runtime.
This operation is called table materialization and happens when using certain keywords like <code>GROUP BY</code>, or aggregated functions.</p>
<p>The takeaway is that views might actually hurt query performance,
depending on the kind of query you're executing.
As with all things, views are a good solution for some problems, but a terrible idea for others.
Use them wisely, and read up on their restrictions <a target="_blank" href="https://dev.mysql.com/doc/refman/8.0/en/view-restrictions.html">here</a>.</p>
<h2 id="views-and-their-alternatives"><a href="#views-and-their-alternatives" class="heading-anchor">#</a> Views and their alternatives</h2>
<p>Let's look at a real-life example, to demonstrate how we could solve a given problem.</p>
<p>We've got a model <code>MeterReading</code> which logs a meter reading done in an apartment building.
Every unit in the building has its own electricity, water and gas meters.</p>
<p>Every reading is listed in the database with a reference to the unit, the date,
the user doing the reading, the type, and the actual meter value.
Type in this example is <code>electricity</code>, <code>water</code> or <code>gas</code>.</p>
<p>This is what a simplified migration of this table looks like:</p>
<pre><code class="language-php hljs php" data-lang="php">Schema::create(<span class="hljs-string">'meter_readings'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">(Blueprint $table)</span> </span>{
    $table-&gt;unsignedInteger(<span class="hljs-string">'unit_id'</span>);
    $table-&gt;unsignedInteger(<span class="hljs-string">'user_id'</span>);

    $table-&gt;string(<span class="hljs-string">'type'</span>);
    $table-&gt;dateTime(<span class="hljs-string">'date'</span>);
    $table-&gt;unsignedInteger(<span class="hljs-string">'value'</span>);
});</code></pre>
<p>Now the client asks us to generate reports based on this raw data.
He wants to see an overview of the units, where every row represents
the readings for that unit, on that day, and whether all readings were done or not.</p>
<p>In short, he wants to see this:</p>
<pre><code class="language-txt">+---------+---------+------------+-------------+-------+-----+
| unit_id | user_id | date       | electricity | water | gas |
+---------+---------+------------+-------------+-------+-----+
|      14 |      72 | 2018-08-19 |           0 |     1 |   0 |
|      59 |      61 | 2018-08-06 |           0 |     0 |   1 |
|      41 |      64 | 2018-08-02 |           1 |     1 |   1 |
|      41 |      45 | 2018-08-02 |           1 |     1 |   1 |
...
|      41 |      51 | 2018-08-02 |           1 |     1 |   1 |
+---------+---------+------------+-------------+-------+-----+</code></pre>
<p>The report show a data set that is grouped by unit, user and day;
and the corresponding readings done for at the time.</p>
<p>Here are a few ways of generating this report.</p>
<h3 id="on-the-fly"><a href="#on-the-fly" class="heading-anchor">#</a> On the fly</h3>
<p>We always query all the data, and group it in our code.
This is the most easy way of doing it, but has some downsides:</p>
<ul>
<li>PHP and Laravel collections are slow, compared to the optimised algorithms MySQL can use.</li>
<li>Building a virtual data set means you'll have to manually implement pagination. One row can represent multiple models.</li>
<li>You're adding a lot of code to manage that special collection of readings.</li>
</ul>
<h3 id="using-a-raw-query"><a href="#using-a-raw-query" class="heading-anchor">#</a> Using a raw query</h3>
<p>We can of course skip PHP and build the raw query to fully use the power of MySQL.
While this solves the performance issue, we're still working with a custom data set which can't make use of standard pagination.
Also, you're now maintaining a big SQL query somewhere in your code.
It's probably a string somewhere in PHP, or –slightly better– a separate sql file.</p>
<h3 id="projecting-the-changes"><a href="#projecting-the-changes" class="heading-anchor">#</a> Projecting the changes</h3>
<p>We could make a separte model called <code>MeterReadingReport</code>,
and use event hooks on <code>MeterReading</code> to manage these reports.</p>
<p>Every time a reading is added, we can get or create a report for that unit, day and user;
and update the data accordingly.</p>
<p>Now there's a separate model that's simple to query.
There's no more performance impact and the pagination issue is also solved.</p>
<p>But on the other hand, there's a lot more code to manage these event hooks.
Creating reports is one thing, but what if a reading is updated or deleted?
That's a lot of complexity we need to manage.</p>
<p>Projecting events into other models isn't a bad idea though.
It's one of the key features in event sourcing.
If you've got the right setup, making projectors would definitely be an option.</p>
<p>While we do have a package that handles this exact use case (<a target="_blank" href="https://github.com/spatie/laravel-event-projector">laravel-event-projector</a>),
it seemed overkill for this use case;
especially since there are a lot of other "normal" models in this project.</p>
<h3 id="finding-the-middle-ground"><a href="#finding-the-middle-ground" class="heading-anchor">#</a> Finding the middle ground</h3>
<p>Looking at all the possible solutions, we can make a simple list of requirements:</p>
<ul>
<li>As less overhead as possible in the code base.</li>
<li>Good performance.</li>
<li>Be able to use the standard Laravel features without any workarounds.</li>
</ul>
<p>MySQL views are this perfect middle ground.
Let's look at how they are implemented.</p>
<p><a name="impatient"></a></p>
<h2 id="sql-views-in-laravel"><a href="#sql-views-in-laravel" class="heading-anchor">#</a> SQL views in Laravel</h2>
<p>To work with a view, we'll have to first create a query that can build this view.
While many people are scared of SQL –modern ORMs made us way too lazy– I find it a lot of fun.</p>
<p>Beware that I'm no SQL master, so there might be things that could be done better.
I also won't explain what this query does exactly, as it'll be different for your use case.</p>
<p>In this case, it generates the table listed above. This is it:</p>
<pre><code class="language-sql hljs sql" data-lang="sql"><span class="hljs-keyword">SELECT</span> 
    unit_id
    , user_id
    , <span class="hljs-keyword">DATE_FORMAT</span>(<span class="hljs-string">`date`</span>, <span class="hljs-string">'%Y-%m-%d'</span>) <span class="hljs-keyword">AS</span> <span class="hljs-keyword">day</span>
    , <span class="hljs-keyword">COUNT</span>(<span class="hljs-keyword">CASE</span> <span class="hljs-keyword">WHEN</span> <span class="hljs-keyword">type</span> = <span class="hljs-string">'electricity'</span> <span class="hljs-keyword">THEN</span> <span class="hljs-keyword">type</span> <span class="hljs-keyword">END</span>) 
        <span class="hljs-keyword">AS</span> <span class="hljs-string">`electricity`</span>
    , <span class="hljs-keyword">COUNT</span>(<span class="hljs-keyword">CASE</span> <span class="hljs-keyword">WHEN</span> <span class="hljs-keyword">type</span> = <span class="hljs-string">'water'</span> <span class="hljs-keyword">THEN</span> <span class="hljs-keyword">type</span> <span class="hljs-keyword">END</span>) 
        <span class="hljs-keyword">AS</span> <span class="hljs-string">`water`</span>
    , <span class="hljs-keyword">COUNT</span>(<span class="hljs-keyword">CASE</span> <span class="hljs-keyword">WHEN</span> <span class="hljs-keyword">type</span> = <span class="hljs-string">'gas'</span> <span class="hljs-keyword">THEN</span> <span class="hljs-keyword">type</span> <span class="hljs-keyword">END</span>) 
        <span class="hljs-keyword">AS</span> <span class="hljs-string">`gas`</span>
    
<span class="hljs-keyword">FROM</span> 
    meter_readings
    
<span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span>
    unit_id
    , user_id
    , <span class="hljs-keyword">day</span>
;</code></pre>
<p>It's very easy to build this query in your favourite SQL browser,
and afterwards plug it into your project.</p>
<p>How to plug it in, you ask? Very simple, with a migration.</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">up</span><span class="hljs-params">()</span>
</span>{
    DB::statement(<span class="hljs-keyword">$this</span>-&gt;dropView());
    
    DB::statement(<span class="hljs-keyword">$this</span>-&gt;createView());
}</code></pre>
<p>First of all, <code>dropView</code> is required, because Laravel only drops tables when doing a fresh migration.
It's as simple as this:</p>
<pre><code class="language-php hljs php" data-lang="php">    <span class="hljs-keyword">private</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">dropView</span><span class="hljs-params">()</span>: <span class="hljs-title">string</span>
    </span>{
        <span class="hljs-keyword">return</span> <span class="hljs-string">&lt;&lt;&lt;SQL
DROP VIEW IF EXISTS `meter_reading_reports`;
SQL;</span>
    }</code></pre>
<p>You notice I prefer Heredoc in these cases, a separate SQL file is of course equally good.</p>
<p>Michael Dyrynda pointed out to me that there's a <code>--drop-views</code> flag you can pass to the migrate command.
So, technically, this manual dropping isn't required.
I prefer this way though, because now we don't have to remember to add the extra flag.</p>
<p>Next up, the <code>createView</code> method returns the query, with some added syntax.
I've shortened the sample a bit, but you get the point.</p>
<pre><code class="language-php hljs php" data-lang="php">    <span class="hljs-keyword">private</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">createView</span><span class="hljs-params">()</span>: <span class="hljs-title">string</span>
    </span>{
        <span class="hljs-keyword">return</span> <span class="hljs-string">&lt;&lt;&lt;SQL
CREATE VIEW `meter_reading_reports` AS

SELECT /* … The query */
SQL;</span>
    }</code></pre>
<p>Sidenote: I'm very much looking forward to PHP 7.3 and <a href="/blog/new-in-php-73">flexible Heredoc syntax</a>.</p>
<p>Now that we have a migration in place, all else just works like normal Laravel!</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MeterReadingReport</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Model</span>
</span>{
    <span class="hljs-keyword">protected</span> $casts = [
        <span class="hljs-string">'day'</span> =&gt; <span class="hljs-string">'date'</span>,
    ];
    
    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">unit</span><span class="hljs-params">()</span>: <span class="hljs-title">BelongsTo</span>
    </span>{
        <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;belongsTo(Unit::class);
    }

    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">user</span><span class="hljs-params">()</span>: <span class="hljs-title">BelongsTo</span>
    </span>{
        <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;belongsTo(User::class);
    }
}</code></pre>
<p>We're using a simple model, without any workarounds whatsoever.
Relations work just like normal, casting like you're used to,
pagination works like it should be, and there no more performance impact.</p>
<p>The only thing that's not possible is of course writing to a view.
It is actually possible to do it in MySQL, but completely irrelevant to our use case.</p>
<p>Maybe you can already see some use cases where MySQL views might be useful?
Maybe you have a followup question or remark?
I'd love to hear from you!
You can reach me on <a target="_blank" href="https://twitter.com/brendt_gd">Twitter</a> or via <a href="mailto:brendt@stitcher.io">e-mail</a>.</p>
 ]]></summary>

                <updated>2018-08-27T00:00:00+00:00</updated>
            </entry>
                                <entry>
                <title><![CDATA[ The web in 2045 ]]></title>

                <link rel="alternate" href="https://stitcher.io/blog/the-web-in-2045"/>

                <id>https://www.stitcher.io/blog/the-web-in-2045</id>

                <author>
                    <name><![CDATA[ Brent Roose ]]></name>
                </author>

                <summary type="html"><![CDATA[ <p>On August 6 1991, Sir Tim Berners-Lee put the world's first website online.
It's been 27 years since that first website has been reachable via the world wide web.
With the massive progression we've seen throughout the web's lifetime,
I can't help but wonder what will happen in the next 27 years, what the web will look like in 2045.</p>
<p><div class="ad-container">
    <script async type="text/javascript" src="//cdn.carbonads.com/carbon.js?serve=CK7ICK3W&placement=stitcherio" id="_carbonads_js"></script>
</div>
</p>
<h2 id="a-brief-history"><a href="#a-brief-history" class="heading-anchor">#</a> A brief history</h2>
<p>What better way to know the future, than to look at the past?
There's an excellent blog called "<a target="_blank" href="https://thehistoryoftheweb.com/archives/">The History Of The Web</a>".
Thanks to Jay Hoffman, the writer of the blog,
I've been fascinated by the roots of the web.</p>
<p>On August 6, 1991 Tim Berners-Lee puts the first website online.
A few months later, on October 29 of the same year,
the first HTML draft is posted on the <em>www-talk</em> mailing list.</p>
<p>Three years went by until Netscape Navigator, the most popular browser at the time,
was released on October 13, 1994.
It took Microsoft almost a year longer to release their own Internet Explorer 1 on August 15 of 1995.
In December of 1996, the first iteration for CSS was conceptualised.</p>
<p>Mozilla released Firefox more than ten years after the beginning of the web in 2004.
Only a few years later, Apple flipped the web to its mobile side
by presenting the very first iPhone on January 8, 2007.</p>
<p>Twenty-three years after the first mention of HTML
modern websites found their identity as we know it today,
when HTML5 was made the formal recommendation by the W3C on October 28, 2014.</p>
<p>It's amazing to see how the web has evolved in less than three decades.
Not only its technical boundaries were pushed;
people also kept finding innovating ways for what the technology was used for.
Think about sites like GeoCities or NeoPets; the first blog post written in <em>1997</em>;
or some recent examples like <a target="_blank" href="https://i.redd.it/agcbmqgjn14z.png">/r/place</a> on Reddit
and an experience beyond words crafted by <a target="_blank" href="https://www.sbnation.com/a/17776-football">SB Nation</a>.</p>
<h2 id="today"><a href="#today" class="heading-anchor">#</a> Today</h2>
<p>While the web's primary focus was to distribute content,
its users have shaped it into a completely different, broader platform.</p>
<p>It's only in more recent years that we've been able to observe – and be part of –
the unique phenomenon of the JavaScript world.
While the language has been around since the nineties,
it were frameworks like Ember, Backbone and Angular that opened a whole new area the web could grow in.</p>
<p>It's impossible to pinpoint an exact date on when people started looking at JavaScript as something more
than a simple scripting language. But there are a few milestones worth mentioning.</p>
<ul>
<li>jQuery's initial release in August, 2006.</li>
<li>AngularJS was released in October, 2010.</li>
<li>React saw the light in March, 2013.</li>
</ul>
<p>Especially with the modern frameworks, better syntax was required;
and projects like Babel came into view.
This is where it starts to get real interesting: JavaScript in the browser becoming a compilation target,
for <em>other</em> languages and supersets.</p>
<p>Gary Bernhardt, a well known public speaker;
said that, in order for JavaScript to become as successful as it is today,
it had to really suck.
It's only then that people start investing in alternatives.
And when JavaScript is the <em>only</em> thing that runs in the browsers,
people are really forced to think out of the box.</p>
<p>With the arrival of frontend frameworks in JavaScript,
people needed to start investing in performance.
On the one hand, browser vendors are doing amazing things with their JavaScript engines.
On the other hand, one of the most creative, out of the box thinking solutions;
must have been asm.js.</p>
<p>Here you have an optimised subset of JavaScript; being able to run, for example, a 3D game engine—in the browser.
With asm.js, and Web Assembly following; web technologies can be used for yet another, completely different goal.</p>
<p>It begs the question: "what is the web?"</p>
<p>The technologies the web was built upon: HTTP, HTML, CSS and JavaScript,
became technologies to make applications and games;
some of the programs we use to build the web,
are built on these same technologies themselves.</p>
<p>Does "the web today" refer to all these technologies and creations,
or just a collection of connected documents, built on top of the same technologies?
Is the browser's goal still just that: browsing documents;
or has it become a platform for all kinds of things, whatever we can imagine?</p>
<h2 id="2045"><a href="#2045" class="heading-anchor">#</a> 2045</h2>
<p>With the web advancing so fast,
one can only wonder what it will look like a few decades from now.</p>
<p>One of the key changes could be the sandbox we're all using today: the browser.
Will applications stay confined to that browser window,
or will they break free and live as first-class programs on your operating system?</p>
<p>The mobile world is already moving in this direction with progressive web apps.
Chrome OS was completely built on top of the web, independent of the browser.
But, some might argue, it was too ahead of its time.</p>
<p>Imagine a world where web apps can be "installed" via an app store;
where you don't need bookmarks or URLs anymore, but simply open an app, like we open the browser today.
Obviously, being built on top of the web; these apps don't need to be installed, they just work, everywhere.</p>
<p>Imagine JavaScript and DOM engines baked into operating systems.
No more Electron or Java for easy cross-platform programming.
All programs can be shared, everything will be interconnected.</p>
<p>And once all that is achieved, someone will come along, claiming a new invention:
a simple web app for browsing and sharing content…</p>
<hr />
<p>Hi, thanks for reading! What's your view for the web in 2045?
Feel free to share your thoughts on <a target="_blank" href="https://twitter.com/brendt_gd">Twitter</a> or via <a href="mailto:brendt@stitcher.io">e-mail</a>,
I'd love to chat!</p>
<p>And if you're reading this in 2045:
what's your opinion on this blog post, looking back?
Where will the web be in, say, another 27 years?</p>
 ]]></summary>

                <updated>2018-08-15T00:00:00+00:00</updated>
            </entry>
                                <entry>
                <title><![CDATA[ Service locator: an anti-pattern ]]></title>

                <link rel="alternate" href="https://stitcher.io/blog/service-locator-anti-pattern"/>

                <id>https://www.stitcher.io/blog/service-locator-anti-pattern</id>

                <author>
                    <name><![CDATA[ Brent Roose ]]></name>
                </author>

                <summary type="html"><![CDATA[ <p>As a Laravel developer, I'm confronted daily with the service locator pattern.
Every facade call and several helper functions are built upon it.</p>
<p>Let's take a look at a common facade call: <code>Auth::user()</code>.
The <code>Auth</code> facade will reach into Laravel's service container, grab the registered component,
and forward the static call to that component.
In this case, it'll return the logged in user.</p>
<p><div class="ad-container">
    <script async type="text/javascript" src="//cdn.carbonads.com/carbon.js?serve=CK7ICK3W&placement=stitcherio" id="_carbonads_js"></script>
</div>
</p>
<p>During a discussion with my colleagues, I found it difficult to put into words
what exactly is wrong with grabbing things out of the container –a service locator– so I decided to write my thoughts down,
with an example: a class <code>CreatePostAction</code> which is tasked to create a blog post,
based on a set of parameters.</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CreatePostAction</span>
</span>{
    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__invoke</span><span class="hljs-params">(
        <span class="hljs-highlight  type">string</span> $title, 
        <span class="hljs-highlight  type">string</span> $body
    )</span>: <span class="hljs-title">Post</span>
    </span>{
        <span class="hljs-keyword">return</span> <span class="hljs-highlight  type">Post</span>::<span class="hljs-highlight  prop">create</span>([
            <span class="hljs-string">'title'</span> =&gt; $title,
            <span class="hljs-string">'body'</span> =&gt; $body,
            <span class="hljs-string">'author_id'</span> =&gt; <span class="hljs-highlight  type">Auth</span>::<span class="hljs-highlight  prop">user</span>()-&gt;id,
        ]);
    }
}</code></pre>
<p>I want to highlight three problems with this approach, directly caused by the use of a service locator.</p>
<ul>
<li>There's a bigger chance of runtime errors.</li>
<li>The code is obfuscated to the outside.</li>
<li>It increases cognitive load.</li>
</ul>
<p>Let's look at these problems, one by one.</p>
<h2 id="runtime--instead-of-compile-time-errors"><a href="#runtime--instead-of-compile-time-errors" class="heading-anchor">#</a> Runtime- instead of compile time errors</h2>
<p>Before even looking into this first problem, there's one assumption I'll make.
That is that, as a developer, you prefer to know bugs in your code as early as possible,
so that you can fix them as early as possible.</p>
<p>I'll assume that you don't like a situation where a client tells you a production project is broken,
and the issue can only be reproduced by taking several steps.</p>
<p>As the name says, runtime errors can only be discovered by running the program.
Truth be told: <abbr>PHP</abbr>, being an interpreted language; highly leans towards these kind of errors.
You cannot know if a <abbr>PHP</abbr> program will work before running it.</p>
<p>There's nothing wrong with that, but my argument here is that every place we can
avoid these errors, we should.</p>
<p>Compile time errors are errors that can be detected without running the code.
For example: in your <abbr>IDE</abbr> or using a static analysis tool.
The benefit is that you know a piece of code will absolutely work,
even without testing it.</p>
<p>Let's put that into practice. What does <code>Auth::user()</code> return?
A logged in <code>User</code>—most of the time.</p>
<p>Our action class doesn't know anything about the system it lives in,
except the things we tell it.
This means that, when calling <code>Auth::user()->id</code>,
we assume that the surrounding system has a logged in user, with an <code>id</code>.</p>
<p>Of course, your first thought is that we <em>know</em> there's a user,
because this action is called within a controller that requires a logged in user.
I'll come back to that argument later on.</p>
<p>For now, speaking from a mathematical point of view,
it's impossible to prove whether <code>Auth::user()->id</code> will work, without running it.
There are two ways to fix it, from the action's perspective.</p>
<p>By doing a runtime check:</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CreatePostAction</span>
</span>{
    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__invoke</span><span class="hljs-params">(
        <span class="hljs-highlight  type">string</span> $title, 
        <span class="hljs-highlight  type">string</span> $body
    )</span>: <span class="hljs-title">Post</span>
    </span>{
        <span class="hljs-keyword">if</span> (! <span class="hljs-highlight  type">Auth</span>::<span class="hljs-highlight  prop">user</span>()) {
            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-highlight  type"><span class="hljs-keyword">Exception</span></span>(<span class="hljs-string">'…'</span>);
        }
        
        <span class="hljs-comment">// ...</span>
    }
}</code></pre>
<p>Or by requiring a valid user, before executing:</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CreatePostAction</span>
</span>{
    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__invoke</span><span class="hljs-params">(
        <span class="hljs-highlight  type">string</span> $title, 
        <span class="hljs-highlight  type">string</span> $body,
        <span class="hljs-highlight  type">User</span> $author
    )</span>: <span class="hljs-highlight  type"><span class="hljs-title">Post</span></span>
    </span>{
        <span class="hljs-comment">// ...</span>
    }
}</code></pre>
<p>I <em>know</em> you have arguments why this will never happen and I shouldn't be worried about it;
I'll address those arguments soon.</p>
<h2 id="obfuscated-classes"><a href="#obfuscated-classes" class="heading-anchor">#</a> Obfuscated classes</h2>
<p>Before looking at the biggest problem, how service locators affect cognitive load;
there's the issue with obfuscated classes.
Let's look at our action's definition.</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CreatePostAction</span>
</span>{
    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__invoke</span><span class="hljs-params">(
        <span class="hljs-highlight  type">string</span> $title, 
        <span class="hljs-highlight  type">string</span> $body
    )</span>: <span class="hljs-title">Post</span>
    </span>{ <span class="hljs-comment">/* ... */</span> }
}</code></pre>
<p>I've blogged and spoken about this a lot already:
developers don't read every line of code, they scan it.</p>
<p>At the time of writing the code, it all seems obvious:
you <em>know</em> a blog post requires a logged in user.
However, for the developer working in your legacy code, that intent is not clear.
Not unless he's reading every single line of code.</p>
<p>Imagine being that person: having to work in a legacy project where you need to read every line of code,
in order to get the general idea of what's happening.</p>
<p>You might as well not be interested in the specifics of how a post is created,
you just want to know what's required to do so.
There's two ways to solve this issue.</p>
<p>Either be using docblocks;
meaning a lot more work for both the author and reader, and it clutters your code:</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CreatePostAction</span>
</span>{
    <span class="hljs-comment">/**
     * This action will create a post, 
     * and attach the logged in user as its author.
     *
     * <span class="hljs-doctag">@param</span> string $title
     * <span class="hljs-doctag">@param</span> string $body
     *
     * <span class="hljs-doctag">@return</span> Post
     */</span>
    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__invoke</span><span class="hljs-params">(
        <span class="hljs-highlight  type">string</span> $title, 
        <span class="hljs-highlight  type">string</span> $body
    )</span>: <span class="hljs-title">Post</span>
    </span>{ <span class="hljs-comment">/* ... */</span> }
}</code></pre>
<p>Or by injecting the user:</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CreatePostAction</span>
</span>{
    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__invoke</span><span class="hljs-params">(
        <span class="hljs-highlight  type">string</span> $title, 
        <span class="hljs-highlight  type">string</span> $body,
        <span class="hljs-highlight  type">User</span> $author
    )</span>: <span class="hljs-title">Post</span>
    </span>{ <span class="hljs-comment">/* ... */</span> }
}</code></pre>
<p>Which one do you prefer?
Remember: from the perspective of the person working in a legacy project,
and it's not just one class, there are dozens and dozens.</p>
<h2 id="increased-cognitive-load"><a href="#increased-cognitive-load" class="heading-anchor">#</a> Increased cognitive load</h2>
<p>This all leads up to the final, and major, problem: cognitive load.
I already wrote a lot on this topic, and I'll share some links at the end of this post.</p>
<p>The important question, which counters most of the pro-arguments for service locators;
is how much brain effort you, the developer, has to spend on trivial questions like:</p>
<blockquote>
<p>How sure am I this code will actually work?</p>
</blockquote>
<p>Let's look at the most basic example: <code>Auth::user()->id</code>.
I work on Laravel projects and admit to have used this piece of code numerous times.
Here's a non-exhaustive list of questions popping into my head when writing this code:</p>
<ul>
<li>Am I sure a user is logged in at this point?</li>
<li>Should I add an extra check, to be sure?</li>
<li>What context will this method be called from?</li>
<li>Are there any future features in the project's scope I need to take into account?</li>
<li>Should I add a test to be sure this never breaks in the future?</li>
</ul>
<p>These are all such trivial questions,
and I need to think about them <em>every</em> time I use a facade.
How much more easy is it to simply say:</p>
<blockquote>
<p>I <em>need</em> the logged in user to do this action, and the context which is calling this action can figure it out from there.</p>
</blockquote>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CreatePostAction</span>
</span>{
    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__invoke</span><span class="hljs-params">(
        <span class="hljs-highlight  type">string</span> $title, 
        <span class="hljs-highlight  type">string</span> $body,
        <span class="hljs-highlight  type">User</span> $author
    )</span>: <span class="hljs-title">Post</span>
    </span>{ <span class="hljs-comment">/* ... */</span> }
}</code></pre>
<p>Sure, compile time errors and less code are niceties,
but my main problem is this cognitive load.
I don't want to ask all these questions every time I use a facade.</p>
<p>Seasoned Laravel developers will tell me this is the way the framework works and we should embrace it.
They are right, of course.
But making the assumption that "it will work" isn't good enough for me.
At least, it's no argument against increased cognitive load,
as you're still left with a lot of questions about the surrounding context.</p>
<h2 id="dependency-injection-solves-it"><a href="#dependency-injection-solves-it" class="heading-anchor">#</a> Dependency injection solves it</h2>
<p>Dependency injection, of course; fixes this.
It's a pattern which allows for inversion of control and clarifies intent.
It's also perfectly possible to do proper DI in Laravel;
and, in my opinion, we should do it more.</p>
<p>I've written about DI before, feel free to read up on it <a href="/blog/dependency-injection-for-beginners">here</a>.
I also recently gave a talk about cognitive load, from a visual perspective.
You can find it <a href="/blog/visual-perception-of-code">here</a>.</p>
 ]]></summary>

                <updated>2018-08-10T00:00:00+00:00</updated>
            </entry>
                                <entry>
                <title><![CDATA[ The Visual Perception of Code ]]></title>

                <link rel="alternate" href="https://stitcher.io/blog/visual-perception-of-code"/>

                <id>https://www.stitcher.io/blog/visual-perception-of-code</id>

                <author>
                    <name><![CDATA[ Brent Roose ]]></name>
                </author>

                <summary type="html"><![CDATA[ <p>How do we read code? Are there things we can do to make that reading more easy?
I recently gave a talk about this exact topic.</p>
<p>In this talk, I gave six pointers to improve this visual perception,
to make it easier to read your own code: fonts, code folding, colours, patterns, documentation and names.</p>
<p>These are the links mentioned in the video:</p>
<ul>
<li>
<a href="/blog/a-programmers-cognitive-load">A programmer's cognitive load</a>
</li>
<li>
<a href="/blog/mastering-key-bindings">Mastering key bindings</a>
</li>
<li>
<a href="/blog/where-a-curly-bracket-belongs">Where a curly bracket belongs</a>
</li>
</ul>
<p>The colour scheme used is a port of Mozilla's Photon Light theme.
Here's the <a target="_blank" href="https://github.com/brendt/photon-light">PHPStorm version</a>.</p>
<p>
<iframe width="560" height="400" src="https://www.youtube.com/embed/5qRFxMCEbLs?rel=0" frameborder="0" allow="autoplay; encrypted-media" allowfullscreen></iframe>
</p>
<p>I you have any thoughts coming to mind, if you want to discuss this further
or tell me I'm wrong;
you can reach me on <a target="_blank" href="https://twitter.com/brendt_gd">Twitter</a> or via <a href="mailto:brendt@stitcher.io">e-mail</a>.</p>
 ]]></summary>

                <updated>2018-06-09T00:00:00+00:00</updated>
            </entry>
                                <entry>
                <title><![CDATA[ Scopes in JetBrains IDEs ]]></title>

                <link rel="alternate" href="https://stitcher.io/blog/phpstorm-scopes"/>

                <id>https://www.stitcher.io/blog/phpstorm-scopes</id>

                <author>
                    <name><![CDATA[ Brent Roose ]]></name>
                </author>

                <summary type="html"><![CDATA[ <p>Any JetBrains IDE has an amazing feature that can significantly improve your development experience; whether it's PhpStorm, WebStorm, IntelliJ IDEA, PyCharm, or any other project; this feature enables better search and allows for custom file colours.</p>
<p><div class="ad-container">
    <script async type="text/javascript" src="//cdn.carbonads.com/carbon.js?serve=CK7ICK3W&placement=stitcherio" id="_carbonads_js"></script>
</div>
</p>
<p>For example, this is what I'm talking about:</p>
<p><img src="/resources/img/blog/phpstorm-coloured-scopes/tree-view.png" srcset="/resources/img/blog/phpstorm-coloured-scopes/tree-view-745x1203.png 745w, /resources/img/blog/phpstorm-coloured-scopes/tree-view-646x1043.png 646w, /resources/img/blog/phpstorm-coloured-scopes/tree-view-372x600.png 372w, /resources/img/blog/phpstorm-coloured-scopes/tree-view-834x1347.png 834w, /resources/img/blog/phpstorm-coloured-scopes/tree-view-527x851.png 527w" sizes="" alt="A tree view configured with coloured scopes">A tree view configured with coloured scopes</img></p>
<p>These colours allow you to easily recognise files,
and that in turn allow you to think more freely about things that really matter when coding.
First you'll want to configure one or more scopes.
A scope is a set of textual filters that are applied on your files, you can configure them by going to <code>Settings > Scopes</code>.</p>
<p><img src="/resources/img/blog/phpstorm-coloured-scopes/scope-configuration.png" srcset="/resources/img/blog/phpstorm-coloured-scopes/scope-configuration-892x305.png 892w, /resources/img/blog/phpstorm-coloured-scopes/scope-configuration-1996x684.png 1996w, /resources/img/blog/phpstorm-coloured-scopes/scope-configuration-1785x611.png 1785w, /resources/img/blog/phpstorm-coloured-scopes/scope-configuration-extended-1530x628.png 0w, /resources/img/blog/phpstorm-coloured-scopes/scope-configuration-extended-1249x513.png 0w, /resources/img/blog/phpstorm-coloured-scopes/scope-configuration-extended-1767x726.png 0w, /resources/img/blog/phpstorm-coloured-scopes/scope-configuration-extended.png 0w, /resources/img/blog/phpstorm-coloured-scopes/scope-configuration-1262x432.png 1262w, /resources/img/blog/phpstorm-coloured-scopes/scope-configuration-1546x529.png 1546w, /resources/img/blog/phpstorm-coloured-scopes/scope-configuration-extended-1976x812.png 0w, /resources/img/blog/phpstorm-coloured-scopes/scope-configuration-extended-883x362.png 0w" sizes="" alt=""></img></p>
<p>You can use the buttons to include and exclude folders and files,
or you can write the filters yourself.
There's a special syntax to do that, you can read about it described <a target="_blank" href="https://www.jetbrains.com/help/phpstorm/scope-language-syntax-reference.html">here</a>. Don't forget you can expand the text area for easier configuration:</p>
<p><img src="/resources/img/blog/phpstorm-coloured-scopes/scope-configuration-extended.png" srcset="/resources/img/blog/phpstorm-coloured-scopes/scope-configuration-extended-1530x628.png 1530w, /resources/img/blog/phpstorm-coloured-scopes/scope-configuration-extended-1249x513.png 1249w, /resources/img/blog/phpstorm-coloured-scopes/scope-configuration-extended-1767x726.png 1767w, /resources/img/blog/phpstorm-coloured-scopes/scope-configuration-extended-1976x812.png 1976w, /resources/img/blog/phpstorm-coloured-scopes/scope-configuration-extended-883x362.png 883w" sizes="" alt=""></img></p>
<h2 id="file-colours"><a href="#file-colours" class="heading-anchor">#</a> File colours</h2>
<p>Every scope can be applied a specific colour.
This makes it easy to easily spot files.</p>
<p><img src="/resources/img/blog/phpstorm-coloured-scopes/file-colours.png" srcset="/resources/img/blog/phpstorm-coloured-scopes/file-colours-1249x489.png 1249w, /resources/img/blog/phpstorm-coloured-scopes/file-colours-1767x692.png 1767w, /resources/img/blog/phpstorm-coloured-scopes/file-colours-1976x774.png 1976w, /resources/img/blog/phpstorm-coloured-scopes/file-colours-883x345.png 883w, /resources/img/blog/phpstorm-coloured-scopes/file-colours-1530x599.png 1530w" sizes="" alt=""></img></p>
<p>By applying colours to a scope, you'll see them in the tree view,
in file tabs and when using file navigation.</p>
<p><img src="/resources/img/blog/phpstorm-coloured-scopes/tab-colours.png" srcset="/resources/img/blog/phpstorm-coloured-scopes/tab-colours-1402x49.png 1402w, /resources/img/blog/phpstorm-coloured-scopes/tab-colours-991x34.png 991w, /resources/img/blog/phpstorm-coloured-scopes/tab-colours-1568x54.png 1568w, /resources/img/blog/phpstorm-coloured-scopes/tab-colours-701x24.png 701w, /resources/img/blog/phpstorm-coloured-scopes/tab-colours-1214x42.png 1214w" sizes="" alt=""></img></p>
<p><div class="sidenote">
    <p>
        Tired of managing servers?
        Check out <a href="https://gumroad.com/a/575280243" ping="https://analytics.stitcher.io/r" target="_blank" rel="noopener noreferrer">Serverless Visually Explained</a> by Matthieu Napoli and learn how to create scalable PHP applications on AWS.
    </p>
</div>
</p>
<h2 id="filtering-by-scope"><a href="#filtering-by-scope" class="heading-anchor">#</a> Filtering by scope</h2>
<p>Besides colours, scopes also allow for easy filtering. For example, in the tree view:</p>
<p><img src="/resources/img/blog/phpstorm-coloured-scopes/tree-filter.png" srcset="/resources/img/blog/phpstorm-coloured-scopes/tree-filter-933x496.png 933w, /resources/img/blog/phpstorm-coloured-scopes/tree-filter-660x351.png 660w, /resources/img/blog/phpstorm-coloured-scopes/tree-filter-1044x556.png 1044w, /resources/img/blog/phpstorm-coloured-scopes/tree-filter-466x248.png 466w, /resources/img/blog/phpstorm-coloured-scopes/tree-filter-808x430.png 808w" sizes="" alt="File colours">File colours</img></p>
<p>But also in the finder:</p>
<p><img src="/resources/img/blog/phpstorm-coloured-scopes/finder.png" srcset="/resources/img/blog/phpstorm-coloured-scopes/finder-2092x566.png 2092w, /resources/img/blog/phpstorm-coloured-scopes/finder-935x252.png 935w, /resources/img/blog/phpstorm-coloured-scopes/finder-1620x438.png 1620w, /resources/img/blog/phpstorm-coloured-scopes/finder-1871x506.png 1871w, /resources/img/blog/phpstorm-coloured-scopes/finder-1323x357.png 1323w" sizes="" alt="File colours">File colours</img></p>
<h2 id="defaults"><a href="#defaults" class="heading-anchor">#</a> Defaults</h2>
<p>Setting up scopes shouldn't take longer than 10 minutes every project,
and saves a lot of time in the long run.
There's also the possibility to set default options though,
which will be used every every time you create a new project.
Go to <code>File > New Project Settings > Preference for New Projects</code> and configure your default scopes and colours over there, the same way you'd do as explained before.</p>
<p>And just in case you'd need some inspiration, these are my default scopes:</p>
<pre><code class="language-cmake hljs cmake" data-lang="cmake"><span class="hljs-highlight  blue">App</span>
<span class="hljs-keyword">file</span>:app//*||<span class="hljs-keyword">file</span>:config//*||<span class="hljs-keyword">file</span>:routes//*||<span class="hljs-keyword">file</span>:app||<span class="hljs-keyword">file</span>:config||<span class="hljs-keyword">file</span>:routes||<span class="hljs-keyword">file</span>:src//*||<span class="hljs-keyword">file</span>:src

<span class="hljs-highlight  purple">Resources</span>
<span class="hljs-keyword">file</span>:resources//*||<span class="hljs-keyword">file</span>:resources

<span class="hljs-highlight  yellow">Database</span>
<span class="hljs-keyword">file</span>:database//*||<span class="hljs-keyword">file</span>:database</code></pre>
 ]]></summary>

                <updated>2020-09-26T00:00:00+00:00</updated>
            </entry>
                                <entry>
                <title><![CDATA[ Acquisition by giants ]]></title>

                <link rel="alternate" href="https://stitcher.io/blog/acquisition-by-giants"/>

                <id>https://www.stitcher.io/blog/acquisition-by-giants</id>

                <author>
                    <name><![CDATA[ Brent Roose ]]></name>
                </author>

                <summary type="html"><![CDATA[ <p>Yesterday, Microsoft acquired GitHub.
I don't think GitHub is in any immediate danger of becoming obsolete or feature bloated.
But we should think about what this acquisition, one of many; means.</p>
<p>I say many, because GitHub isn't by far Microsoft's first big acquisition.
Think of Skype and Nokia a few years back, or Linkedin and Minecraft more recently.
Who can blame them?
It's only natural that a company continues to look for ways to improve their market footprint,
especially in the tech world.</p>
<p><div class="ad-container">
    <script async type="text/javascript" src="//cdn.carbonads.com/carbon.js?serve=CK7ICK3W&placement=stitcherio" id="_carbonads_js"></script>
</div>
</p>
<p>But now what? GitHub becomes one of the many products swallowed by tech giants.
It will become even more difficult for smaller products to stand a competing chance.
Should we, the tech industry, be worried about big monopolies growing larger and larger?</p>
<h2 id="embrace,-extend,-and-extinguish"><a href="#embrace,-extend,-and-extinguish" class="heading-anchor">#</a> Embrace, extend, and extinguish</h2>
<p>What better way to look at the future, than to look at the past?
Many will say Microsoft isn't deploying their "embrace, extend, and extinguish" strategy anymore;
but are they?</p>
<p>Here's what this strategy means, from <a target="_blank" href="https://en.wikipedia.org/wiki/Embrace,_extend,_and_extinguish">wikipedia</a>.</p>
<ul>
<li>Embrace: Development of software substantially compatible with a competing product,
or implementing a public standard.</li>
<li>Extend: Addition and promotion of features not supported by the competing product or part of the standard,
creating interoperability problems for customers who try to use the 'simple' standard.</li>
<li>Extinguish: When extensions become a de facto standard because of their dominant market share,
they marginalize competitors that do not or cannot support the new extensions.</li>
</ul>
<p>It sounds like a smart strategy.
It may not be called like this anymore but it seems reasonable that,
if Microsoft still wants to grow; they must look at how to outgrow their competitors.</p>
<p>We've seen them <strong>embracing</strong> a lot of technologies and platforms recently.
Think of open sourcing .NET, developing VSCode, embedding Linux etc.
Microsoft is doing a lot of good for the open source community lately,
but you can't help but think they are also serving their own agenda while at it.</p>
<p>It's only guessing what Microsoft will do to <strong>extend</strong> GitHub,
but we've already seen a lot of nice features added to other acquired products.
Growing them to, indeed, part of the standard.</p>
<p>Let's not forget the obvious example though: VSCode, a direct competitor to GitHub's Atom editor.
Both are built on the same technology: Electron, managed by GitHub.</p>
<p>So will the tech community allow a giant to <strong>extinguish</strong> all its competitors?
Time will tell.</p>
<h2 id="the-drive-for-innovation"><a href="#the-drive-for-innovation" class="heading-anchor">#</a> The drive for innovation</h2>
<p>Thinking back 20 years ago, the browser wars were raging.
There was a lot of competition, and with that competition came innovation.
We must not forget that it was this period of rivalry between many different players,
that lead to the web platform we have today.
And it's a platform that grew beyond the wildest expectations of these first pioneers.</p>
<p>So we must wonder: what if there's less and less competition in the tech world?
What if the giants, Microsoft, Apple, Amazon, Google and Facebook; only grow larger and larger?
What does it mean for innovation?</p>
<p>It's worrisome to see that in the startup culture,
it's actually one of the biggest questions right at the beginning: "what's our exit strategy?"
The goal of almost every startup, from the start, is to be absorbed by a bigger company, in just a few years.</p>
<p>The drive for innovation gets replaced by the need for money.
But we cannot afford stagnation.
We must be aware that this, still very young, industry
has very large odds of becoming the same as so many others.</p>
<p>To me, these are the thoughts behind GitHub's acquisition.
And yes, they are scary.</p>
 ]]></summary>

                <updated>2018-06-05T00:00:00+00:00</updated>
            </entry>
                                <entry>
                <title><![CDATA[ Liskov and type safety ]]></title>

                <link rel="alternate" href="https://stitcher.io/blog/liskov-and-type-safety"/>

                <id>https://www.stitcher.io/blog/liskov-and-type-safety</id>

                <author>
                    <name><![CDATA[ Brent Roose ]]></name>
                </author>

                <summary type="html"><![CDATA[ <p>I've been fascinated by type systems in programming languages for a while now.
Recently, something clicked for me about inheritance and types.</p>
<p>Not only did it clarify type variance,
I also understood what the Liskov substitution principle actually is about.
Today, I'm going to share these insights with you.</p>
<p><div class="ad-container">
    <script async type="text/javascript" src="//cdn.carbonads.com/carbon.js?serve=CK7ICK3W&placement=stitcherio" id="_carbonads_js"></script>
</div>
</p>
<h2 id="prerequisites"><a href="#prerequisites" class="heading-anchor">#</a> Prerequisites</h2>
<p>I'll be writing pseudo code to make clear what I'm talking about.
So let's make sure you know what the syntax of this pseudo code will be.</p>
<p>A function is defined like so.</p>
<pre><code class="language-txt"><span class="hljs-highlight  prop">foo</span>(<span class="hljs-highlight  type">T</span>) : <span class="hljs-highlight  type">void</span>

<span class="hljs-highlight  prop">bar</span>(<span class="hljs-highlight  type">S</span>) : <span class="hljs-highlight  type">T</span></code></pre>
<p>First comes the function name, second the argument list with types as parameters,
and finally the return type.
When a function returns nothing, it's indicated as <code>void</code>.</p>
<p>A function can extend — overwrite — another function, as can types.
Inheritance is defined like so.</p>
<pre><code class="language-txt"><span class="hljs-highlight  prop">bar</span> &gt; <span class="hljs-highlight  prop">baz</span>(<span class="hljs-highlight  type">S</span>) : <span class="hljs-highlight  type">T</span>

<span class="hljs-highlight  type">T</span> &gt; <span class="hljs-highlight  type">S</span></code></pre>
<p>In this example, <code>baz</code> extends <code>bar</code>, and <code>S</code> is a subtype of <code>T</code>.
The last step is being able to invoke the function, which is done like so.</p>
<pre><code class="language-txt"><span class="hljs-highlight  prop">foo</span>(<span class="hljs-highlight  type">T</span>)

a = <span class="hljs-highlight  prop">bar</span>(<span class="hljs-highlight  type">S</span>)</code></pre>
<p>Once again: it's all pseudo code and I'll use it to show what types are,
how they can and cannot be defined in combination with inheritance, and
how this results in type-safe systems.</p>
<h2 id="liskov-substitution-principle"><a href="#liskov-substitution-principle" class="heading-anchor">#</a> Liskov substitution principle</h2>
<p>Let's look at the official definition of the LSP.</p>
<blockquote>
<p>If <code>S</code> is a subtype of <code>T</code>, then objects of type <code>T</code> may be replaced with objects of type <code>S</code>
<br>—<a target="_blank" href="https://en.wikipedia.org/wiki/Liskov_substitution_principle">Wikipedia</a></p>
</blockquote>
<p>Instead of using <code>S</code> and <code>T</code>, I'll be using more concrete types in my examples.</p>
<pre><code class="language-txt"><span class="hljs-highlight  type">Organism</span> &gt; <span class="hljs-highlight  type">Animal</span> &gt; <span class="hljs-highlight  type">Cat</span></code></pre>
<p>These are the three types we'll be working with.
Liskov tells us that wherever objects of type <code>Organism</code> appear in our code,
they must be replaceable by subtypes like <code>Animal</code> or <code>Cat</code>.</p>
<p>Let's say there's a function used to <code>feed</code> an <code>Organism</code>.</p>
<pre><code class="language-txt"><span class="hljs-highlight  prop">feed</span>(<span class="hljs-highlight  type">Organism</span>) : <span class="hljs-highlight  type">void</span></code></pre>
<p>It must be possible to call it like so:</p>
<pre><code class="language-txt"><span class="hljs-highlight  prop">feed</span>(<span class="hljs-highlight  type">Animal</span>)
<span class="hljs-highlight  prop">feed</span>(<span class="hljs-highlight  type">Cat</span>)</code></pre>
<p>Try to think of function definition as a contract, a promise; for the programmer to be used.
The contract states:</p>
<blockquote>
<p>Given an object of the type <code>Organism</code>,
I'll be able to execute and <code>feed</code> that <code>Organism</code>.</p>
</blockquote>
<p>Because <code>Animal</code> and <code>Cat</code> are subtypes of <code>Organism</code>,
the LSP states that this function should also work when one of these subtypes are used.</p>
<p>This brings us to one of the key properties of inheritance.
If Liskov states that objects of type <code>Organism</code> must be replaceable by objects of type <code>Animal</code>,
it means that <code>Animal</code> may not change the expectations we have of <code>Organism</code>.
<code>Animal</code> may extend <code>Organism</code>, meaning it may <em>add</em> functionality,
but <code>Animal</code> may not change the certainties given by <code>Organism</code>.</p>
<p>This is where many OO programmers make mistakes.
They see inheritance more like
"re-using parts of the parent type, and overriding other parts in the sub-type",
rather than extending the behaviour defined by its parent.
This is what the LSP guards against.</p>
<h2 id="benefits-of-the-lsp"><a href="#benefits-of-the-lsp" class="heading-anchor">#</a> Benefits of the LSP</h2>
<p>Before exploring the details of type safety with inheritance,
we should stop and ask ourselves what's to gain by following this principle.
I've explained what Barbara Liskov meant when she defined it,
but why is it necessary? Is it bad to break it?</p>
<p>I mentioned the idea of a "promise" or "contract".
If a function or type makes a promise about what it can do,
we should be able to blindly trust it.
If we can't rely on function <code>feed</code> being able to feed all <code>Organisms</code>,
there's a piece of undocumented behaviour in our code.</p>
<p>If we know that the LSP is respected, there's a level of security.
We may trust that this function will do the thing we expect;
even without looking at the implementation of that function.
When the contract is breached, however; there's a chance of runtime errors
that both the programmer and the compiler could not –or did not– anticipate for.</p>
<p>In the above examples, we looked at respecting the LSP form the developer's point of view.
There's another party involved though: a language's type system.
A language can be designed in a type-safe way or not.
Types are the building blocks to mathematically proof whether a function will do the thing you want it to do.</p>
<p>So, next up; we're going to look at the other side: type-safety on the language level.</p>
<h2 id="type-safety"><a href="#type-safety" class="heading-anchor">#</a> Type safety</h2>
<p>To understand how type safety can –or cannot– be guaranteed by a language,
let's look at these functions.</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-highlight  prop">take_care</span>(<span class="hljs-highlight  type">Animal</span>) : <span class="hljs-highlight  type">void</span>

<span class="hljs-highlight  prop">take_care</span> &gt; <span class="hljs-highlight  prop">feed</span>(<span class="hljs-highlight  type">Animal</span>) : <span class="hljs-highlight  type">void</span></code></pre>
<p>As you can see, <code>feed</code> extends <code>take_care</code> and follows its parent signature one-to-one.
Some programming languages don't allow children to change the type signature of their parent.
This is called type invariance.</p>
<p>It's the easiest approach to handle type safety with inheritance,
as types are not allowed to <em>vary</em> when inheriting.</p>
<p>But when you think back at how our example types are related to each other,
we know that <code>Cat</code> extends <code>Animal</code>.
Let's see whether the following is possible.</p>
<pre><code class="language-txt"><span class="hljs-highlight  prop">take_care</span>(<span class="hljs-highlight  type">Animal</span>) : <span class="hljs-highlight  type">void</span>

<span class="hljs-highlight  prop">take_care</span> &gt; <span class="hljs-highlight  prop">feed</span>(<span class="hljs-highlight  type">Cat</span>) : <span class="hljs-highlight  type">void</span></code></pre>
<p>The LSP only defines rules about objects, so on first sight, the function definition itself doesn't break any rules.
The real question is: does this function allow for proper use of the LSP when it's called?</p>
<p>We know that <code>feed</code> extends from <code>take_care</code>, and thus provides at least the same contract as its parent.
We also know that <code>take_care</code> allows <code>Animal</code> and its sub-types to be used.
So <code>feed</code> should also be able to take an <code>Animal</code> type.</p>
<pre><code class="language-txt"><span class="hljs-highlight  prop">feed</span>(<span class="hljs-highlight  type">Animal</span>)

<span class="hljs-highlight  error">// Type error</span></code></pre>
<p>Unfortunately, this is not the case. There's a type error occurring.
Can you see what we're doing here?
Instead of applying the LSP only to the parameters of a function,
we're also applying the same principles to the function itself.</p>
<blockquote>
<p>Wherever an invocation of <code>take_care</code> is used, we must be able to replace it
with an invocation of <code>feed</code>.</p>
</blockquote>
<p>This especially makes sense in an OO language where a function is no standalone entity in your code,
but rather part of a class, which represents a type itself.</p>
<p>To keep a system type-safe, it may not allow children to make the parameter types more specific.
This breaks the promises given by the parent.</p>
<p>However, take a look at the following definition:</p>
<pre><code class="language-txt"><span class="hljs-highlight  prop">take_care</span>(<span class="hljs-highlight  type">Animal</span>) : <span class="hljs-highlight  type">void</span>

<span class="hljs-highlight  prop">take_care</span> &gt; <span class="hljs-highlight  prop">feed</span>(<span class="hljs-highlight  type">Organism</span>) : <span class="hljs-highlight  type">void</span></code></pre>
<p>Does this definition ensures type safety?
It may seem backwards at first, but it does.
<code>feed</code> still follows the contract specified by <code>take_care</code>.
It can take <code>Animal</code> as an argument, and work just fine.</p>
<p>In this case, <code>feed</code> widens the parameter types allowed,
while still respecting the parent's contract.
This is called contravariance.
Types in argument lists should be contravariant for a type system to be safe.</p>
<h2 id="return-type-variance"><a href="#return-type-variance" class="heading-anchor">#</a> Return type variance</h2>
<p>Moving on to return types.
There are a few more types we'll have to define, in order for the examples to make sense.
I'm sorry in advance for the choice of words!</p>
<pre><code class="language-txt"><span class="hljs-highlight  type">Excretion &gt; <span class="hljs-highlight  type">Poop</span></code></pre>
<p>And these are the functions we're working with.</p>
<pre><code class="language-txt"><span class="hljs-highlight  prop">take_care</span>(<span class="hljs-highlight  type">Animal</span>) : <span class="hljs-highlight  type">Excretion</span>

<span class="hljs-highlight  prop">take_care</span> &gt; <span class="hljs-highlight  prop">feed</span>(<span class="hljs-highlight  type">Animal</span>) : <span class="hljs-highlight  type">Poop</span></code></pre>
<p>The question now: is the overridden return type safe?
In contrast to the contravariance for the argument list,
this example actually is type safe!</p>
<p>The parent definition <code>take_care</code> tells us that this function will always return
an object of type <code>Excretion</code>.</p>
<pre><code class="language-txt">excretion = <span class="hljs-highlight  prop">take_care</span>(<span class="hljs-highlight  type">Animal</span>)

excretion = <span class="hljs-highlight  prop">feed</span>(<span class="hljs-highlight  type">Animal</span>)</code></pre>
<p>Because <code>Poop</code> is a subtype of <code>Excretion</code>, we can be a 100% sure that whatever <code>feed</code> returns,
it will be within the category of <code>Excretion</code>.</p>
<p>You see the opposite rule applies for return types compared to function parameters.
In the case of return types, we're calling it covariance, or covariant types.</p>
<h2 id="real-life-impact"><a href="#real-life-impact" class="heading-anchor">#</a> Real-life impact</h2>
<p>There' no guarantee that a type-safe language will always write a bug-free program.
We've seen that the language design only carries half the responsibility of respecting the LSP.
The other half is the programmer's task.</p>
<p>Languages differ though, all have their own type system,
and each will have a different level of type safety.</p>
<p>Eiffel, for example, allows for parameter covariance.
By now you know this means there's an area of wrong behaviour possible that's undetectable by the compiler.
Hence there's the possibility of runtime errors.</p>
<p>PHP allows for constructors of child classes to have another signature,
while keeping an invariant type system for all other functions.
As with many things PHP, this inconsistency increases the confusion for developers.</p>
<p>Some languages like Java, C# and Rust have a concept that I didn't cover today: generics.
Type variance also plays a big role there.
That topic is out of scope for this blog post, but I might cover it in the future.</p>
<p>With all these differences, there's one thing to keep in mind.
The safety of a type system doesn't mean a language is better or worse.
I think it's fair to say that some cases would benefit from a very strong type system,
while others need the exact opposite.
The key takeaway is that every programmer
should learn more than just the concepts and paradigms of the languages they are used to the most.
A broadened view will be beneficial, now and in the future.</p>
<p>So what's your opinion on type safety?
If you're up for it, I'd love to talk about it even more:
you can reach me on <a target="_blank" href="https://twitter.com/brendt_gd">Twitter</a> or <a href="mailto:brendt@stitcher.io">e-mail</a>.</p>
 ]]></summary>

                <updated>2018-05-19T00:00:00+00:00</updated>
            </entry>
                                <entry>
                <title><![CDATA[ Dependency injection for beginners ]]></title>

                <link rel="alternate" href="https://stitcher.io/blog/dependency-injection-for-beginners"/>

                <id>https://www.stitcher.io/blog/dependency-injection-for-beginners</id>

                <author>
                    <name><![CDATA[ Brent Roose ]]></name>
                </author>

                <summary type="html"><![CDATA[ <p>You're in the car business,
your job is to make cars on-demand.
The object-oriented programmer in you says:
"no problem, I'll make a blueprint that I can use to make as many cars as I want!".</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Car</span>
</span>{
    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">drive</span><span class="hljs-params">()</span>
    </span>{
        <span class="hljs-comment">// ...</span>
    }
}</code></pre>
<p><div class="ad-container">
    <script async type="text/javascript" src="//cdn.carbonads.com/carbon.js?serve=CK7ICK3W&placement=stitcherio" id="_carbonads_js"></script>
</div>
</p>
<p>For this car to work, it needs an engine and wheels.
Now, there are several approaches to achieve that goal.
You could, for example, do the following:</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Car</span>
</span>{
    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span><span class="hljs-params">()</span>
    </span>{
        <span class="hljs-keyword">$this</span>-&gt;engine = <span class="hljs-keyword">new</span> Engine();
        
        <span class="hljs-keyword">$this</span>-&gt;wheels = [
            <span class="hljs-keyword">new</span> Wheel(), <span class="hljs-keyword">new</span> Wheel(), 
            <span class="hljs-keyword">new</span> Wheel(), <span class="hljs-keyword">new</span> Wheel(),
        ];
    }
    
    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">drive</span><span class="hljs-params">()</span> </span>{ ... }
}</code></pre>
<p>There's the blueprint for every car you'll make!
Next up, your boss comes to you and says there's a new client and he wants an electric car.</p>
<p>So you end up doing this.</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ElectricCar</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Car</span>
</span>{
    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span><span class="hljs-params">()</span>
    </span>{
        <span class="hljs-keyword">parent</span>::__construct();
        
        <span class="hljs-keyword">$this</span>-&gt;engine = <span class="hljs-keyword">new</span> ElectricEngine();
    }
}</code></pre>
<p>"Beautifully solved"—you think.
There's of course that redundant normal engine that's created when calling <code>parent::__construct()</code>,
but at least you could re-use the wheels!</p>
<p>I think you can see where this is going.
The next client wants a car with some fancy wheel covers,
another one would like a diesel engine with those same wheel covers,
another one requests a race car,
and the last one wants a self driving car.
<br>
Oh—there also was a client who wanted to buy an engine to build a boat with himself,
but you told your boss that wouldn't be possible.</p>
<p>After a while, there's a ton of blueprints in your office,
each describing a very specific variation of a car.
You started with a neatly ordered pile of blueprints.
But after a while you had to group them in different folders and boxes,
because it was taking too long to find the blueprint you're looking for.</p>
<p>Object oriented programmers often fall into this trap of inheritance,
ending in a completely messed up codebase.
So let's look at a better approach.
Maybe you've heard about "composition over inheritance" before?</p>
<blockquote>
<p>Composition over inheritance is the principle that classes should achieve polymorphic behavior
and code reuse by their composition rather than inheritance from a base or parent class—<a target="_blank" href="https://en.wikipedia.org/wiki/Composition_over_inheritance">Wikipedia</a></p>
</blockquote>
<p>That's a lot of buzzwords. Let's just look at our car example.
The principle states that <code>Car</code> should achieve its polymorphic behaviour
by being composed of other classes.</p>
<p>The word <em>polymorphic</em> literally means "many shapes"
and implies that <code>Car</code> should be able to do <code>drive</code> in many different ways,
depending on the context it's used in.</p>
<p>With <em>code reuse</em>, we're trying to make code reusable;
so that we don't end up with tens of classes doing almost exactly the same thing.</p>
<h2 id="what-does-this-have-to-do-with-dependency-injection?"><a href="#what-does-this-have-to-do-with-dependency-injection?" class="heading-anchor">#</a> What does this have to do with dependency injection?</h2>
<p>Instead of making a unique blueprint that describes every single possible variation of a car,
we'd rather have <code>Car</code> do one thing, and do it good: drive.</p>
<p>This means it shouldn't be the car's concern how its engine is built,
what wheels it has attached.
It should only know the following thing:</p>
<blockquote>
<p>Given a working engine and four wheels, I'm able to drive!</p>
</blockquote>
<p>We could say that in order for <code>Car</code> to work, it <em>needs</em> an engine and wheels.
In other words: <code>Car</code> depends on <code>Engine</code> and a collection of <code>Wheels</code>.</p>
<p>Those dependencies should be <em>given</em> to the car. Or, said otherwise: injected.</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Car</span>
</span>{
    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span><span class="hljs-params">(
        Engine $engine, 
        array $wheels
    )</span> </span>{
        <span class="hljs-keyword">$this</span>-&gt;engine = $engine;
        <span class="hljs-keyword">$this</span>-&gt;wheels = $wheels;
    }
    
    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">drive</span><span class="hljs-params">()</span>
    </span>{
        <span class="hljs-keyword">$this</span>-&gt;engine-&gt;connectTo(<span class="hljs-keyword">$this</span>-&gt;wheels);
        
        <span class="hljs-keyword">$this</span>-&gt;engine-&gt;start();
        
        <span class="hljs-keyword">$this</span>-&gt;engine-&gt;accelerate();
    }
}</code></pre>
<p>Would you like a race car? No problem!</p>
<pre><code class="language-php hljs php" data-lang="php">$raceCar = <span class="hljs-keyword">new</span> Car(<span class="hljs-keyword">new</span> TurboEngine(), [
    <span class="hljs-keyword">new</span> RacingWheel(), <span class="hljs-keyword">new</span> RacingWheel(),
    <span class="hljs-keyword">new</span> RacingWheel(), <span class="hljs-keyword">new</span> RacingWheel(),
]);</code></pre>
<p>That client who wanted special wheel covers? You've got that covered!</p>
<pre><code class="language-php hljs php" data-lang="php">$smugCar = <span class="hljs-keyword">new</span> Car(<span class="hljs-keyword">new</span> Engine(), [
    <span class="hljs-keyword">new</span> FancyWheel(), <span class="hljs-keyword">new</span> FancyWheel(),
    <span class="hljs-keyword">new</span> FancyWheel(), <span class="hljs-keyword">new</span> FancyWheel(),
]);</code></pre>
<p>You've got <em>a lot</em> more flexibility now!</p>
<p>Dependency injection is the idea of giving a class its requirements from the outside,
instead of having that class being responsible for them itself.</p>
<h2 id="what-dependency-injection-is-not"><a href="#what-dependency-injection-is-not" class="heading-anchor">#</a> What dependency injection is not</h2>
<p>Built upon this simple principle, there are frameworks and tools that take it to the next level.
You might, for example, have heard about the following things before.</p>
<h3 id="shared-dependencies"><a href="#shared-dependencies" class="heading-anchor">#</a> Shared dependencies</h3>
<p>One of the most beneficial side effects of injecting dependencies,
is that the outside context can control them.
This means that you can give the same instance of a class
to several others that have a dependency on that class.</p>
<p>Shared- or reusable dependencies are the ones most often getting the label "dependency injection".
Though it's certainly a very good practice,
sharing a dependency is not actually the core meaning of dependency injection.</p>
<h3 id="the-dependency-container"><a href="#the-dependency-container" class="heading-anchor">#</a> The dependency container</h3>
<p>Sometimes it's also called "inversion of control" container, though that's not an accurate name.</p>
<p>Whatever the exact name, the container is a set of class definitions.
It's a big box that knows how objects in your application can be constructed with other dependencies.
While such a container definitely has a lot of use cases, it's not necessary to do dependency injection.</p>
<h3 id="auto-wiring"><a href="#auto-wiring" class="heading-anchor">#</a> Auto wiring</h3>
<p>To give developers even more flexibility, some containers allow
for smart, automatically determined, class definitions.
This means you don't have to manually describe how every class should be constructed.
These containers will scan your code, and determine which dependencies are needed
by looking at type hints and doc blocks.</p>
<p>A lot of magic happens here, but auto wiring can be a useful tool for rapid application development.</p>
<h3 id="service-location"><a href="#service-location" class="heading-anchor">#</a> Service location</h3>
<p>Instead of injecting dependencies into a class,
there are some tools and frameworks that allow a class to ask the container
to "give it an instance of another class".</p>
<p>This might seem beneficial at first,
because our class doesn't need to know how to construct a certain dependency anymore.
However: by allowing a class to ask for dependencies on its own account,
we're back to square one.</p>
<p>For service location to work, our class needs to know about the systems on the outside.
It doesn't differ a lot from calling <code>new</code> in the class itself.
This idea is actually the opposite of what dependency injection tries to achieve.
It's a misuse of what the container is meant to do.</p>
<h3 id="inject-everything"><a href="#inject-everything" class="heading-anchor">#</a> Inject everything</h3>
<p>As it goes in real-life projects, you'll notice that dependency injection
in not <em>always</em> the solution for your problem.</p>
<p>It's important to realise that there are limits to the benefits of everything.
You should always be alert that you're not taking this to the extreme,
as there are valid cases in which a pragmatic approach <em>is</em> the better solution.</p>
<h2 id="in-closing"><a href="#in-closing" class="heading-anchor">#</a> In closing</h2>
<p>The core idea behind dependency injection is very simple,
yet allows for better maintainable, testable and decoupled code to be written.</p>
<p>Because it's such a powerful pattern,
it's only natural that lots of tools emerge around it.
I believe it's a good thing to first understand the underlying principle,
before using the tools built upon it.
And I hope this blog post has helped with that.</p>
<p>If there are any thoughts coming to your mind that you want to share,
feel free to reach out to me on via <a target="_blank" href="https://twitter.com/brendt_gd">Twitter</a> or <a href="mailto:brendt@stitcher.io">e-mail</a>.</p>
<p>Also special thanks to <a target="_blank" href="https://www.reddit.com/user/ImSuperObjective2">/u/ImSuperObjective2</a> on Reddit
and my colleague <a target="_blank" href="https://twitter.com/sebdedeyne">Sebastian</a> for proof reading this post.</p>
 ]]></summary>

                <updated>2018-04-30T00:00:00+00:00</updated>
            </entry>
                                <entry>
                <title><![CDATA[ PHPStorm performance issues on OSX ]]></title>

                <link rel="alternate" href="https://stitcher.io/blog/phpstorm-performance-issues-on-osx"/>

                <id>https://www.stitcher.io/blog/phpstorm-performance-issues-on-osx</id>

                <author>
                    <name><![CDATA[ Brent Roose ]]></name>
                </author>

                <summary type="html"><![CDATA[ <p>Are you using a fancy Mac with the latest and greatest hardware,
yet still having performance issues with PHPStorm?
I've been struggling with this the past few months.</p>
<p>It turns out, the solution might be rather unexpected.
Instead of disabling plugins, inspections and what not;
it seems like there's an issue with font rendering in the JRE for Mac.</p>
<p><div class="ad-container">
    <script async type="text/javascript" src="//cdn.carbonads.com/carbon.js?serve=CK7ICK3W&placement=stitcherio" id="_carbonads_js"></script>
</div>
</p>
<p>This means that on certain resolutions, for certain fonts and for certain kinds of antialiasing,
PHPStorm will need <em>a lot</em> of CPU power just to render fonts.
So how to fix it? There are a few options.</p>
<ul>
<li>Use another font. I was using Ubuntu Mono, and it turns out it requires quite a lot of CPU.
I've switched to Monaco instead.</li>
<li>Disabling <code>Subpixel</code> antialiasing. Go to <code>Preferences > Appearance & Behavior > Appearance</code>
to configure antialiasing in your editor to <code>Greyscale</code> instead.
Your fonts won't look as good, but you'll notice a huge performance improvement.</li>
<li>Wait for JetBrains to find a fix. 2018.2 might fix some things,
but the real solution will take a while. There's an active discussion on the topic <a target="_blank" href="https://youtrack.jetbrains.com/issue/JRE-526#u=1466510431624">here</a>.</li>
</ul>
<p>If you're looking for even more performance improvements that can be made in PHPStorm,
take a look over <a href="/blog/phpstorm-performance">here</a>.</p>
 ]]></summary>

                <updated>2018-04-25T00:00:00+00:00</updated>
            </entry>
                                <entry>
                <title><![CDATA[ What PHP can be ]]></title>

                <link rel="alternate" href="https://stitcher.io/blog/what-php-can-be"/>

                <id>https://www.stitcher.io/blog/what-php-can-be</id>

                <author>
                    <name><![CDATA[ Brent Roose ]]></name>
                </author>

                <summary type="html"><![CDATA[ <p>Have you ever wondered how your life as a PHP developer would be different
if that <em>one</em> feature you want was added?
I've made the thought experiment quite a few times already, and came to surprising conclusions.</p>
<p>Let's take, for example, the debate about strong types in PHP.
A lot of people, including myself, would like a better type system.
Strong types in PHP would definitely have an impact on my daily work.
Not just strong types, I also want generics, better variance and variable types.
Improvements to PHP's type system in general would have quite the impact on my programming life.</p>
<p><div class="ad-container">
    <script async type="text/javascript" src="//cdn.carbonads.com/carbon.js?serve=CK7ICK3W&placement=stitcherio" id="_carbonads_js"></script>
</div>
</p>
<p>So what's stopping us from reaching a solution?</p>
<h2 id="type-theory"><a href="#type-theory" class="heading-anchor">#</a> Type theory</h2>
<p>Not everyone agrees on the vocabulary used when talking about type systems.
So let's clarify a few terms in the way that I will use them here.</p>
<p><strong>Strong or weak types</strong> define whether a variable can change its type after it's defined.
A simple example: say there's a variable <code>$a = 'test';</code>, which is a string;
you are able to re-assign that variable to another type, for example <code>$a = 1;</code>, an integer.</p>
<p>PHP is a weakly typed language, and I can illustrate this with a more real-life example:</p>
<pre><code class="language-php hljs php" data-lang="php">$id = <span class="hljs-string">'1'</span>; <span class="hljs-comment">// An ID retrieved as a URL parameter.</span>

<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">find</span><span class="hljs-params">(int $id)</span>: <span class="hljs-title">Model</span>
</span>{
    <span class="hljs-comment">// ...</span>
}


find($id);</code></pre>
<p>You might think that in modern PHP, you can avoid these problems with strict types, but that's not completely true.
Declaring strict types prevents other types being passed into a function,
but you can still change the value of the variable in the function itself.</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-keyword">declare</span>(strict_types=<span class="hljs-number">1</span>);

<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">find</span><span class="hljs-params">(int $id)</span>: <span class="hljs-title">Model</span>
</span>{
    $id = <span class="hljs-string">''</span> . $id;

    <span class="hljs-comment">// This is perfectly allowed in PHP: `$id` is a string now.</span>
}

find(<span class="hljs-string">'1'</span>); <span class="hljs-comment">// This would trigger a TypeError.</span>

find(<span class="hljs-number">1</span>); <span class="hljs-comment">// This would be fine.</span></code></pre>
<p>Like I said: PHP's type system is weak.
Type hints only ensure a variable's type at that point in time,
without a guarantee about any future value that variable might have.</p>
<p>Am I saying that strong types are better than weak ones? No.
But there's an interesting property to strong types, they come with a few guarantees.
If a variable has a type that's unchangeable, a whole range of unexpected behaviour simply cannot happen anymore.</p>
<p>You see, it's mathematically provable that if a strongly typed program compiles,
it's impossible for that program to have a range of bugs which can exist in weakly typed languages.
In other words, strong types give the programmer a stronger insurance that the code actually behaves how it's supposed to.</p>
<p>This doesn't mean that a strongly typed language cannot have bugs!
You're perfectly able to write a buggy implementation.
But when a strongly typed program compiles successfully,
you're sure a certain set of bugs and errors can't occur in that program.</p>
<p>If you want to further explore the topic on strong and weak types,
I'd recommend starting with <a target="_blank" href="https://www.destroyallsoftware.com/talks/ideology">this video</a> by Gary Bernhardt.
Not only does it go further into detail on types,
Gary also discusses an important mindset in the whole types debate.</p>
<h3 id="when-types-are-checked"><a href="#when-types-are-checked" class="heading-anchor">#</a> When types are checked</h3>
<p>We talked about <strong>strong</strong> and <strong>weak</strong> types, what about <strong>static</strong> and <strong>dynamic</strong> types?
– This is where it starts to get truly interesting.</p>
<p>As you're probably aware, PHP is an interpreted language.
This means a PHP script is compiled at runtime.
When you send a request to a server running PHP,
it will take those plain <code>.php</code> files, and parse the text in it to something the processor can execute.</p>
<p>This is one of PHP's strong points by the way: the simplicity on how you can write a script,
refresh your webpage and everything is there.
That's a big difference compared to a language that has to be compiled before it can be run.</p>
<p>There is a downside though: performance.
And it's not hard to pinpoint this down: the more tasks there are to do at runtime,
the more impact there is on performance.
One of those many tasks the PHP engine has to take care of? Type checking.</p>
<p>Because PHP checks the type of variables at runtime,
it is often described as a <strong>dynamically typed</strong> language.
A <strong>statically typed</strong> language on the other hand,
will have all its type checks done before the code is executed.</p>
<blockquote>
<p>Hang on – I can hear you say – what does this have to do with what PHP can be?</p>
<p>—We'll get to that.</p>
</blockquote>
<h2 id="what-this-means-for-php"><a href="#what-this-means-for-php" class="heading-anchor">#</a> What this means for PHP</h2>
<p>Now we know what we're talking about, let's take a look at PHP's type system today.</p>
<p>I hope that after the theory, it's clear to you that PHP is a <strong>dynamic, weakly typed</strong> language.
And <strong>there's nothing wrong with that</strong>!</p>
<p>On the other hand, it's interesting to note that many people are asking for a better type system in PHP.
This doesn't mean we understand the implications of such a type system on PHP,
yet but many of us feel that <em>natural urge</em> for a better type system.
I'm sure that a lot of developers can point to real-life,
daily situations where a better type system would actually benefit them.</p>
<p>To give one obvious example: the question for generics.
Whether it is to ensure an array only contains one type of elements
or to improve ORM abstractions, lots of people are asking for generics in PHP.</p>
<p>The question than becomes: is creating a more complicated type system feasible with PHP's current type paradigm?
And the answer is, in part, yes—for sure.
There are parts that could be improved in the current, dynamic weak type system.</p>
<p>Type hints for one, added in PHP 7.0 and 7.1 are useful to many PHP developers;
Levi Morrison is working on <a target="_blank" href="https://github.com/morrisonlevi/php-src/tree/generic_traits">generics in traits</a>;
also, there are very active discussions about the type system on the internals mailing list.</p>
<p><strong>However</strong>: we're missing a very important point.
As long as we're striving to improve PHP's runtime type system,
we'll always be dealing with the huge performance cost it will take.</p>
<h2 id="the-benefits-of-a-static-type-system"><a href="#the-benefits-of-a-static-type-system" class="heading-anchor">#</a> The benefits of a static type system</h2>
<p>This is what Rasmus Lerdorf has to say on the topic.</p>
<blockquote>
<p>Now if the RFC was a plan for baking a compile-time static analysis engine
into PHP itself, that would be interesting. But that is a massive project.</p>
<p>— <a target="_blank" href="https://externals.io/message/101477#101592">Rasmus</a></p>
</blockquote>
<p>Imagine the possibilities when you can write PHP code that can be statically type checked
before running the code. Tools like PHPStan and Psalm already do a lot of static analysis,
but in my opinion it could go a step further. Say we could do this.</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">List</span>&lt;T&gt;
</span>{
    <span class="hljs-keyword">private</span> <span class="hljs-keyword">array</span> $list;
    
    <span class="hljs-comment">// ...</span>
}</code></pre>
<p>What if this was valid PHP code?
And what if the runtime engine would just plain ignore it,
and a part of PHP engine could do all the type checks, before runtime?</p>
<p>That's –in my opinion– a better solution than standalone tools which rely on docblocks
and can't benefit from the core PHP engine, as they are written, in the case of Psalm and PHPStan, in PHP.</p>
<p>Don't get me wrong: tools like these are the first important step
towards a bigger goal. I just think we shouldn't stop here.</p>
<p>The need for a better type system is clear.
Lots of programmers experience a natural longing for something more than what's possible now.
This doesn't only happen in the PHP community, look at modern languages like Rust,
or supersets like TypeScript for JavaScript.</p>
<p>So maybe the answer for PHP lies into baked-in features in the core,
maybe it lies in a superset that compiles to PHP with extra type checking.
That last one by the way, has already been tried: Hack on HHVM.</p>
<p>There even is a third option, a question every programmer should ask themselves from time to time.
Should we want PHP to change dramatically to match our needs,
or should we change our frame of reference, and maybe look at other languages that might fit those needs better?</p>
<p>There's no shame in using another tool for the job, if that tools fit your needs better.
And after all, isn't a programming language just that? A tool.</p>
 ]]></summary>

                <updated>2018-04-15T00:00:00+00:00</updated>
            </entry>
                                <entry>
                <title><![CDATA[ PHPStorm tips for power users ]]></title>

                <link rel="alternate" href="https://stitcher.io/blog/phpstorm-tips-for-power-users"/>

                <id>https://www.stitcher.io/blog/phpstorm-tips-for-power-users</id>

                <author>
                    <name><![CDATA[ Brent Roose ]]></name>
                </author>

                <summary type="html"><![CDATA[ <p>A selection of less-known-yet-powerful features of PHPStorm.</p>
<p><div class="ad-container">
    <script async type="text/javascript" src="//cdn.carbonads.com/carbon.js?serve=CK7ICK3W&placement=stitcherio" id="_carbonads_js"></script>
</div>
</p>
<h2 id="pane-modes"><a href="#pane-modes" class="heading-anchor">#</a> Pane modes</h2>
<p>Every pane in PHPStorm has several modes and can be configured either by hand or via key bindings.</p>
<ul>
<li>
<code>docked</code>: makes a pane not overlap with other panes or the code screen.</li>
<li>
<code>pinned</code>: automatically hides a pane when not pinned.</li>
<li>
<code>floating</code>: makes the pane float.</li>
<li>
<code>windowed</code>: makes the pane a full-blown window.</li>
<li>
<code>split</code>: to allow multiple panes in one area.</li>
</ul>
<p>Working with non-pinned panes will allow for a much cleaner editor view.
Binding certain panes to a key combination will show them at will.</p>
<p>
    <img src="/resources/img/static/phpstorm-power-users/panes.gif"/>
</p>
<h2 id="auto-imports"><a href="#auto-imports" class="heading-anchor">#</a> Auto-imports</h2>
<p>By default, PHPStorm will only auto-import namespaces if you're already in a namespaced file.
Auto imports can be configured to also work in normal PHP files
in <code>Settings > Editor > General > Auto Import</code>.</p>
<h2 id="code-templates"><a href="#code-templates" class="heading-anchor">#</a> Code templates</h2>
<p>You can change almost every template of auto-generated code in <code>Settings > Editor > File and Code Templates</code>
For example: generate getters and setters without docblocks, generate test functions in another format and others.</p>
<p><img src="/resources/img/blog/phpstorm-power-users/code-templates.png" srcset="/resources/img/blog/phpstorm-power-users/code-templates-1967x1296.png 1967w, /resources/img/blog/phpstorm-power-users/code-templates-2540x1674.png 2540w, /resources/img/blog/phpstorm-power-users/code-templates-1606x1058.png 1606w, /resources/img/blog/phpstorm-power-users/code-templates-1135x748.png 1135w, /resources/img/blog/phpstorm-power-users/code-templates-2271x1496.png 2271w" sizes="" alt="-">-</img></p>
<h2 id="string-actions"><a href="#string-actions" class="heading-anchor">#</a> String actions</h2>
<p>When pressing <code>alt + enter</code> (<code>Show Intention Actions</code>) on a string, you'll get multiple useful actions.
Things like <code>replace quotes</code> to toggle between single- and double quotes,
<code>split string</code> to split the string, and more.</p>
<p>
    <img src="/resources/img/static/phpstorm-power-users/string-actions.gif"/>
</p>
<h2 id="copy-paths"><a href="#copy-paths" class="heading-anchor">#</a> Copy paths</h2>
<p>Two very useful commands:</p>
<ul>
<li>
<code>Copy Paths</code> to copy the full path to the current file.</li>
<li>
<code>Copy Reference</code> to copy the relative project path and line number to the current file.</li>
</ul>
<p>This "current file" can be the file you're editing,
but could also be the selected file in the tree view or navigation bar.</p>
<h2 id="commands-to-toggle-options"><a href="#commands-to-toggle-options" class="heading-anchor">#</a> Commands to toggle options</h2>
<p>Instead of opening the settings to toggle options,
there are a lot of toggles you can manage from the command palette.
For example: show or hide the tabs bar.</p>
<p>
    <img src="/resources/img/static/phpstorm-power-users/tab-placement.gif"/>
</p>
<p>You can open the command palette with <code>⌘ ⇧ A</code> on the default Mac keymap.
If you want to lookup the keybinding on your system: the command is called <code>Find Action</code>.</p>
<h2 id="custom-jvm-options"><a href="#custom-jvm-options" class="heading-anchor">#</a> Custom JVM options</h2>
<p>PHPStorm runs on Java, and there's a file in which you can specify extra options for the JVM
to optimise performance. I've written about those options <a href="/blog/phpstorm-performance">here</a>.</p>
<h2 id="distraction-free-mode"><a href="#distraction-free-mode" class="heading-anchor">#</a> Distraction free mode</h2>
<p>Distraction free mode will hide all panes by default,
but you can easily bring them back via the command palette or key bindings.</p>
<p>Besides this "no clutter by default", your code will also align more centered, which can be a much more pleasant reading experience.
The width of this centered code view is configured in <code>Settings > Editor > Code Style > Hard wrap at</code>.</p>
<p>
    <img src="/resources/img/static/phpstorm-power-users/distraction-free.gif"/>
</p>
<h2 id="color-inspection"><a href="#color-inspection" class="heading-anchor">#</a> Color inspection</h2>
<p>Do you want to know why a word is highlighted or change the colouring?
There's a command called <code>Jump to Colors and Fonts</code> which will allow you to edit
the color of your current scheme, for that entry.</p>
<p>
    <img src="/resources/img/static/phpstorm-power-users/colors-and-fonts.gif"/>
</p>
<h2 id="any-more-suggestions?"><a href="#any-more-suggestions?" class="heading-anchor">#</a> Any more suggestions?</h2>
<p>I'd love to hear your own tips on how to use PHPStorm.
Feel free to let me know via <a target="_blank" href="https://twitter.com/brendt_gd">Twitter</a> or <a href="mailto:brendt@stitcher.io">e-mail</a>.</p>
 ]]></summary>

                <updated>2018-03-15T00:00:00+00:00</updated>
            </entry>
                                <entry>
                <title><![CDATA[ Responsive images done right ]]></title>

                <link rel="alternate" href="https://stitcher.io/blog/responsive-images-done-right"/>

                <id>https://www.stitcher.io/blog/responsive-images-done-right</id>

                <author>
                    <name><![CDATA[ Brent Roose ]]></name>
                </author>

                <summary type="html"><![CDATA[ <p>I want to share some thoughts on responsive images.
I'll write about a certain mindset which many projects could benefit from:
small- and mid-sized web projects that don't need a full blown CDN setup,
but would enjoy the performance gain of responsive images.</p>
<p>The idea behind responsive images is simple:
try to serve an image with dimensions as close as possible to the image dimensions on screen.
This results in smaller bandwidth usage and faster load times!</p>
<p><div class="ad-container">
    <script async type="text/javascript" src="//cdn.carbonads.com/carbon.js?serve=CK7ICK3W&placement=stitcherio" id="_carbonads_js"></script>
</div>
</p>
<p>For example: if you're displaying an image on a mobile device with a screen of 600px wide,
there's no need for downloading that image with a width of 1000px.</p>
<p>The responsive images spec handles not only media queries, but pixel density too.
The only thing the server has to do is generate multiple variations of the same image,
each with a different size.</p>
<p>If you'd like to know more about how things are done behind the scenes,
I'll share some links to interesting resources at the end of this post.</p>
<h2 id="how-to-render-responsive-images"><a href="#how-to-render-responsive-images" class="heading-anchor">#</a> How to render responsive images</h2>
<p>There are different ways to render variations of the same image.
The simplest approach could be this:
<strong>given an image, create 4 variations: 1920px, 1200px, 800px and 400px</strong>.</p>
<p>While this approach is easy to implement, it's not the most optimal.
The goal of responsive images is to serve faster loading images
while maintaining the highest possible quality for the user's screen.</p>
<p>There are two variables in this equation: the width of the user's screen
(and therefore the width of the image itself) and the file size of an image.</p>
<p>Say you have two images with the exact same dimensions.
Depending on the content in that image and the encoding used,
their file sizes could differ a lot.</p>
<p>Another approach could be to manually define the most optimal <code>srcset</code> for each image.
This is impossible to do for most websites.
A website could have lots of images,
and it's also difficult to manually calculate the dimensions for that optimal <code>srcset</code>.</p>
<p>Luckily, computers are very good at tedious calculations on a large scale.
This approach sounds like a good idea:
<strong>given an image, generate x-amount of variations of that image,
each variation being approximately 10% smaller in file size</strong>.</p>
<p>How does that sound? You now have a small margin of possible "overhead"
for variable screen sizes, but at least we're sure that margin won't be more than 10%.
Depending on the size of the image, for example: a thumbnail vs. a hero image;
we could even reduce the margin to 5% instead of 10%.
This will result in a different <code>srcset</code> for every image,
but that's not our concern: the responsive images spec can handle that for us.</p>
<p>So how can you determine the dimensions of, say 10 variants of the same image, if you only know the dimensions of the original image? This is where high school maths come into play.</p>
<pre><code class="language-txt"><span class="hljs-highlight  comment">We start with these known variables</span>
<span class="hljs-highlight  prop">filesize</span> = 1.000.000
<span class="hljs-highlight  prop">width</span> = 1920
<span class="hljs-highlight  prop">ratio</span> = 9 / 16
<span class="hljs-highlight  prop">height</span> = <span class="hljs-highlight  prop">ratio</span> * <span class="hljs-highlight  prop">width</span>

<span class="hljs-highlight  comment">Next we introduce another one: area</span>
<span class="hljs-highlight  prop">area</span> = <span class="hljs-highlight  prop">width</span> * <span class="hljs-highlight  prop">height</span>
 &lt;=&gt; <span class="hljs-highlight  prop">area</span> = <span class="hljs-highlight  prop">width</span> * <span class="hljs-highlight  prop">width</span> * <span class="hljs-highlight  prop">ratio</span>

<span class="hljs-highlight  comment">We say that the pixelprice is filesize / area</span>
<span class="hljs-highlight  prop">pixelprice</span> = <span class="hljs-highlight  prop">filesize</span> / <span class="hljs-highlight  prop">area</span>

<span class="hljs-highlight  comment">Now we can replace variables until we have the desired result</span>
 &lt;=&gt; <span class="hljs-highlight  prop">filesize</span> = <span class="hljs-highlight  prop">pixelprice</span> * <span class="hljs-highlight  prop">area</span>
 &lt;=&gt; <span class="hljs-highlight  prop">filesize</span> = <span class="hljs-highlight  prop">pixelprice</span> * (<span class="hljs-highlight  prop">width</span> * <span class="hljs-highlight  prop">width</span> * <span class="hljs-highlight  prop">ratio</span>)
 &lt;=&gt; <span class="hljs-highlight  prop">width</span> * <span class="hljs-highlight  prop">width</span> * <span class="hljs-highlight  prop">ratio</span> = <span class="hljs-highlight  prop">filesize</span> / <span class="hljs-highlight  prop">pixelprice</span>
 &lt;=&gt; <span class="hljs-highlight  prop">width</span> ^ 2 = (<span class="hljs-highlight  prop">filesize</span> / <span class="hljs-highlight  prop">pixelprice</span>) / <span class="hljs-highlight  prop">ratio</span>
 &lt;=&gt; <span class="hljs-highlight  prop">width</span> = sqrt((<span class="hljs-highlight  prop">filesize</span> / <span class="hljs-highlight  prop">pixelprice</span>) / <span class="hljs-highlight  prop">ratio</span>)</code></pre>
<p>This proof says that given a constant <code>pixelprice</code>, we can calculate the width a scaled-down image needs to have a specified filesize. Here's the thing though: <code>pixelprice</code> is an approximation of what one pixel in this image costs. Because we'll scale down the image as a whole, this approximation is enough to yield accurate results though. Here's the implementation in PHP:</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-comment">/*
$fileSize        file size of the source image
$width           width of the source image
$height          height of the source image
$area            the amount of pixels
                 `$width * $height` or `$width * $width * $ration` 
$pixelPrice      the approximate price per pixel:
                 `$fileSize / $area`
*/</span>

$dimensions = [];

$ratio = $height / $width;
$area = $width * $width * $ratio;
$pixelPrice = $fileSize / $area;
$stepModifier = $fileSize * <span class="hljs-number">0.1</span>;

<span class="hljs-keyword">while</span> ($fileSize &gt; <span class="hljs-number">0</span>) {
    $newWidth = <span class="hljs-highlight  prop">floor</span>(
        <span class="hljs-highlight  prop">sqrt</span>(
            ($fileSize / $pixelPrice) / $ratio
        )
    );

    $dimensions[] = <span class="hljs-keyword">new</span> <span class="hljs-highlight  type">Dimension</span>($newWidth, $newWidth * $ratio);

    $fileSize -= $stepModifier;
}</code></pre>
<p>I want to clarify once more that this approach will be able to calculate the dimensions for each variation
with a 10% reduction in file size, without having to scale that image beforehand.
That means there's no performance overhead or multiple guesses to know how an image should be scaled.</p>
<h2 id="in-practice"><a href="#in-practice" class="heading-anchor">#</a> In practice</h2>
<p>Let's take a look at a picture of a parrot. This image has a fixed <code>srcset</code>:</p>
<p>
    <img src="/resources/img/static/responsive/parrot-fixed-800.jpg" srcset="/resources/img/static/responsive/parrot-fixed-1920.jpg 1920w, /resources/img/static/responsive/parrot-fixed-1200.jpg 1200w, /resources/img/static/responsive/parrot-fixed-800.jpg 800w, /resources/img/static/responsive/parrot-fixed-400.jpg 400w"/>
</p>
<p>This one has a dynamic <code>srcset</code>:</p>
<p><img src="/resources/img/blog/responsive/parrot.jpg" srcset="/resources/img/blog/responsive/parrot-1487x991.jpg 1487w, /resources/img/blog/responsive/parrot-858x572.jpg 858w, /resources/img/blog/responsive/parrot-1920x1280.jpg 1920w, /resources/img/blog/responsive/parrot-1717x1144.jpg 1717w, /resources/img/blog/responsive/parrot-1214x809.jpg 1214w" sizes="" alt=""></img></p>
<p>Feel free to open up your inspector and play around with it in responsive mode.
Be sure to disable browser cache and compare which image is loaded on different screen sizes. Also keep in mind that the pixel density of your screen can have an impact.</p>
<p>Can you imagine doing this by hand? Neither can I! One of the first features I proposed when I started working at Spatie, my current job, was to add this behaviour in the <a target="_blank" href="https://spatie.be/docs/laravel-medialibrary/v8/responsive-images/using-your-own-width-calculator">Laravel media library</a>, its usage is as simple as this:</p>
<pre><code class="language-php hljs php" data-lang="php">$model
   -&gt;<span class="hljs-highlight  prop">addMedia</span>($yourImageFile)
   -&gt;<span class="hljs-highlight  prop">withResponsiveImages</span>()
   -&gt;<span class="hljs-highlight  prop">toMediaCollection</span>();</code></pre>
<pre><code class="language-dts hljs dts" data-lang="dts"><span class="hljs-params">&lt;<span class="hljs-highlight  keyword"></span>img<span class="hljs-params"></span></span> 
    <span class="hljs-params"><span class="hljs-highlight  prop"></span>src<span class="hljs-params"></span></span>=<span class="hljs-string">"{{ $media-&gt;getFullUrl() }}"</span> 
    <span class="hljs-params"><span class="hljs-highlight  prop"></span>srcset<span class="hljs-params"></span></span>=<span class="hljs-string">"{{ $media-&gt;getSrcset() }}"</span> 
    <span class="hljs-params"><span class="hljs-highlight  prop"></span>sizes<span class="hljs-params"></span></span>=<span class="hljs-string">"[your own logic]"</span>
/&gt;</code></pre>
<p><div class="sidenote">
    <p>
        Tired of managing servers?
        Check out <a href="https://gumroad.com/a/575280243" ping="https://analytics.stitcher.io/r" target="_blank" rel="noopener noreferrer">Serverless Visually Explained</a> by Matthieu Napoli and learn how to create scalable PHP applications on AWS.
    </p>
</div>
</p>
<p>To finish off, here are the links which I mentioned at the start of this post.</p>
<ul>
<li>Responsive images explained in depth:
<a target="_blank" href="https://ericportis.com/posts/2014/srcset-sizes/">https://ericportis.com/posts/2014/srcset-sizes/</a>
</li>
<li>The official specification website:
<a target="_blank" href="https://responsiveimages.org/">https://responsiveimages.org/</a>
</li>
</ul>
<p>Special thanks to my colleague <a target="_blank" href="https://twitter.com/sebdedeyne">Sebastian</a> for reviewing and editing this post.</p>
 ]]></summary>

                <updated>2018-03-07T00:00:00+00:00</updated>
            </entry>
                                <entry>
                <title><![CDATA[ Showing full MySQL foreign key errors ]]></title>

                <link rel="alternate" href="https://stitcher.io/blog/mysql-show-foreign-key-errors"/>

                <id>https://www.stitcher.io/blog/mysql-show-foreign-key-errors</id>

                <author>
                    <name><![CDATA[ Brent Roose ]]></name>
                </author>

                <summary type="html"><![CDATA[ <p>In case of a foreign key error when creating or altering a table, MySQL doesn't show the full message.</p>
<p>You can read the full message by executing the following query and inspecting the <code>Status</code> column.</p>
<pre><code class="language-mysql">show engine innodb status;</code></pre>
<pre><code class="language-sas hljs sas" data-lang="sas">------------------------
LATEST <span class="hljs-meta">FOREIGN</span> <span class="hljs-meta">KEY</span> <span class="hljs-meta">ERROR</span>
------------------------
2018-02-13 11:12:26 0x70000b776000 <span class="hljs-meta">Error</span> <span class="hljs-meta">in</span> <span class="hljs-meta">foreign</span> <span class="hljs-meta">key</span> constraint of <span class="hljs-meta">table</span> <span class="hljs-meta">table</span>/#sql-7fa_247a:
 <span class="hljs-meta">foreign</span> <span class="hljs-meta">key</span> (`my_foreing_key`) <span class="hljs-meta">references</span> `<span class="hljs-meta">table</span>` (`id`)
   <span class="hljs-meta">on</span> <span class="hljs-meta">delete</span> <span class="hljs-meta">cascade</span>:
Cannot resolve <span class="hljs-meta">table</span> name close to:
 (`id`)
   <span class="hljs-meta">on</span> <span class="hljs-meta">delete</span> <span class="hljs-meta">cascade</span></code></pre>
 ]]></summary>

                <updated>2018-02-13T00:00:00+00:00</updated>
            </entry>
                                <entry>
                <title><![CDATA[ MySQL query logging ]]></title>

                <link rel="alternate" href="https://stitcher.io/blog/mysql-query-logging"/>

                <id>https://www.stitcher.io/blog/mysql-query-logging</id>

                <author>
                    <name><![CDATA[ Brent Roose ]]></name>
                </author>

                <summary type="html"><![CDATA[ <h2 id="enable-query-logging"><a href="#enable-query-logging" class="heading-anchor">#</a> Enable query logging</h2>
<pre><code class="language-gams hljs gams" data-lang="gams">mysql -p -u root

&gt; <span class="hljs-keyword">SET</span> GLOBAL <span class="hljs-comment">general_log =</span> <span class="hljs-comment">'ON'</span>;

# Turning it off again when finished

&gt; <span class="hljs-keyword">SET</span> GLOBAL <span class="hljs-comment">general_log =</span> <span class="hljs-comment">'OFF'</span>;</code></pre>
<h2 id="find-the-log-file"><a href="#find-the-log-file" class="heading-anchor">#</a> Find the log file</h2>
<p>First, find the <code>mysqld</code> process ID.</p>
<pre><code class="language-angelscript hljs angelscript" data-lang="angelscript">ps auxww | grep mysql

brent             <span class="hljs-number">2042</span>   <span class="hljs-number">0.0</span>  <span class="hljs-number">0.4</span>  <span class="hljs-number">2849776</span>  <span class="hljs-number">67772</span>   ??  S    Fri11AM   <span class="hljs-number">0</span>:<span class="hljs-number">16.80</span> /usr/local/opt/mysql/bin/mysqld</code></pre>
<p>Second, use <code>lsof</code> to find all files used by this process, and filter on <code>log</code>.</p>
<pre><code class="language-lsl hljs lsl" data-lang="lsl"># sudo lsof -p &lt;PID&gt; | grep log

sudo lsof -p <span class="hljs-number">2042</span> | grep log

mysqld  <span class="hljs-number">2042</span> brent    <span class="hljs-number">4</span>u     REG                <span class="hljs-number">1</span>,<span class="hljs-number">4</span>  <span class="hljs-number">50331648</span>  <span class="hljs-number">780601</span> /usr/local/var/mysql/ib_logfile0
mysqld  <span class="hljs-number">2042</span> brent    <span class="hljs-number">9</span>u     REG                <span class="hljs-number">1</span>,<span class="hljs-number">4</span>  <span class="hljs-number">50331648</span>  <span class="hljs-number">780602</span> /usr/local/var/mysql/ib_logfile1
mysqld  <span class="hljs-number">2042</span> brent   <span class="hljs-number">26</span>u     REG                <span class="hljs-number">1</span>,<span class="hljs-number">4</span>        <span class="hljs-number">35</span>  <span class="hljs-number">780672</span> /usr/local/var/mysql/mysql/general_log.CSM
mysqld  <span class="hljs-number">2042</span> brent   <span class="hljs-number">32</span>r     REG                <span class="hljs-number">1</span>,<span class="hljs-number">4</span>         <span class="hljs-number">0</span>  <span class="hljs-number">780673</span> /usr/local/var/mysql/mysql/general_log.CSV
mysqld  <span class="hljs-number">2042</span> brent   <span class="hljs-number">33</span>w     REG                <span class="hljs-number">1</span>,<span class="hljs-number">4</span>     <span class="hljs-number">25504</span> <span class="hljs-number">9719379</span> /usr/local/var/mysql/HOST.log</code></pre>
<p><code>/usr/local/var/mysql/HOST.log</code> is the one you want, <code>HOST</code> will be the name of your host.</p>
<pre><code class="language-lasso hljs lasso" data-lang="lasso">tail <span class="hljs-params">-f</span> /usr/<span class="hljs-built_in">local</span>/<span class="hljs-built_in">var</span>/mysql/HOST.<span class="hljs-keyword">log</span></code></pre>
 ]]></summary>

                <updated>2018-01-20T00:00:00+00:00</updated>
            </entry>
                                <entry>
                <title><![CDATA[ Where a curly bracket belongs ]]></title>

                <link rel="alternate" href="https://stitcher.io/blog/where-a-curly-bracket-belongs"/>

                <id>https://www.stitcher.io/blog/where-a-curly-bracket-belongs</id>

                <author>
                    <name><![CDATA[ Brent Roose ]]></name>
                </author>

                <summary type="html"><![CDATA[ <p>This blogpost is based on <a target="_blank" href="https://www.youtube.com/watch?v=ZsHMHukIlJY">this amazing talk by Kevlin Henney</a>.</p>
<p>Dedicating a whole blogpost to curly brackets might seem like overkill
but I believe it's worth thinking about them.
Not just because of one curly bracket, but because there's a bigger message in all this.
Thinking about how we read and write code not only improves the quality of that code,
it also increases our own and others ease of mind when working with it.
It can improve the fluency of your work and free your mind to think about real important stuff.
You know, things like "application logic" for example.</p>
<p><div class="ad-container">
    <script async type="text/javascript" src="//cdn.carbonads.com/carbon.js?serve=CK7ICK3W&placement=stitcherio" id="_carbonads_js"></script>
</div>
</p>
<p>I wrote about visual code improvements a while back in a previous blogpost about <a href="/blog/a-programmers-cognitive-load">cognitive load</a>.
Today I want to focus on that one little, yet very important character in our codebase: the curly bracket.
More specifically, we're only going to look at the opening curly bracket,
because there's little to no discussion about the closing one.</p>
<p>Let's take a look at a code sample.</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span><span class="hljs-params">(<span class="hljs-highlight  type">string</span> $publicDirectory, <span class="hljs-highlight  type">string</span> $configurationFile, <span class="hljs-highlight  type">PageParser</span> $pageParser, <span class="hljs-highlight  type">PageRenderer</span> $pageRenderer)</span> </span>{
    <span class="hljs-comment">// ...</span>
}</code></pre>
<p>A constructor for a render task in Stitcher. It takes two config arguments and two objects.
Depending on the width of your screen, this piece of code might be fully visible in your IDE.
On this website it surely will not.</p>
<p>So what's wrong with this code?
Well first of all, you probably have to scroll to read it. That's a bad thing.
Scrolling requires an extra action for the developer to take.
You'll have to consciously search for information about the arguments of this method.
That time distracts you from focusing on the application code.</p>
<p>Second, if you're a web developer, you probably know people don't read, they rather scan.
This is especially true for websites, where the biggest area of attention leans towards the left.
And the same goes for reading code.
Putting important information to the right makes it more difficult to find,
and it also doesn't convey the same importance as things to the left.</p>
<p>In case of an argument list, all arguments are equally important;
yet in the above example a lot of useful information is pushed to that right, dark side.</p>
<p>So how do we pull the useful information more to the left?</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span><span class="hljs-params">(<span class="hljs-highlight  type">string</span> $publicDirectory, 
                            <span class="hljs-highlight  type">string</span> $configurationFile, 
                            <span class="hljs-highlight  type">PageParser</span> $pageParser, 
                            <span class="hljs-highlight  type">PageRenderer</span> $pageRenderer)</span> </span>{
    <span class="hljs-comment">// ...</span>
}</code></pre>
<p>This could be the first thing you think about. But it doesn't really scale.
As soon as you're refactoring a method name, the alignment breaks.
Say we want to make this a static constructor instead of a normal one.</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">create</span><span class="hljs-params">(<span class="hljs-highlight  type">string</span> $publicDirectory, 
                            <span class="hljs-highlight  type">string</span> $configurationFile, 
                            <span class="hljs-highlight  type">PageParser</span> $pageParser, 
                            <span class="hljs-highlight  type">PageRenderer</span> $pageRenderer)</span> </span>{</code></pre>
<p>See the alignment breaking?
Another issue with this approach is that things are still pushed rather far to the right;
let's take a look at another approach.</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span><span class="hljs-params">(
    <span class="hljs-highlight  type">string</span> $publicDirectory, <span class="hljs-highlight  type">string</span> $configurationFile, 
    <span class="hljs-highlight  type">PageParser</span> $pageParser, <span class="hljs-highlight  type">PageRenderer</span> $pageRenderer)</span> </span>{
    <span class="hljs-comment">// ...</span>
}</code></pre>
<p>The advantage here is that the alignment issue on refactoring is solved.
However, how will you decide how many arguments should go on one line?
Will you make some styling guidelines about this?
How will you enforce them?
This example has four arguments, but what if it had three or five?</p>
<p>Consistency is key. If there is a consistent rule about this, you won't have to think about it anymore.
And like we said before, if you don't have to think about this, there's room in your head for more important things.</p>
<p>So let's continue searching for that consistency.</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span><span class="hljs-params">(
    <span class="hljs-highlight  type">string</span> $publicDirectory, 
    <span class="hljs-highlight  type">string</span> $configurationFile, 
    <span class="hljs-highlight  type">PageParser</span> $pageParser, 
    <span class="hljs-highlight  type">PageRenderer</span> $pageRenderer)</span> </span>{
    <span class="hljs-keyword">$this</span>-&gt;publicDirectory = <span class="hljs-highlight  prop">rtrim</span>($publicDirectory, <span class="hljs-string">'/'</span>);
    <span class="hljs-keyword">$this</span>-&gt;configurationFile = $configurationFile;
    <span class="hljs-keyword">$this</span>-&gt;pageParser = $pageParser;
    <span class="hljs-keyword">$this</span>-&gt;pageRenderer = $pageRenderer;
}</code></pre>
<p>By giving each argument its own line, we solve the above mentioned problems.
But there's still one issue with this example:
it's hard to distinguish between the argument list and the method body.</p>
<p>Kevlin Henney visualises this problem in a simple, yet clever way.
Let's replace all characters in this code with X's:</p>
<pre><code class="language-text">XXXXXX XXXXXXXX __XXXXXXXXX(
    XXXXXX XXXXXXXXXXXXXXXX, 
    XXXXXX XXXXXXXXXXXXXXXXXX, 
    XXXXXXXXXX XXXXXXXXXXX, 
    XXXXXXXXXXXX XXXXXXXXXXXXX) {
    XXXXXXXXXXXXXXXXXXXXXX = XXXXXXXXXXXXXXXXXXXXXXXXXXXX;
    XXXXXXXXXXXXXXXXXXXXXXXX = XXXXXXXXXXXXXXXXXX;
    XXXXXXXXXXXXXXXXX = XXXXXXXXXXX;
    XXXXXXXXXXXXXXXXXXX = XXXXXXXXXXXXX;
}</code></pre>
<p>Can you see how difficult it has become to spot where the argument list ends
and the method body starts?</p>
<p>You might say "there's still the curly bracket on the right indicating the end".
That's the thing we want to avoid! We want to keep the visual important information to the <em>left</em>.
How do we solve it? Kevlin Henney phrased it very well:</p>
<blockquote>
<p>Turns out, there is one true place where to put your curly brackets - Kevlin Henney</p>
</blockquote>
<pre><code class="language-text">XXXXXX XXXXXXXX __XXXXXXXXX(
    XXXXXX XXXXXXXXXXXXXXXX, 
    XXXXXX XXXXXXXXXXXXXXXXXX, 
    XXXXXXXXXX XXXXXXXXXXX, 
    XXXXXXXXXXXX XXXXXXXXXXXXX
) {
    XXXXXXXXXXXXXXXXXXXXXX = XXXXXXXXXXXXXXXXXXXXXXXXXXXX;
    XXXXXXXXXXXXXXXXXXXXXXXX = XXXXXXXXXXXXXXXXXX;
    XXXXXXXXXXXXXXXXX = XXXXXXXXXXX;
    XXXXXXXXXXXXXXXXXXX = XXXXXXXXXXXXX;
}</code></pre>
<p>That is why it makes sense to put that curly bracket on a new line.
Here's the final result:</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span><span class="hljs-params">(
    <span class="hljs-highlight  type">string</span> $publicDirectory, 
    <span class="hljs-highlight  type">string</span> $configurationFile, 
    <span class="hljs-highlight  type">PageParser</span> $pageParser, 
    <span class="hljs-highlight  type">PageRenderer</span> $pageRenderer
)</span> </span>{
    <span class="hljs-keyword">$this</span>-&gt;publicDirectory = <span class="hljs-highlight  prop">rtrim</span>($publicDirectory, <span class="hljs-string">'/'</span>);
    <span class="hljs-keyword">$this</span>-&gt;configurationFile = $configurationFile;
    <span class="hljs-keyword">$this</span>-&gt;pageParser = $pageParser;
    <span class="hljs-keyword">$this</span>-&gt;pageRenderer = $pageRenderer;
}</code></pre>
<p>Now, you might not like this way of structuring your code.
You might think it adds unnecessary length to a file.
But take a look at the facts:</p>
<ul>
<li>You're keeping the important information to the left of the screen, where most of your focus is.</li>
<li>This method is consistent, which allows us not having to think about it when reading it.
This frees up some of your human "memory space": it reduces cognitive load;
it allows you to focus on the important stuff: the real application logic.</li>
<li>No one ever died because a file was "longer than absolutely needed".
People do however get very frustrated working in legacy code bases,
having to read what other people wrote, especially when that code is difficult to read.</li>
<li>If the length of the file is really a bother for you, code folding can solve that issue.</li>
</ul>
<p>I like having this rule when coding.
There's never a discussion in my head about "should I do it this way or that way"?
This consistency helps me write and read my own code, and benefits other developers too, maybe even years later.</p>
<h2 id="what-about-small-functions?"><a href="#what-about-small-functions?" class="heading-anchor">#</a> What about small functions?</h2>
<p>Say your function only has one parameter, should it be split on multiple lines?
I personally don't think so. And if we're strictly applying the rules above,
the curly bracket may be put on the same line.</p>
<p>However, now that we're used to that one almost-empty line between the argument list and the method body,
it does seem like a nice idea to use this visual divider also for smaller functions.</p>
<pre><code class="language-php hljs php" data-lang="php">XXXXXX XXXXXXXX __XXXXXXXXX(XXXXXX XXXXXXXXXXXXXXXX) 
{
    XXXXXXXXXXXXXXXXXXXXXX = XXXXXXXXXXXXXXXX;
}</code></pre>
<p>Now we could start arguing about the placement of that closing bracket,
but that's a blogpost for another time.</p>
<h2 id="and-control-structures?"><a href="#and-control-structures?" class="heading-anchor">#</a> And control structures?</h2>
<p>The question about <code>if</code>, <code>for</code>, <code>while</code> and others should of course be addressed too.
In my opinion, the answer is simple, we can apply the same rules to them.</p>
<p>If the operands are pushed too far to the right, and we feel the need to split it, we do it like this:</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-keyword">if</span> (
    $firstCondition === $secondCondition
    || $thirdOperand === <span class="hljs-number">1</span>
    || $fourthOperand
) {
    <span class="hljs-comment">// ...</span>
}</code></pre>
<p>Finally, here is a daring thought - and I don't do this myself by the way,
because following standards is also a good thing -
it might make sense to apply the same rule to short control structures.
After all: consistency, right?</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-keyword">foreach</span> ($things <span class="hljs-keyword">as</span> $thing)
{
    <span class="hljs-comment">// ...</span>
}</code></pre>
<hr />
<p>If you're not convinced by now, I'd love to hear why!
You can reach out to me on <a target="_blank" href="https://twitter.com/brendt_gd">Twitter</a> or via <a href="mailto:brendt@stitcher.io">e-mail</a>.
I'm looking forward to discussing this further with you!</p>
<p>If you're looking for more to read on clean code.
Feel free to browse this blog a little further.
<a href="/blog/a-programmers-cognitive-load">This is the best starting point</a>.</p>
 ]]></summary>

                <updated>2018-01-16T00:00:00+00:00</updated>
            </entry>
                                <entry>
                <title><![CDATA[ MySQL import: JSON with binary character set ]]></title>

                <link rel="alternate" href="https://stitcher.io/blog/mysql-import-json-binary-character-set"/>

                <id>https://www.stitcher.io/blog/mysql-import-json-binary-character-set</id>

                <author>
                    <name><![CDATA[ Brent Roose ]]></name>
                </author>

                <summary type="html"><![CDATA[ <p>If you see this error when importing MySQL files:</p>
<pre><code class="language-sql hljs sql" data-lang="sql">cannot <span class="hljs-keyword">create</span> a <span class="hljs-keyword">JSON</span> <span class="hljs-keyword">value</span> <span class="hljs-keyword">from</span> a <span class="hljs-keyword">string</span> <span class="hljs-keyword">with</span> <span class="hljs-built_in">CHARACTER</span> <span class="hljs-keyword">SET</span> <span class="hljs-string">'binary'</span></code></pre>
<p>You should find and replace parts of the import file with the following regex:</p>
<p>Find: <code>(X'[^,\)]*')</code>, and replace by: <code>CONVERT($1 using utf8mb4)</code></p>
<p>Source: <a target="_blank" href="https://stackoverflow.com/questions/38078119/mysql-5-7-12-import-cannot-create-a-json-value-from-a-string-with-character-set">StackOverflow</a>.</p>
 ]]></summary>

                <updated>2018-01-09T00:00:00+00:00</updated>
            </entry>
                                <entry>
                <title><![CDATA[ Asynchronous PHP ]]></title>

                <link rel="alternate" href="https://stitcher.io/blog/asynchronous-php"/>

                <id>https://www.stitcher.io/blog/asynchronous-php</id>

                <author>
                    <name><![CDATA[ Brent Roose ]]></name>
                </author>

                <summary type="html"><![CDATA[ <p>We're working on a new package at Spatie.
It's called <a target="_blank" href="https://github.com/spatie/async">spatie/async</a> and meant to do asynchronous parallel processing in PHP.</p>
<p>Parallel processing in PHP might seem like an edge case for many web developers,
but let's take a look at a few use-cases we see at Spatie:</p>
<ul>
<li>
<a target="_blank" href="https://github.com/spatie/laravel-medialibrary">Image optimisation</a>
</li>
<li>PDF rendering</li>
<li>
<a target="_blank" href="https://github.com/spatie/crawler">Concurrent site crawling</a>
</li>
<li>
<a target="_blank" href="https://github.com/spatie/schema-org">Code generators</a>
</li>
<li>Static site generators - like Stitcher</li>
</ul>
<p><div class="ad-container">
    <script async type="text/javascript" src="//cdn.carbonads.com/carbon.js?serve=CK7ICK3W&placement=stitcherio" id="_carbonads_js"></script>
</div>
</p>
<p>We wanted to create an easy-to-use package, yet one that could solve our use cases.
Some of the examples listed above will not use the new <code>spatie/async</code> package,
because there's also a queueing system provided with Laravel.</p>
<p>This is how asynchronous code with our package looks like.</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-keyword">use</span> <span class="hljs-title">Spatie</span>\<span class="hljs-title">Async</span>\<span class="hljs-title">Process</span>;

$pool = Pool::create();

<span class="hljs-keyword">foreach</span> (range(<span class="hljs-number">1</span>, <span class="hljs-number">5</span>) <span class="hljs-keyword">as</span> $i) {
    $pool[] = async(<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">()</span> <span class="hljs-title">use</span> <span class="hljs-params">($i)</span> </span>{
        <span class="hljs-comment">// Something to execute in a child process.</span>
    })-&gt;then(<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">(int $output)</span> </span>{
        <span class="hljs-comment">// Handle output returned from the child process.</span>
    })-&gt;catch(<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">(Exception $exception)</span> </span>{
        <span class="hljs-comment">// Handle exceptions thrown in the child process.</span>
    });
}

await($pool);</code></pre>
<h2 id="outperforming-amp?-not-quite-yet."><a href="#outperforming-amp?-not-quite-yet." class="heading-anchor">#</a> Outperforming Amp? Not quite yet.</h2>
<p>If you're into parallel PHP, you've probably heard of <a target="_blank" href="https://github.com/amphp">Amp</a> and <a target="_blank" href="https://github.com/reactphp">ReactPHP</a>.
Our package aims not to compete with those two, as it only solves one tiny aspect of parallelism in PHP;
and tries to solve it in a different way.</p>
<p>We did however run some benchmarks to compare our package performance against Amp.
Special thanks to <a target="_blank" href="https://github.com/kelunik">Niklas Keller</a>, one of the developers of Amp.
He pointed out some mistakes in our previous benchmarks, and helped making them more fair.</p>
<p>The new benchmarks compare a few scenarios.
The first two groups plot the execution time of an empty process,
while the third and fourth groups show the execution time of processes with a different time to finish,
using several <code>sleep</code> intervals.
Between the two groups, we're also comparing a capped concurrency configuration and a non-capped configuration.
Capped means that there are more processes than the pool can execute at once.</p>
<p>The benchmark code can be found <a target="_blank" href="https://github.com/spatie/async-benchmark">here</a>.</p>
<p><img src="/resources/img/blog/async/benchmarks.png" srcset="/resources/img/blog/async/benchmarks-599x369.png 599w, /resources/img/blog/async/benchmarks-346x213.png 346w, /resources/img/blog/async/benchmarks-489x301.png 489w, /resources/img/blog/async/benchmarks-692x427.png 692w, /resources/img/blog/async/benchmarks-773x477.png 773w" sizes="" alt="Comparing Amp and spatie/async">Comparing Amp and spatie/async</img></p>
<p>I tried to draw a few conclusions from these test.</p>
<ul>
<li>Real life processes take time to run and finish.
For our use-cases, the "with logic" benchmarks are more relevant.</li>
<li>Regarding process execution time, it seems like our package has less overhead:
as long as the pool doesn't have to manage concurrency, we're finishing faster.</li>
<li>In real life applications though, the maximum concurrency setting will most likely be in effect,
so it's clear that we'll need to improve that part of our codebase if we want better performance compared to Amp.</li>
</ul>
<h2 id="what-about-reactphp?"><a href="#what-about-reactphp?" class="heading-anchor">#</a> What about ReactPHP?</h2>
<p>We've excluded ReactPHP from the benchmarks, because it's not a fair comparison.
ReactPHP doesn't allow to run closures or <code>Tasks</code> as sub-processes the way Amp and our package do.
With ReactPHP, you're working with plain processes, so there's no way to compare to it.</p>
<h2 id="about-process-signals"><a href="#about-process-signals" class="heading-anchor">#</a> About process signals</h2>
<p>The biggest difference between our package and Amp is the way of communicating between processes.
We're solely relying on process signals to determine when a process is finished.
It allows for less overhead, but also excludes Windows as a target platform.</p>
<p>Processes in UNIX systems can send signals to each other.
Depending on what kind of signal is received, a process will act different.
Signals are handled by the kernel, so they are pretty low level.
Before PHP 7.1 though, you had to <code>declare(ticks=1)</code> to use asynchronous signals in a reliable way.
This means that PHP will check for signals much more often, but it also introduces a lot of overhead:</p>
<blockquote>
<p>A tick is an event that occurs for every N low-level tickable statements executed by the parser within the declare block. The value for N is specified using ticks=N within the declare block's directive section.</p>
</blockquote>
<p>With PHP 7.1, there's a new way of handling interrupts sent by the kernel.</p>
<blockquote>
<p>Zend Engine in PHP 7.1 was extended with ability of safe time-out and interrupt handling. Actually, PHP VM checks for EG(vm_interrupt) flag on each loop iteration, user function entry or internal function exit, and call callback function if necessary.</p>
</blockquote>
<p>By using <code>pcntl_async_signals(true)</code>, PHP will now check for signals in a much more performant way.
A more in-depth explanation can be found in the <a target="_blank" href="https://wiki.php.net/rfc/async_signals">rfc</a>,
submitted by Dmitry Stogov.</p>
<p>It's thanks to this mechanism that we're able to act on process status changes in a real asynchronous way,
without having to rely on sockets or process status polling.</p>
 ]]></summary>

                <updated>2017-12-24T00:00:00+00:00</updated>
            </entry>
                                <entry>
                <title><![CDATA[ Optimised UUIDs in mysql ]]></title>

                <link rel="alternate" href="https://stitcher.io/blog/optimised-uuids-in-mysql"/>

                <id>https://www.stitcher.io/blog/optimised-uuids-in-mysql</id>

                <author>
                    <name><![CDATA[ Brent Roose ]]></name>
                </author>

                <summary type="html"><![CDATA[ <p>At <a target="_blank" href="https://www.spatie.be">Spatie</a>, we're working on a large project which uses UUIDs in many database tables.
These tables vary in size from a few thousand records to half a million.</p>
<p>As you might know, normal UUIDs are stored as <code>CHAR(36)</code> fields in the database.
This has an enormous performance cost, because MySQL is unable to properly index these records.
Take a look at the following graph, plotting the execution time of hundred queries against two datasets: one with 50k rows, one with 500k rows.</p>
<p><div class="ad-container">
    <script async type="text/javascript" src="//cdn.carbonads.com/carbon.js?serve=CK7ICK3W&placement=stitcherio" id="_carbonads_js"></script>
</div>
</p>
<p><img src="/resources/img/blog/binary-uuid/textual_uuid.png" srcset="/resources/img/blog/binary-uuid/textual_uuid-703x434.png 703w, /resources/img/blog/binary-uuid/textual_uuid-812x501.png 812w, /resources/img/blog/binary-uuid/textual_uuid-574x354.png 574w, /resources/img/blog/binary-uuid/textual_uuid-908x561.png 908w, /resources/img/blog/binary-uuid/textual_uuid-406x250.png 406w" sizes="" alt=""></img></p>
<p><em>That's an average of more than 1.5 seconds when using textual UUIDs!</em></p>
<p>There's an <strong>important edit</strong> here: the benchmark above was performed on un-indexed fields.
I've since changed the benchmark results to work with indexed textual fields for a more fair comparison.
There's still a performance gain to not using textual UUIDs, so keep reading!</p>
<p>Looking around for better alternatives, we found a two-part solution.</p>
<h2 id="saving-uuids-as-binary-data"><a href="#saving-uuids-as-binary-data" class="heading-anchor">#</a> Saving UUIDs as binary data</h2>
<p>Instead of saving UUIDs as <code>CHAR</code>, it's possible to store their actual binary data in a <code>BINARY</code> field.
Storing them in this format, MySQL has a lot less trouble indexing this table.
This is the graph plotting a much faster result.</p>
<p><img src="/resources/img/blog/binary-uuid/binary_uuid.png" srcset="/resources/img/blog/binary-uuid/binary_uuid-703x434.png 703w, /resources/img/blog/binary-uuid/binary_uuid-812x501.png 812w, /resources/img/blog/binary-uuid/binary_uuid-574x354.png 574w, /resources/img/blog/binary-uuid/binary_uuid-406x250.png 406w, /resources/img/blog/binary-uuid/binary_uuid-908x561.png 908w" sizes="" alt=""></img></p>
<p>That's an avarage of 0.00008832061291 seconds per query,
in comparison to ~~1.5~~ 0.0001493031979 seconds for the <strong>indexed</strong> textual UUID.</p>
<h2 id="it-becomes-even-better!"><a href="#it-becomes-even-better!" class="heading-anchor">#</a> It becomes even better!</h2>
<p>The binary encoding of UUIDs solved most of the issue.
There's one extra step to take though,
which allows MySQL to even better index this field for large datasets.</p>
<p>By switching some of the bits in the UUID, more specifically time related data,
we're able to save them in a more ordered way.
And it seems that MySQL is especially fond of ordered data when creating indices.
There's one important thing to note: this time related bits are only available in UUID version 1.</p>
<p>Using this approach, we can see following result.</p>
<p><img src="/resources/img/blog/binary-uuid/comparison.png" srcset="/resources/img/blog/binary-uuid/comparison-725x447.png 725w, /resources/img/blog/binary-uuid/comparison-419x258.png 419w, /resources/img/blog/binary-uuid/comparison-838x517.png 838w, /resources/img/blog/binary-uuid/comparison-592x365.png 592w, /resources/img/blog/binary-uuid/comparison-937x579.png 937w" sizes="" alt=""></img></p>
<p>The optimised approach is actually slower for lookups in a small table,
but it outperforms the normal binary approach on larger datasets.
It even performs better than an <code>AUTO_INCREMENT</code> integer ID!
But as you can see, we need very large tables before the optimised UUID has a benefit.</p>
<p>I would recommend only using UUIDs when there's a very good use case for them.
For example: when you want unique IDs over all tables, and not just one;
or if you want to hide exactly how many rows there are in the table.</p>
<p>The MySQL team wrote a <a target="_blank" href="http://mysqlserverteam.com/storing-uuid-values-in-mysql-tables/">blogpost</a>
explaining this bit-shifting of UUIDs in further detail.
If you'd like to know how it works internally, over there is a good start.</p>
<p>If you're building a Laravel application and would like to use optimised UUIDs in your project,
we've made <a target="_blank" href="https://github.com/spatie/laravel-binary-uuid">a package</a> especially for you.
You'll also find more benchmark details in the README over there.</p>
<p>Finally, if you're looking into implementing this behaviour in a non-Laravel project,
you should definitely take a look at <a target="_blank" href="https://github.com/ramsey/uuid">Ramsey's UUID package</a>, we're using it too!</p>
 ]]></summary>

                <updated>2017-11-29T00:00:00+00:00</updated>
            </entry>
                                <entry>
                <title><![CDATA[ Improving PHPStorm&#039;s performance ]]></title>

                <link rel="alternate" href="https://stitcher.io/blog/phpstorm-performance"/>

                <id>https://www.stitcher.io/blog/phpstorm-performance</id>

                <author>
                    <name><![CDATA[ Brent Roose ]]></name>
                </author>

                <summary type="html"><![CDATA[ <p>Let's just dive right in.</p>
<h2 id="java-vm-options"><a href="#java-vm-options" class="heading-anchor">#</a> Java VM options</h2>
<p>PHPStorm is made in Java. If you ever played Minecraft, you know you could allocate extra RAM by adding
flags to your startup command. You can also do this in PHPStorm, it's even built into the UI.</p>
<p>Go to <code>help > Edit Custom VM Options</code>. You can play around with the settings here.
I for one changed the maximum amount of RAM allocated to PHPStorm, and added two graphics options
(at the end of the file).</p>
<pre><code class="language-text">-Xms500m
-Xmx1500m

-Dawt.useSystemAAFontSettings=lcd
-Dawt.java2d.opengl=true

# Only for people on Mac, it makes Java use an optimised graphics engine.
-Dapple.awt.graphics.UseQuartz=true</code></pre>
<p><div class="ad-container">
    <script async type="text/javascript" src="//cdn.carbonads.com/carbon.js?serve=CK7ICK3W&placement=stitcherio" id="_carbonads_js"></script>
</div>
</p>
<h2 id="custom-properties"><a href="#custom-properties" class="heading-anchor">#</a> Custom properties</h2>
<p>PHPStorm also has a file to set custom properties: <code>help > Edit Custom Properties</code>.
Adding one option here changed the way PHPStorm renders text: it will show text immediately,
instead of analysing it first. The downside is that you can sometimes see a flash of unstyled text.
It feels much smoother though.</p>
<pre><code class="language-ini hljs ini" data-lang="ini"><span class="hljs-attr">editor.zero.latency.typing</span>=<span class="hljs-literal">true</span></code></pre>
<h2 id="inspections-and-plugins"><a href="#inspections-and-plugins" class="heading-anchor">#</a> Inspections and plugins</h2>
<p>PHPStorm is a powerful IDE, with lots of functionality built in by default. While I'd highly recommend using
these options to their full extent, there are some things that are never used.</p>
<p>Disabling unused plugins can be a start, but disabling inspections has a much bigger impact.
Take a look at the list and decide for yourself which onces you don't need: <code>Settings > Editor > Inspections</code>.</p>
<h2 id="language-injection"><a href="#language-injection" class="heading-anchor">#</a> Language injection</h2>
<p>One plugin in particular has a big performance impact: <code>IntelliLang</code>. This plugins allows for
languages to be recognised in different file formats. Eg. HTML autocompletion and highlighting in a PHP file.</p>
<p>I would not recommend completely disabling this plugin, but there might be some injections
which you don't need in your projects: <code>Settings > Editor > Language Injections</code>.</p>
<h2 id="project-setup"><a href="#project-setup" class="heading-anchor">#</a> Project setup</h2>
<p>Managing which files PHPStorm must index has to be done on a project level basis.
It is worth spending 5 minutes on initial project setup, for projects you'll work hours and days on.</p>
<h3 id="excluding-directories"><a href="#excluding-directories" class="heading-anchor">#</a> Excluding directories</h3>
<p>Go to <code>Settings > Directories</code> to mark directories as excluded. PHPStorm won't index these files.
Directories to exclude would be eg. cache, public and storage directories;
directories which contain generated files from asset building, and last but not least: <code>vendor</code> and <code>node_modules</code>.</p>
<h3 id="the-vendor-problem"><a href="#the-vendor-problem" class="heading-anchor">#</a> The vendor problem</h3>
<p>Excluding directories from indexing means no auto-complete from those directories.
So excluding the vendor directory might not be the best idea.
There's a neat little trick though, which allows you to whitelist vendor directories you want to use,.</p>
<p>Go to <code>Settings > Languages & Frameworks > PHP</code>. In here you can set include paths.
By manually specifying which vendor directories should be indexed, you can eliminate a lot of indexing time.
You might eg. always keep dependencies of vendors excluded, because chances are you won't be using those APIs.
If you come across a vendor you need auto-completion for, just add it to the list.</p>
<h3 id="node-modules"><a href="#node-modules" class="heading-anchor">#</a> Node modules</h3>
<p>Node modules are "excluded" by default, but they are added as include paths nevertheless.
Because of the size of the <code>node_modules</code> directory, it can take quite a while to index it.</p>
<p>JavaScript include paths are managed like PHP includes, but in <code>Settings > Languages & Frameworks > JavaScript > Libraries</code>.
I personally don't write a lot of JavaScript, so I just remove the inclusion of <code>node_modules</code> completely.</p>
<p>Managing directories requires a bit of time for each project, but it's worth the performance gain in the long run.</p>
<h2 id="font-rendering-on-osx"><a href="#font-rendering-on-osx" class="heading-anchor">#</a> Font rendering on OSX</h2>
<p>There's a confirmed issue in the JRE with certain fonts.
While this might seem like a minor detail, certain fonts actually require a lot of processor power to render text,
slowing down PHPStorm in its whole.</p>
<p>I've written a separate blog post on this issue, and how you can fix it.
You can read it <a href="/blog/phpstorm-performance-issues-on-osx">here</a>.</p>
<h2 id="on-a-personal-note"><a href="#on-a-personal-note" class="heading-anchor">#</a> On a personal note</h2>
<p>I didn't start this post by writing my own thoughts, because I figured people were looking for some quick tips to speed of their IDE.
As a PHP developer, I think that PHPStorm is such a powerful tool, which helps me to write good and maintainable code.
I don't want it to stand in my way though, so good performance is an absolute requirement.</p>
<p>With the things listed above, I feel that PHPStorm offers the best balance between performance and intelligence.
I've written PHP in Sublime Text for ± 5 years. I did put some time into tweaking PHPStorm to my needs,
and now I'm 100% sure I'll never go back to Sublime Text.
My IDE is just way too smart and helpful to me. It allows me to focus on real application logic,
instead of writing the same boilerplate code over and over again.
I'll talk more about the benefits of an IDE over a text editor in another post.
For now, I hope that you found these tips helpful.</p>
<p>Happy coding!</p>
<hr />
<p>Ready for more? I've got a new blog post full of <a href="/blog/phpstorm-tips-for-power-users">tips for PHPStorm users</a>!</p>
 ]]></summary>

                <updated>2017-10-22T00:00:00+00:00</updated>
            </entry>
                                <entry>
                <title><![CDATA[ Stitcher beta 2 ]]></title>

                <link rel="alternate" href="https://stitcher.io/blog/stitcher-beta-2"/>

                <id>https://www.stitcher.io/blog/stitcher-beta-2</id>

                <author>
                    <name><![CDATA[ Brent Roose ]]></name>
                </author>

                <summary type="html"><![CDATA[ <p>The second beta release of Stitcher ties a lot of loose ends together, getting ready for real production sites.</p>
<h3 id="installation"><a href="#installation" class="heading-anchor">#</a> Installation</h3>
<pre><code class="language-elixir hljs elixir" data-lang="elixir">composer <span class="hljs-keyword">require</span> pageon/stitcher-core <span class="hljs-variable">@beta</span></code></pre>
<h3 id="changelog"><a href="#changelog" class="heading-anchor">#</a> Changelog</h3>
<p>Note the a few config parameters are changed. These changes might fall under the category "breaking",
but were really needed in order to get a more consistent API, before a real 1.0.0 release comes along.</p>
<ul>
<li>Add Parsedown extension to support classes on <code><pre></code> tags in fenced code blocks.</li>
<li>Disable directory listing via .htaccess.</li>
<li>Add <code>redirect.www</code> and <code>redirect.https</code> options. Allowing to automatically redirect non-www to www, and http to https.</li>
<li>Add <code>redirect</code> option in site config files to make a route redirect to another page.</li>
<li>Use <code>pageon/html-meta</code> ^2.0 from now on. Lots of tweaks to social meta tags were added.</li>
<li>Add <code>async</code> option which, when <code>ext-pcntl</code> is installed, will enable asynchronous page rendering.</li>
<li>Add Parsedown extension to support <code>target="_blank"</code> links by prefixing the URL with <code>*</code>.</li>
<li>Add <code>sitemap.xml</code> support. When setting the <code>sitemap.url</code> variable, a <code>sitemap.xml</code> will be generated.</li>
<li>Fix bug with Collection Adapters not copying meta tags from the base page for its sub-pages.</li>
<li>Add responsive images support to markdown parser.</li>
<li>The following config parameters are changed (#2):
<ul>
<li>
<code>caches.cdn</code> becomes <code>cache.cdn</code>.</li>
<li>
<code>caches.image</code> becomes <code>cache.images</code>.</li>
<li>
<code>directories.htaccess</code> is removed.</li>
<li>
<code>minify</code> becomes <code>engines.minifier</code>
</li>
</ul>
</li>
<li>Support multiple extensions per template engine (#7).</li>
<li>Support nested conditions in the filter adapter (#1).</li>
<li>Remove unused <code>eninges.async</code> option.</li>
</ul>
 ]]></summary>

                <updated>2017-08-27T00:00:00+00:00</updated>
            </entry>
                                <entry>
                <title><![CDATA[ Mastering key bindings ]]></title>

                <link rel="alternate" href="https://stitcher.io/blog/mastering-key-bindings"/>

                <id>https://www.stitcher.io/blog/mastering-key-bindings</id>

                <author>
                    <name><![CDATA[ Brent Roose ]]></name>
                </author>

                <summary type="html"><![CDATA[ <p>This blog post aims to make you think about the way you use key bindings whilst programming.
You'll read about some techniques I use to assign key bindings, how to memorise them, and use them efficiently.
But before we go on, I'll need to explain why spending time on key bindings is worth the effort.</p>
<p><div class="ad-container">
    <script async type="text/javascript" src="//cdn.carbonads.com/carbon.js?serve=CK7ICK3W&placement=stitcherio" id="_carbonads_js"></script>
</div>
</p>
<h2 id="the-need-for-keys"><a href="#the-need-for-keys" class="heading-anchor">#</a> The need for keys</h2>
<p>I can't point to some psychological study to back this claim, just my own experience and common sense.
Using the mouse as less as possible when coding is a good thing.
You're not moving your hands around to grab the mouse, which saves time.
Also you don't have to make the mental switch between using a keyboard and a mouse as input device.</p>
<p>I believe these small things have to power to improve our skills as professional programmers significantly.
I've experienced a lot of gain by taking the time to learn to use the keyboard as often as I can.
While I'm still searching the optimal setup, I can already share some thoughts and techniques.
The most important thing to know is that key bindings are a matter of personal taste.
So don't take these next points as law, but rather apply them to your own situation.</p>
<blockquote>
<p>Key bindings are a personal preference.</p>
</blockquote>
<h2 id="the-meaning-of-modifiers"><a href="#the-meaning-of-modifiers" class="heading-anchor">#</a> The meaning of modifiers</h2>
<p>A keyboard has a few modifier keys, which allow you to modify the behaviour of other key presses.
A long time ago these keys were actually hard wired in the keyboard, to change the electronic bits sent to the computer.
In this modern time, it's still good to look at what their original meaning was.
It helped me define a formal definition for each modifier key, allowing me to remember what key combination belongs to which action.</p>
<blockquote>
<p>Define a personal meaning for each modifier key, and stick to it.</p>
</blockquote>
<h3 id="meta/command-(⌘)"><a href="#meta/command-(⌘)" class="heading-anchor">#</a> Meta/Command (⌘)</h3>
<p>I use this key when "executing" commands. Basically most of what's possible through the menu of an application.</p>
<h3 id="option/alt-(⌥)"><a href="#option/alt-(⌥)" class="heading-anchor">#</a> Option/Alt (⌥)</h3>
<p>Alt stands for "alternate", changing the behaviour of another key combination. I use this key for a related action
of another key binding.</p>
<h3 id="shift-(⇧)"><a href="#shift-(⇧)" class="heading-anchor">#</a> Shift (⇧)</h3>
<p>Shift has a double meaning. First it's used for selections, because that's default OS behaviour.
Second, it's also often used to reverse the action.</p>
<p>I prefer a maximum of two modifier keys, and if complexer combinations are needed, opt for <strong>double key bindings</strong>.
One exception though: Shift (⇧) may be used in combination with other modifier keys to reverse the action.</p>
<blockquote>
<p>Prefer at most two modifier keys, or use double key bindings.</p>
</blockquote>
<h3 id="control/ctrl-(^)"><a href="#control/ctrl-(^)" class="heading-anchor">#</a> Control/Ctrl (^)</h3>
<p>I use the control key for text- and code related manipulations.
Actions like moving the cursor, working with selections, working with lines, etc.
I find it hard to give a formal definition for the Control key, but its use is clear in most cases.</p>
<p>A note for Windows users: the Control key is used much more in comparison to the Meta (Windows) key.
Meaning you probably want to switch the definition of the two, or even ditch the Meta key.
Even though this might seem like a good idea, adding the meta key in your workflow can be a good thing,
as it adds another modifier key to your availability.</p>
<h3 id="function-(fn)"><a href="#function-(fn)" class="heading-anchor">#</a> Function (fn)</h3>
<p>Because the function key is often not accessible on desktop keyboards, I choose not to depend on this key.
I only make an exception for some edge cases like page-up or page-down.</p>
<h2 id="learning"><a href="#learning" class="heading-anchor">#</a> Learning</h2>
<p>Keeping my own definitions in mind, it's easy to start defining key bindings. Though to remember them requires practice.
I'd recommend not assigning all key bindings at once, but rather slowly add them when you need them.</p>
<blockquote>
<p>Assign new key bindings when you need them.</p>
</blockquote>
<p>I choose not to override operating system (OS) key bindings. Things like <code>copy</code>, <code>paste</code>, <code>select all</code> or <code>quit</code> are
never overridden.
Key binding defaults provided by your IDE or editor, however, may be changed.
If you come from Sublime Text like me, you've probably learned some defaults which you are accustomed with.
When switching to PHPStorm a few years ago, I decided to keep some of those key bindings I knew from Sublime.</p>
<blockquote>
<p>There's no need to change OS-level key bindings like <code>copy</code> or <code>select all</code>.</p>
</blockquote>
<p>Even now, I'm still changing key bindings from time to time. Especially when I came up with my definition list.
One thing I find useful when learning new key bindings, is to disable the old ones. IDEs like PHPStorm allow you to add
multiple combinations for the same action. I prefer to immediately notice when I'm using an old combination.
This makes me learn faster.</p>
<blockquote>
<p>Remove key bindings you wish to unlearn.</p>
</blockquote>
<p>Furthermore, when stuck in a situation, I try not to immediately grab the mouse.
I try to think the problem and define what I want to do.
Most of the time, I can remember which combination of keys should be pressed, because of the definition list above.
When my memory fails me, I'm lucky to be working in an IDE with awesome key binding management,
so it's easy to find the correct combination back.</p>
<blockquote>
<p>Don't grab the mouse when panicking.</p>
</blockquote>
<p>You keymap is a very personal file, which slowly grows to match your workflow the best. I recommend you storing a backup
of your keymap somewhere else, GitHub would be a good place.
<a target="_blank" href="https://github.com/brendt/settings-repository/blob/master/keymaps/Brendt.xml">Here's mine</a>.</p>
<blockquote>
<p>Check your keymap into version control.</p>
</blockquote>
<h3 id="a-few-of-my-own-examples"><a href="#a-few-of-my-own-examples" class="heading-anchor">#</a> A few of my own examples</h3>
<ul>
<li>
<code>⌘ p</code> Search file</li>
<li>
<code>⌘ ⇧ p</code> Search recent files</li>
<li>
<code>⌘ ⌥ p</code> Search symbols in file</li>
<li>
<code>⌘ ⌥ space</code> Show suggestions</li>
<li>
<code>⌘ ⌥ enter</code> Go to declaration</li>
<li>
<code>^ ⌥ →</code> Move right with camelHops</li>
<li>
<code>^ ⌥ ←</code> Move left with camelHops</li>
<li>
<code>⌥ ↑</code>  Move cursor paragraph up</li>
<li>
<code>⌥ ↓</code>  Move cursor paragraph down</li>
<li>
<code>⇧ ⌥ ↑</code> Extend selection</li>
<li>
<code>⇧ ⌥ ↓</code> Shrink selection</li>
</ul>
<h2 id="closing-thoughts"><a href="#closing-thoughts" class="heading-anchor">#</a> Closing thoughts</h2>
<p>I grew in love with key bindings over the years. I still use the mouse for basic navigation,
but once I start coding, I try to use it as little as possible. I find that it's easier to work this way.
Not only do I gain time by not switching as often to the mouse; I also find it puts less cognitive load on my brain,
meaning I'm able to concentrate more on coding.</p>
<p>This might seem like a small thing to do, but as a professional programmer, you're doing those small things many,
many times a day. It's worth taking the time to optimise these areas and skills, I find they make me a better programmer.</p>
<p>Do you want to read more about cognitive load? I've written about <a target="_blank" href="https://www.stitcher.io/blog/a-programmers-cognitive-load">fonts and visuals</a>
in a previous blog post. Do you still have a question or something on your mind? <a href="mailto:brendt@stitcher.io">Send me an email</a>!</p>
 ]]></summary>

                <updated>2017-08-25T00:00:00+00:00</updated>
            </entry>
                                <entry>
                <title><![CDATA[ Responsive images as CSS background ]]></title>

                <link rel="alternate" href="https://stitcher.io/blog/responsive-images-as-css-background"/>

                <id>https://www.stitcher.io/blog/responsive-images-as-css-background</id>

                <author>
                    <name><![CDATA[ Brent Roose ]]></name>
                </author>

                <summary type="html"><![CDATA[ <p>Integrating the <a target="_blank" href="https://responsiveimages.org/">Responsive Images spec</a> together with CSS backgrounds, allowing for more flexibility for eg. hero images because you can use <code>background-size: cover;</code> etc., and still have the full benefits of responsive image loading.</p>
<pre><code class="language-html hljs xml" data-lang="html"><span class="hljs-tag">&lt;<span class="hljs-name">html&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">head&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">style&gt;</span><span class="css">
        <span class="hljs-selector-tag">img</span> {
            <span class="hljs-attribute">width</span>:<span class="hljs-number">100%</span>;
        }
        <span class="hljs-selector-tag">img</span><span class="hljs-selector-class">.loaded</span> {
            <span class="hljs-attribute">display</span>: none;
        }
        <span class="hljs-selector-class">.responsive-image</span> {
            <span class="hljs-attribute">width</span>:<span class="hljs-number">100%</span>;
            <span class="hljs-attribute">height</span>:<span class="hljs-number">500px</span>;
            <span class="hljs-attribute">background-size</span>: cover;
            <span class="hljs-attribute">background-position</span>: center;
        }
    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">head&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">body&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">div <span class="hljs-attr">class=<span class="hljs-string">"responsive-image"&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">img <span class="hljs-attr">src=<span class="hljs-string">"./small.jpg"</span> <span class="hljs-attr">srcset</span>=<span class="hljs-string">"./large.png 3000w, ./medium.jpg 1920w, ./small.jpg 425w"</span> &gt;</span>
    <span class="hljs-tag">&lt;/<span class="hljs-name">div&gt;</span>
    
    <span class="hljs-tag">&lt;<span class="hljs-name">script&gt;</span><span class="javascript">
        <span class="hljs-built_in">document</span>.addEventListener(<span class="hljs-string">'DOMContentLoaded'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{
            <span class="hljs-keyword">const</span> images = <span class="hljs-built_in">document</span>.querySelectorAll(<span class="hljs-string">'.responsive-image'</span>);
            
            [].forEach.call(images, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">imageContainer</span>) </span>{
                <span class="hljs-keyword">const</span> image = imageContainer.querySelector(<span class="hljs-string">'img'</span>);
                
                image.addEventListener(<span class="hljs-string">'load'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{
                    <span class="hljs-keyword">if</span> (!image.currentSrc) {
                        <span class="hljs-keyword">return</span>;
                    }
                    
                    imageContainer.style[<span class="hljs-string">'background-image'</span>] = <span class="hljs-string">"url('"</span> + image.currentSrc + <span class="hljs-string">"')"</span>;
                    image.classList.add(<span class="hljs-string">'loaded'</span>);
                });
            })
        });
    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">body&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">html&gt;</span></code></pre>
 ]]></summary>

                <updated>2017-06-24T00:00:00+00:00</updated>
            </entry>
                                <entry>
                <title><![CDATA[ Object oriented generators ]]></title>

                <link rel="alternate" href="https://stitcher.io/blog/object-oriented-generators"/>

                <id>https://www.stitcher.io/blog/object-oriented-generators</id>

                <author>
                    <name><![CDATA[ Brent Roose ]]></name>
                </author>

                <summary type="html"><![CDATA[ <p>The following code shows an object oriented way of implementing a well known generator function: to read lines from a large file.</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FileReader</span> <span class="hljs-keyword">implements</span> \<span class="hljs-title">Iterator</span> 
</span>{
    <span class="hljs-keyword">private</span> $handle;
    <span class="hljs-keyword">private</span> $current;

    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">read</span><span class="hljs-params">(string $fileName)</span> : <span class="hljs-title">FileReader</span> </span>{
        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-keyword">self</span>($fileName);
    }

    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span><span class="hljs-params">(string $fileName)</span> </span>{
        <span class="hljs-keyword">$this</span>-&gt;handle = fopen($fileName, <span class="hljs-string">'r'</span>);
        <span class="hljs-keyword">$this</span>-&gt;next();
    }

    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span><span class="hljs-params">()</span> </span>{
        fclose(<span class="hljs-keyword">$this</span>-&gt;handle);
    }

    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">current</span><span class="hljs-params">()</span> </span>{
        <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;current;
    }

    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">next</span><span class="hljs-params">()</span> </span>{
        <span class="hljs-keyword">$this</span>-&gt;current = fgets(<span class="hljs-keyword">$this</span>-&gt;handle);
    }

    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">key</span><span class="hljs-params">()</span> </span>{
        <span class="hljs-keyword">return</span> ftell(<span class="hljs-keyword">$this</span>-&gt;handle);
    }

    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">valid</span><span class="hljs-params">()</span> </span>{
        <span class="hljs-keyword">return</span> !feof(<span class="hljs-keyword">$this</span>-&gt;handle);
    }

    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">rewind</span><span class="hljs-params">()</span> </span>{
        rewind(<span class="hljs-keyword">$this</span>-&gt;handle);
    }
}</code></pre>
<p>Using the file reader.</p>
<pre><code class="language-php hljs php" data-lang="php">$lines = FileReader::read(<span class="hljs-string">'path_to_large_file.txt'</span>);

<span class="hljs-keyword">foreach</span> ($lines <span class="hljs-keyword">as</span> $line) {
    <span class="hljs-keyword">echo</span> $line;
}</code></pre>
<p>A comparison to using generators and the <code>yield</code> keyword, based on the tests I ran:</p>
<ul>
<li>This approach takes the same amount of time to execute.</li>
<li>It has the same memory footprint as a generator function.</li>
<li>It has the benefit of easier re-usability (in my opinion).</li>
</ul>
<p>In comparison to <code>file_get_contents</code>: reading the same file required of 15MB of memory, whilst
this solution required only 2MB, because it only reads one line in memory at a time.</p>
<p>To round up, this is the generator solution using <code>yield</code>.</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">read</span><span class="hljs-params">($fileName)</span> </span>{
    $handle = fopen($fileName, <span class="hljs-string">'r'</span>);

    <span class="hljs-keyword">while</span> (!feof($handle)) {
        <span class="hljs-keyword">yield</span> fgets($handle);
    }

    fclose($handle);
}

$lines = read(<span class="hljs-string">'path_to_large_file'</span>);

<span class="hljs-keyword">foreach</span> ($lines <span class="hljs-keyword">as</span> $line) {
    <span class="hljs-keyword">echo</span> $line;
}</code></pre>
 ]]></summary>

                <updated>2017-06-17T00:00:00+00:00</updated>
            </entry>
                                <entry>
                <title><![CDATA[ Process forks ]]></title>

                <link rel="alternate" href="https://stitcher.io/blog/process-forks"/>

                <id>https://www.stitcher.io/blog/process-forks</id>

                <author>
                    <name><![CDATA[ Brent Roose ]]></name>
                </author>

                <summary type="html"><![CDATA[ <pre><code class="language-php hljs php" data-lang="php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">async</span><span class="hljs-params">(Process $process)</span> : <span class="hljs-title">Process</span> </span>{
    socket_create_pair(AF_UNIX, SOCK_STREAM, <span class="hljs-number">0</span>, $sockets);
    [$parentSocket, $childSocket] = $sockets;

    <span class="hljs-keyword">if</span> (($pid = pcntl_fork()) == <span class="hljs-number">0</span>) {
        socket_close($childSocket);
        socket_write($parentSocket, serialize($process-&gt;execute()));
        socket_close($parentSocket);
        <span class="hljs-keyword">exit</span>;
    }

    socket_close($parentSocket);

    <span class="hljs-keyword">return</span> $process
        -&gt;setStartTime(time())
        -&gt;setPid($pid)
        -&gt;setSocket($childSocket);
}

<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">wait</span><span class="hljs-params">(array $processes)</span> : <span class="hljs-title">array</span> </span>{
    $output = [];

    <span class="hljs-keyword">while</span> (count($processes)) {
        <span class="hljs-keyword">foreach</span> ($processes <span class="hljs-keyword">as</span> $key =&gt; $process) {
            $processStatus = pcntl_waitpid($process-&gt;getPid(), $status, WNOHANG | WUNTRACED);

            <span class="hljs-keyword">if</span> ($processStatus == $process-&gt;getPid()) {
                $output[] = unserialize(socket_read($process-&gt;getSocket(), <span class="hljs-number">4096</span>));
                socket_close($process-&gt;getSocket());
                $process-&gt;triggerSuccess();

                <span class="hljs-keyword">unset</span>($processes[$key]);
            } <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ($processStatus == <span class="hljs-number">0</span>) {
                <span class="hljs-keyword">if</span> ($process-&gt;getStartTime() + $process-&gt;getMaxRunTime() &lt; time() || pcntl_wifstopped($status)) {
                    <span class="hljs-keyword">if</span> (!posix_kill($process-&gt;getPid(), SIGKILL)) {
                        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> \<span class="hljs-keyword">Exception</span>(<span class="hljs-string">"Failed to kill {$process-&gt;getPid()}: "</span> . posix_strerror(posix_get_last_error()));
                    }
                    
                    <span class="hljs-keyword">unset</span>($processes[$key]);
                }
            } <span class="hljs-keyword">else</span> {
                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> \<span class="hljs-keyword">Exception</span>(<span class="hljs-string">"Could not reliably manage process {$process-&gt;getPid()}"</span>);
            }
        }
        
        <span class="hljs-keyword">if</span> (!count($processes)) {
            <span class="hljs-keyword">break</span>;
        }

        usleep(<span class="hljs-number">100000</span>);
    }

    <span class="hljs-keyword">return</span> $output;
}</code></pre>
<p>The <code>Process</code> class, used to pass data in a defined way.</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Process</span>
</span>{
    <span class="hljs-keyword">protected</span> $pid;
    <span class="hljs-keyword">protected</span> $name;
    <span class="hljs-keyword">protected</span> $socket;
    <span class="hljs-keyword">protected</span> $successCallback;
    <span class="hljs-keyword">protected</span> $startTime;
    <span class="hljs-keyword">protected</span> $maxRunTime = <span class="hljs-number">300</span>;
    
    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">execute</span><span class="hljs-params">()</span></span>;

    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">onSuccess</span><span class="hljs-params">(callable $callback)</span> : <span class="hljs-title">Process</span> </span>{
        <span class="hljs-keyword">$this</span>-&gt;successCallback = $callback;

        <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>;
    }

    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">triggerSuccess</span><span class="hljs-params">()</span> </span>{
        <span class="hljs-keyword">if</span> (!<span class="hljs-keyword">$this</span>-&gt;successCallback) {
            <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;
        }

        <span class="hljs-keyword">return</span> call_user_func_array(<span class="hljs-keyword">$this</span>-&gt;successCallback, [<span class="hljs-keyword">$this</span>]);
    }

    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">setPid</span><span class="hljs-params">($pid)</span> : <span class="hljs-title">Process</span> </span>{
        <span class="hljs-keyword">$this</span>-&gt;pid = $pid;

        <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>;
    }

    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getPid</span><span class="hljs-params">()</span> </span>{
        <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;pid;
    }

    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">setSocket</span><span class="hljs-params">($socket)</span> : <span class="hljs-title">Process</span> </span>{
        <span class="hljs-keyword">$this</span>-&gt;socket = $socket;

        <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>;
    }

    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getSocket</span><span class="hljs-params">()</span> </span>{
        <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;socket;
    }

    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">setName</span><span class="hljs-params">(string $name)</span> : <span class="hljs-title">Process</span> </span>{
        <span class="hljs-keyword">$this</span>-&gt;name = $name;

        <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>;
    }

    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getName</span><span class="hljs-params">()</span> : <span class="hljs-title">string</span> </span>{
        <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;name;
    }

    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">setStartTime</span><span class="hljs-params">($startTime)</span> </span>{
        <span class="hljs-keyword">$this</span>-&gt;startTime = $startTime;

        <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>;
    }

    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getStartTime</span><span class="hljs-params">()</span> </span>{
        <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;startTime;
    }

    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">setMaxRunTime</span><span class="hljs-params">(int $maxRunTime)</span> : <span class="hljs-title">Process</span> </span>{
        <span class="hljs-keyword">$this</span>-&gt;maxRunTime = $maxRunTime;

        <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>;
    }

    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getMaxRunTime</span><span class="hljs-params">()</span> : <span class="hljs-title">int</span> </span>{
        <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;maxRunTime;
    }
}</code></pre>
<p>A concrete Process implementation.</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyProcess</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Process</span>
</span>{
    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">execute</span><span class="hljs-params">()</span> </span>{
        sleep(<span class="hljs-number">1</span>);
        
        <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;
    }
}</code></pre>
<p>And bringing it all together.</p>
<pre><code class="language-php hljs php" data-lang="php">$processA = async(<span class="hljs-keyword">new</span> MyProcess());
$processB = async(<span class="hljs-keyword">new</span> MyProcess());

$output = wait([$processA, $processB]);

print_r($output);
<span class="hljs-keyword">die</span>(<span class="hljs-string">'Done!'</span>);</code></pre>
 ]]></summary>

                <updated>2017-06-09T00:00:00+00:00</updated>
            </entry>
                                <entry>
                <title><![CDATA[ Performance 101: building the better web ]]></title>

                <link rel="alternate" href="https://stitcher.io/blog/performance-101-building-the-better-web"/>

                <id>https://www.stitcher.io/blog/performance-101-building-the-better-web</id>

                <author>
                    <name><![CDATA[ Brent Roose ]]></name>
                </author>

                <summary type="html"><![CDATA[ <p>Today we're looking into web performance. I'll share some useful links to articles and tutorials written by people with a lot of professional experience on the topic. I am writing from the perspective of a developer who brought pieces of this knowledge into practice. I've learned some lessons along the way, which you can learn from too.</p>
<p>If you want to reach out, to talk about performance, or with additions to this post, you can always reach me <a href="mailto:brendt@stitcher.io">via email</a>.</p>
<p>Without further ado, let's dive into the mystical subject of web performance. We'll start discussing the mindset you should have when building performant websites. Then we'll move on to a lot of practical examples, and links to other learning resources.</p>
<h3 id="performance-mindset"><a href="#performance-mindset" class="heading-anchor">#</a> Performance mindset</h3>
<p>If there's one thing you should take away from this post, it's the mindset every web developer should have. The industry builds tools, frameworks and systems to make the life of developers easier. All the while forgetting what web development actually is about. We're not making artisanal pieces of art anymore (maybe we never were?). We're generally aiming for fast development and quick results. We're forgetting about what matters in the end: the website and its visitors.</p>
<p>This post is meant for people with that mindset; people who want to become the best developer they can be. Always pushing yourself to the next level for a better end result. If you're a web developer who relates to this, understanding performance is one of the most important pillars to build upon.</p>
<p>That's it for the philosophical part of this post. Of course I'm completely ignoring the business side of the IT world. I'm not talking about money, time or scope here. I'm talking about improving your own development skills so that you could use that knowledge and experience in spare time projects or for real clients and work.</p>
<h3 id="web-basics:-html"><a href="#web-basics:-html" class="heading-anchor">#</a> Web basics: HTML</h3>
<p>One of the key components to understand and improve web performance is to know how the browser renders HTML. There's a lot more to it than you might think, and understanding these steps makes you reason completely differently about your own code. Google has the best crash course on the topic: <a target="_blank" href="https://developers.google.com/web/fundamentals/performance/">https://developers.google.com/web/fundamentals/performance/</a>, especially the "critical rendering path" section opened my eyes.</p>
<p>Another important concept to understand is static HTML pages. In the end, they are what's served to the user. There's no need to generate pages on the fly, while the user is waiting to see the result. Dynamic websites abuse the user's time for the sake of easy development. Now I'm not saying dynamic websites are bad. What I do say is that every dynamic system should have the technology in place to exclude the dynamic phase from the request/response cycle. More on that topic later. If you're into real static websites, <a target="_blank" href="https://www.staticgen.com/">https://staticgen.com</a> is a good place to find the right tool for your needs.</p>
<p>Moving on to responsive images: possibly the number one optimisation when it comes to bandwidth usage. The responsive images spec is designed to address the issue of large images, or render blocking JavaScript workarounds. It's completely backwards compatible (I'm talking to you Edge), and has a good chance of improving your website's loading time: <a target="_blank" href="https://responsiveimages.org/">https://responsiveimages.org</a>.</p>
<h3 id="backend-development"><a href="#backend-development" class="heading-anchor">#</a> Backend development</h3>
<p>I've already mentioned dynamic websites in the previous section. They are of course a must in the modern web; but you should think about which pages need to render things on the fly, and which could be cacheable. There are many layers of caching possible on the server side. We'll discuss eg. Varnish cache later in this post. Caching your backend code will highly depend on the kind of language and framework you're using. The most important thing to mention about caching is that you shouldn't view your cache as a layer "on top" of your application. It should be an integral part of all the code you write.</p>
<p>As a PHP developer, I'm used to the strict request/response lifecycle every PHP web application goes through. There are also a lot of other languages which provide the same logic for web applications. This approach is very easy to reason about, but it means the application has to be bootstrapped from scratch for every single request. Libraries like <a target="_blank" href="http://reactphp.org/">ReactPHP</a> or <a target="_blank" href="https://github.com/amphp/amp">AMP</a> address this issue by enabling the developer to handle multiple requests from a single bootstrapped application. Asynchronous and parallel applications add a lot of complexity at first, and might be very difficult to wrap your head around. But it might very well mean a huge decrease in response time.</p>
<h3 id="server-side"><a href="#server-side" class="heading-anchor">#</a> Server side</h3>
<p>Returning to the topic of caching, there's a lot that can be done server side. First of all there are caching headers which you should definitely implement: <a target="_blank" href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control">https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control</a>.</p>
<p>Second, you should serve content that's ready to be served. Use a CDN and Varnish in front of your real server. This way you're able to serve images, content pages, etc. immediately, having been already generated before. One of the dangers of using a so called "proxy" like Varnish is that many developers might see it as that "layer on top of your own application". In reality, you'll need to communicate a lot with Varnish from within your own application. You can read more about Varnish here: <a target="_blank" href="https://varnish-cache.org/">https://varnish-cache.org</a>.</p>
<p>The benefit of your own server? It's <strong>your server</strong>. You have control over the resources used and available. Don't put extra load on the client, when you could let your server take care of it. This is of course a very simplified way of thinking about resources. But it's always possible to upgrade your server's hardware, when you have no control over the hardware clients are using.</p>
<p>And lastely, if you haven't implemented HTTP/2 yet: implement HTTP/2! Not sure why? This might give you an idea: <a target="_blank" href="https://www.sitepoint.com/what-is-http2/">https://sitepoint.com/what-is-http2</a>.</p>
<h3 id="frontend-development"><a href="#frontend-development" class="heading-anchor">#</a> Frontend development</h3>
<p><strong>Disclaimer:</strong> I'm a backend web developer. I have written, and still write lots of CSS and JavaScript code, but I'm not in any way a professional when it comes to frontend web development. So I'll only use common sense and reasoning to share a few concepts of performance improvement.</p>
<p>You should think what resources a page really needs. If that particular page only needs 5 kilobytes out of 100 kilobytes of CSS, then don't load the other 95 kilobytes! The same goes for JavaScript.</p>
<p>Also think about inlining the important resources in your HTML pages, at least while HTTP/2 server push hasn't gone mainstream yet.</p>
<p>A good place to go from here would be Tim Kadlec's blog: <a target="_blank" href="https://timkadlec.com/">https://timkadlec.com</a>.</p>
<h3 id="in-summary"><a href="#in-summary" class="heading-anchor">#</a> In summary</h3>
<ul>
<li>Think performance-first.</li>
<li>Understand how HTML is loaded and rendered.</li>
<li>Serve content that's ready to be served.</li>
<li>Don't abuse the user's time by dynamically rendering on the fly when it's not needed.</li>
<li>Improve the request/response cycle server-side.</li>
<li>Put the load on your server, not the client.</li>
<li>Don't view caching as a layer on top, but rather as an integrated part of your application.</li>
<li>Set browser caching headers, use CDNs and take a look at Varnish.</li>
<li>Don't load all minified CSS or JS when you only need 10% of it on that page.</li>
</ul>
<p>Lot's of things to think about. This is my personal checklist I try to keep in mind when developing websites, both professionally and in my spare time. Like I said at the beginning of this post, you shouldn't always do everything just because. But you should understand these concepts, and know when it's appropriate to use them. By doing so, you're contributing to the better web.</p>
 ]]></summary>

                <updated>2017-05-30T00:00:00+00:00</updated>
            </entry>
                                <entry>
                <title><![CDATA[ Array objects ]]></title>

                <link rel="alternate" href="https://stitcher.io/blog/aray-objects-with-fixed-types"/>

                <id>https://www.stitcher.io/blog/aray-objects-with-fixed-types</id>

                <author>
                    <name><![CDATA[ Brent Roose ]]></name>
                </author>

                <summary type="html"><![CDATA[ <pre><code class="language-php hljs php" data-lang="php"><span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Collection</span> <span class="hljs-keyword">implements</span> \<span class="hljs-title">ArrayAccess</span>, \<span class="hljs-title">Iterator</span>
</span>{
    <span class="hljs-keyword">private</span> $position;

    <span class="hljs-keyword">private</span> $array = [];

    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span><span class="hljs-params">()</span> </span>{
        <span class="hljs-keyword">$this</span>-&gt;position = <span class="hljs-number">0</span>;
    }

    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">current</span><span class="hljs-params">()</span> </span>{
        <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;array[<span class="hljs-keyword">$this</span>-&gt;position];
    }

    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">offsetGet</span><span class="hljs-params">($offset)</span> </span>{
        <span class="hljs-keyword">return</span> <span class="hljs-keyword">isset</span>(<span class="hljs-keyword">$this</span>-&gt;array[$offset]) ? <span class="hljs-keyword">$this</span>-&gt;array[$offset] : <span class="hljs-keyword">null</span>;
    }

    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">offsetSet</span><span class="hljs-params">($offset, $value)</span> </span>{
        <span class="hljs-keyword">if</span> (is_null($offset)) {
            <span class="hljs-keyword">$this</span>-&gt;array[] = $value;
        } <span class="hljs-keyword">else</span> {
            <span class="hljs-keyword">$this</span>-&gt;array[$offset] = $value;
        }
    }

    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">offsetExists</span><span class="hljs-params">($offset)</span> </span>{
        <span class="hljs-keyword">return</span> <span class="hljs-keyword">isset</span>(<span class="hljs-keyword">$this</span>-&gt;array[$offset]);
    }

    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">offsetUnset</span><span class="hljs-params">($offset)</span> </span>{
        <span class="hljs-keyword">unset</span>(<span class="hljs-keyword">$this</span>-&gt;array[$offset]);
    }

    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">next</span><span class="hljs-params">()</span> </span>{
        ++<span class="hljs-keyword">$this</span>-&gt;position;
    }

    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">key</span><span class="hljs-params">()</span> </span>{
        <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;position;
    }

    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">valid</span><span class="hljs-params">()</span> </span>{
        <span class="hljs-keyword">return</span> <span class="hljs-keyword">isset</span>(<span class="hljs-keyword">$this</span>-&gt;array[<span class="hljs-keyword">$this</span>-&gt;position]);
    }

    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">rewind</span><span class="hljs-params">()</span> </span>{
        <span class="hljs-keyword">$this</span>-&gt;position = <span class="hljs-number">0</span>;
    }
}</code></pre>
<p>A concrete implementation of the <code>Collection</code> class.</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TypeCollection</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Collection</span> 
</span>{
    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">offsetSet</span><span class="hljs-params">($offset, $value)</span> </span>{
        <span class="hljs-keyword">if</span> (!$value <span class="hljs-keyword">instanceof</span> Type) {
            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> \InvalidArgumentException(<span class="hljs-string">"Value must be of type `Type`."</span>);
        }
    
        <span class="hljs-keyword">parent</span>::offsetSet($offset, $value);
    }
    
    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">offsetGet</span><span class="hljs-params">($offset)</span>: ?<span class="hljs-title">Type</span> </span>{
        <span class="hljs-keyword">return</span> <span class="hljs-keyword">parent</span>::offsetGet($offset);
    }
    
    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">current</span><span class="hljs-params">()</span>: <span class="hljs-title">Type</span> </span>{
        <span class="hljs-keyword">return</span> <span class="hljs-keyword">parent</span>::current();
    }
}</code></pre>
<p>Using the <code>TypeCollection</code> can be done like this.</p>
<pre><code class="language-php hljs php" data-lang="php">$collection = <span class="hljs-keyword">new</span> TypeCollection();
$collection[] = <span class="hljs-keyword">new</span> Type();

<span class="hljs-keyword">foreach</span> ($collection <span class="hljs-keyword">as</span> $item) {
    var_dump($item);
}</code></pre>
 ]]></summary>

                <updated>2017-05-25T00:00:00+00:00</updated>
            </entry>
                                <entry>
                <title><![CDATA[ Stitcher beta 1 ]]></title>

                <link rel="alternate" href="https://stitcher.io/blog/stitcher-beta-1"/>

                <id>https://www.stitcher.io/blog/stitcher-beta-1</id>

                <author>
                    <name><![CDATA[ Brent Roose ]]></name>
                </author>

                <summary type="html"><![CDATA[ <p>The first beta release of Stitcher has arrived. Together with a lot of bugfixes, the website has been given some more love.</p>
<h3 id="installation"><a href="#installation" class="heading-anchor">#</a> Installation</h3>
<p>The installation package, <code>pageon/stitcher</code>, now loads the beta version by default. If you're running an existing project, your should also require the beta version now:</p>
<pre><code class="language-elixir hljs elixir" data-lang="elixir">composer <span class="hljs-keyword">require</span> pageon/stitcher-core <span class="hljs-variable">@beta</span></code></pre>
<h3 id="changelog"><a href="#changelog" class="heading-anchor">#</a> Changelog</h3>
<ul>
<li>Add empty array fallback in <code>FilterAdapter</code> to prevent undefined index error.</li>
<li>Improved plugin initialisation support. The temporary <code>init</code> function isn't required anymore, the constructor can now be used.</li>
<li>Make the adapter factory extensible.</li>
<li>Improve the CollectionAdapter by adding the <code>browse</code> variable. This variable can be used to browse the detail pages.
It has a <code>next</code> and <code>prev</code> key which contains the next and previous entry, if there are any.</li>
<li>Moved <code>Brendt\Stitcher\SiteParser</code> to <code>Brendt\Stitcher\Parser\Site\SiteParser</code> and refactored its service definition.</li>
<li>Added <code>Brendt\Stitcher\Parser\Site\PageParser</code> to parse a single page, which is no longer the responsibility of <code>SiteParser</code>.</li>
<li>Bugfix for general meta configuration overriding other meta values.</li>
</ul>
 ]]></summary>

                <updated>2017-05-20T00:00:00+00:00</updated>
            </entry>
                                <entry>
                <title><![CDATA[ PHP Generics and why we need them ]]></title>

                <link rel="alternate" href="https://stitcher.io/blog/php-generics-and-why-we-need-them"/>

                <id>https://www.stitcher.io/blog/php-generics-and-why-we-need-them</id>

                <author>
                    <name><![CDATA[ Brent Roose ]]></name>
                </author>

                <summary type="html"><![CDATA[ <p>In today's blog post we'll explore some common problems with arrays in PHP. All the problems and issues listed could be solved with a pending RFC which adds generics to PHP. We won't explore in too much detail what generics are, but at the end of this read, you should have a good idea as to why they are useful, and why we really want them in PHP. So without further ado, let's dive into the subject.</p>
<p><div class="ad-container">
    <script async type="text/javascript" src="//cdn.carbonads.com/carbon.js?serve=CK7ICK3W&placement=stitcherio" id="_carbonads_js"></script>
</div>
</p>
<p>Imagine you have a collection of blog posts, loaded from a data source.</p>
<pre><code class="language-php hljs php" data-lang="php">$posts = $blogModel-&gt;find();</code></pre>
<p>Now you want to loop over every post, and do <em>something</em> with its data; let's say, the <code>id</code>.</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-keyword">foreach</span> ($posts <span class="hljs-keyword">as</span> $post) {
    $id = $post-&gt;getId();
    
    <span class="hljs-comment">// Do something</span>
}</code></pre>
<p>This is a scenario that happens often.
And it's this scenario we'll explore to discuss why generics are awesome,
and why the PHP community desperately needs them.</p>
<p>Let's take a look at the problems of the above approach.</p>
<h2 id="data-integrity"><a href="#data-integrity" class="heading-anchor">#</a> Data integrity</h2>
<p>In PHP, an array is a collection of...things.</p>
<pre><code class="language-php hljs php" data-lang="php">$posts = [
    <span class="hljs-string">'foo'</span>,
    <span class="hljs-keyword">null</span>,
    <span class="hljs-keyword">self</span>::BAR,
    <span class="hljs-keyword">new</span> Post(<span class="hljs-string">'Lorem'</span>),
];</code></pre>
<p>Looping over this array of posts would result in a fatal error.</p>
<pre><code class="language-vbnet hljs vbnet" data-lang="vbnet">PHP Fatal <span class="hljs-keyword">error</span>:  Uncaught <span class="hljs-keyword">Error</span>: <span class="hljs-keyword">Call</span> <span class="hljs-keyword">to</span> a member <span class="hljs-keyword">function</span> getId() <span class="hljs-keyword">on</span> <span class="hljs-built_in">string</span></code></pre>
<p>We're calling <code>->getId()</code> on the string <code>'foo'</code>. Not done. When looping over an array, we want to be sure that
every value is of a certain type. We could do something like this.</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-keyword">foreach</span> ($posts <span class="hljs-keyword">as</span> $post) {
    <span class="hljs-keyword">if</span> (!$post <span class="hljs-keyword">instanceof</span> Post) {
        <span class="hljs-keyword">continue</span>;
    }

    $id = $post-&gt;getId();
    
    <span class="hljs-comment">// Do something</span>
}</code></pre>
<p>This would work, but if you've written some production PHP code, you know these checks can grow quickly, and pollute
the codebase. In our example, we could verify the type of each entry in the <code>->find()</code> method on <code>$blogModel</code>.
However, that's just moving the problem from one place to another. It's a bit better though.</p>
<p>There's another problem with data integrity. Say you have a method which requires an array of <code>Post</code>s.</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">handlePosts</span><span class="hljs-params">(array $posts)</span> </span>{
    <span class="hljs-keyword">foreach</span> ($posts <span class="hljs-keyword">as</span> $post) {
        <span class="hljs-comment">// ...</span>
    }
}</code></pre>
<p>Again, we could add extra checks in this loop, but we could not guarantee that <code>$posts</code> only holds a collection of <code>Post</code>s.</p>
<p><a target="_blank" href="http://php.net/manual/en/functions.arguments.php#functions.variable-arg-list">As of PHP 7.0</a>, you could use the <code>...</code> operator
to work around this issue.</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">handlePosts</span><span class="hljs-params">(Post ...$posts)</span> </span>{
    <span class="hljs-keyword">foreach</span> ($posts <span class="hljs-keyword">as</span> $post) {
        <span class="hljs-comment">// ...</span>
    }
}</code></pre>
<p>But the downside of this approach: you would have to call the function with an unpacked array.</p>
<pre><code class="language-php hljs php" data-lang="php">handlePosts(...$posts);</code></pre>
<h2 id="performance"><a href="#performance" class="heading-anchor">#</a> Performance</h2>
<p>You can imagine it's better to know beforehand whether an array contains only elements of a certain type, rather then
manually checking the types within a loop, every, single, time.</p>
<p>We can't do benchmarks on generics, because they don't exist yet, so its only guessing as to how they would impact performance.
It's not insane to assume though, that PHP's optimised behaviour, written in C; is a better way to solve the problem than
to write lots of userland code.</p>
<h2 id="code-completion"><a href="#code-completion" class="heading-anchor">#</a> Code completion</h2>
<p>I don't know about you, but I use an IDE when writing PHP code. Code completion increases productivity immensely, so I'd also
like to use it here. When looping over posts, we want our IDE to know each <code>$post</code> is an instance of <code>Post</code>. Let's take
a look at the plain PHP implementation.</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-comment"># BlogModel</span>

<span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">find</span><span class="hljs-params">()</span> : <span class="hljs-title">array</span> </span>{
    <span class="hljs-comment">// return ...</span>
}</code></pre>
<p>As of PHP 7.0, return types were added, and in PHP 7.1 they were refined with nullables and void. But there's no way
our IDE can know what's inside the array. So we're falling back to PHPDoc.</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-comment">/**
 * <span class="hljs-doctag">@return</span> Post[]
 */</span>
<span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">find</span><span class="hljs-params">()</span> : <span class="hljs-title">array</span> </span>{
    <span class="hljs-comment">// return ...</span>
}</code></pre>
<p>When using a "generic" implementation of e.g. a model class, type hinting the <code>->find()</code> method might not be possible.
So we're stuck with type hinting the <code>$posts</code> variable, in our code.</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-comment">/** <span class="hljs-doctag">@var</span> Post[] $posts */</span>
$posts = $blogModel-&gt;find();</code></pre>
<p>Both the uncertainty of what's exactly in an array, the performance and maintenance impact because of scattered code,
and the inconvenience when writing those extra checks, makes me long for a better solution.</p>
<p>That solution, in my opinion is <a target="_blank" href="https://wiki.php.net/rfc/generics">generics</a>. I won't explain in detail what generics
do, you can read the RFC to know that. But I will give you an example of how generics could solve these issues, guaranteeing
the developer would always have the correct data in a collection.</p>
<p><strong>Big note</strong>: generics do not exist in PHP, yet. The RFC targeted PHP 7.1, and has no further information about the
future. The following code is based on the <a target="_blank" href="http://php.net/manual/en/class.iterator.php">the Iterator interface</a>
and <a target="_blank" href="http://php.net/manual/en/class.arrayaccess.php">the ArrayAccess interface</a>, which both exist as of PHP 5.0.
At the end, we'll dive into a generics example, which is dummy code.</p>
<p>First we'll create a <code>Collection</code> class which works in PHP 5.0+. This class implements <code>Iterator</code> to be able to
loop over its items, and <code>ArrayAccess</code> to be able to use array-like syntax to add and access items in the
collection.</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Collection</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Iterator</span>, <span class="hljs-title">ArrayAccess</span>
</span>{
    <span class="hljs-keyword">private</span> $position;

    <span class="hljs-keyword">private</span> $array = [];

    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span><span class="hljs-params">()</span> </span>{
        <span class="hljs-keyword">$this</span>-&gt;position = <span class="hljs-number">0</span>;
    }

    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">current</span><span class="hljs-params">()</span> </span>{
        <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;array[<span class="hljs-keyword">$this</span>-&gt;position];
    }

    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">next</span><span class="hljs-params">()</span> </span>{
        ++<span class="hljs-keyword">$this</span>-&gt;position;
    }

    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">key</span><span class="hljs-params">()</span> </span>{
        <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;position;
    }

    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">valid</span><span class="hljs-params">()</span> </span>{
        <span class="hljs-keyword">return</span> <span class="hljs-keyword">isset</span>(<span class="hljs-keyword">$this</span>-&gt;array[<span class="hljs-keyword">$this</span>-&gt;position]);
    }

    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">rewind</span><span class="hljs-params">()</span> </span>{
        <span class="hljs-keyword">$this</span>-&gt;position = <span class="hljs-number">0</span>;
    }

    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">offsetExists</span><span class="hljs-params">($offset)</span> </span>{
        <span class="hljs-keyword">return</span> <span class="hljs-keyword">isset</span>(<span class="hljs-keyword">$this</span>-&gt;array[$offset]);
    }

    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">offsetGet</span><span class="hljs-params">($offset)</span> </span>{
        <span class="hljs-keyword">return</span> <span class="hljs-keyword">isset</span>(<span class="hljs-keyword">$this</span>-&gt;array[$offset]) ? <span class="hljs-keyword">$this</span>-&gt;array[$offset] : <span class="hljs-keyword">null</span>;
    }

    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">offsetSet</span><span class="hljs-params">($offset, $value)</span> </span>{
        <span class="hljs-keyword">if</span> (is_null($offset)) {
            <span class="hljs-keyword">$this</span>-&gt;array[] = $value;
        } <span class="hljs-keyword">else</span> {
            <span class="hljs-keyword">$this</span>-&gt;array[$offset] = $value;
        }
    }

    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">offsetUnset</span><span class="hljs-params">($offset)</span> </span>{
        <span class="hljs-keyword">unset</span>(<span class="hljs-keyword">$this</span>-&gt;array[$offset]);
    }
}</code></pre>
<p>Now we can use the class like this.</p>
<pre><code class="language-php hljs php" data-lang="php">$collection = <span class="hljs-keyword">new</span> Collection();
$collection[] = <span class="hljs-keyword">new</span> Post(<span class="hljs-number">1</span>);

<span class="hljs-keyword">foreach</span> ($collection <span class="hljs-keyword">as</span> $item) {
    <span class="hljs-keyword">echo</span> <span class="hljs-string">"{$item-&gt;getId()}\n"</span>;
}</code></pre>
<p>Note that again, there's no guarantee that <code>$collection</code> only holds <code>Post</code>s. For example, adding a string would work fine, but
would break our loop.</p>
<pre><code class="language-php hljs php" data-lang="php">$collection[] = <span class="hljs-string">'abc'</span>;

<span class="hljs-keyword">foreach</span> ($collection <span class="hljs-keyword">as</span> $item) {
    <span class="hljs-comment">// This fails</span>
    <span class="hljs-keyword">echo</span> <span class="hljs-string">"{$item-&gt;getId()}\n"</span>;
}</code></pre>
<p>With PHP as it is now, we could fix this problem by creating a <code>PostCollection</code> class. Note that I'm using nullable
return types, only available as of PHP 7.1.</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PostCollection</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Collection</span>
</span>{
    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">current</span><span class="hljs-params">()</span> : ?<span class="hljs-title">Post</span> </span>{
        <span class="hljs-keyword">return</span> <span class="hljs-keyword">parent</span>::current();
    }

    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">offsetGet</span><span class="hljs-params">($offset)</span> : ?<span class="hljs-title">Post</span> </span>{
        <span class="hljs-keyword">return</span> <span class="hljs-keyword">parent</span>::offsetGet($offset);
    }

    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">offsetSet</span><span class="hljs-params">($offset, $value)</span> </span>{
        <span class="hljs-keyword">if</span> (!$value <span class="hljs-keyword">instanceof</span> Post) {
            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> InvalidArgumentException(<span class="hljs-string">"value must be instance of Post."</span>);
        }

        <span class="hljs-keyword">parent</span>::offsetSet($offset, $value);
    }
}</code></pre>
<p>Now only <code>Post</code>s can be added to our collection.</p>
<pre><code class="language-php hljs php" data-lang="php">$collection = <span class="hljs-keyword">new</span> PostCollection();
$collection[] = <span class="hljs-keyword">new</span> Post(<span class="hljs-number">1</span>);

<span class="hljs-comment">// This would throw the InvalidArgumentException.</span>
$collection[] = <span class="hljs-string">'abc'</span>;

<span class="hljs-keyword">foreach</span> ($collection <span class="hljs-keyword">as</span> $item) {
    <span class="hljs-keyword">echo</span> <span class="hljs-string">"{$item-&gt;getId()}\n"</span>;
}</code></pre>
<p>It works! Even without generics! There's only one issue, you might be able to guess it. This is not scalable. You need a
separate implementation for every type of collection, even though the only difference between those classes would be the
type.</p>
<p>You could probably make the subclasses even more convenient to create, by "abusing"
<a href="http://php.net/manual/en/language.oop5.late-static-bindings.php">late static binding</a> and PHP's reflection API. But
you'd still need to create a class, for every type available.</p>
<h2 id="glorious-generics"><a href="#glorious-generics" class="heading-anchor">#</a> Glorious generics</h2>
<p>With all that in mind, let's just take a look at the code we would be able to write if generics were implemented in PHP.
This would be <strong>one class</strong> which could be used for every type. For your convenience, I'll only be writing the changes
compared to the previous <code>Collection</code> class, so keep that in mind.</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">GenericCollection</span>&lt;T&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title">Iterator</span>, <span class="hljs-title">ArrayAccess</span>
</span>{
    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">current</span><span class="hljs-params">()</span> : ?<span class="hljs-title">T</span> </span>{
        <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;array[<span class="hljs-keyword">$this</span>-&gt;position];
    }

    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">offsetGet</span><span class="hljs-params">($offset)</span> : ?<span class="hljs-title">T</span> </span>{
        <span class="hljs-keyword">return</span> <span class="hljs-keyword">isset</span>(<span class="hljs-keyword">$this</span>-&gt;array[$offset]) ? <span class="hljs-keyword">$this</span>-&gt;array[$offset] : <span class="hljs-keyword">null</span>;
    }

    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">offsetSet</span><span class="hljs-params">($offset, $value)</span> </span>{
        <span class="hljs-keyword">if</span> (!$value <span class="hljs-keyword">instanceof</span> T) {
            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> InvalidArgumentException(<span class="hljs-string">"value must be instance of {T}."</span>);
        }

        <span class="hljs-keyword">if</span> (is_null($offset)) {
            <span class="hljs-keyword">$this</span>-&gt;array[] = $value;
        } <span class="hljs-keyword">else</span> {
            <span class="hljs-keyword">$this</span>-&gt;array[$offset] = $value;
        }
    }

    <span class="hljs-comment">// public function __construct() ...</span>
    <span class="hljs-comment">// public function next() ...</span>
    <span class="hljs-comment">// public function key() ...</span>
    <span class="hljs-comment">// public function valid() ...</span>
    <span class="hljs-comment">// public function rewind() ...</span>
    <span class="hljs-comment">// public function offsetExists($offset) ...</span>
}</code></pre>
<pre><code class="language-php hljs php" data-lang="php">$collection = <span class="hljs-keyword">new</span> GenericCollection&lt;Post&gt;();
$collection[] = <span class="hljs-keyword">new</span> Post(<span class="hljs-number">1</span>);

<span class="hljs-comment">// This would throw the InvalidArgumentException.</span>
$collection[] = <span class="hljs-string">'abc'</span>;

<span class="hljs-keyword">foreach</span> ($collection <span class="hljs-keyword">as</span> $item) {
    <span class="hljs-keyword">echo</span> <span class="hljs-string">"{$item-&gt;getId()}\n"</span>;
}</code></pre>
<p>And that's it! We're using <code><T></code> as a dynamic type, which can be checked before runtime. And again, the <code>GenericCollection</code>
class would be usable for every type, always.</p>
<p>If you're as excited as me for generics (and this is only the tip of the iceberg by the way), you should spread the word
in the PHP community, and share the RFC: <a target="_blank" href="https://wiki.php.net/rfc/generics">https://wiki.php.net/rfc/generics</a></p>
 ]]></summary>

                <updated>2017-05-17T00:00:00+00:00</updated>
            </entry>
                                <entry>
                <title><![CDATA[ Stitcher alpha 5 ]]></title>

                <link rel="alternate" href="https://stitcher.io/blog/stitcher-alpha-5"/>

                <id>https://www.stitcher.io/blog/stitcher-alpha-5</id>

                <author>
                    <name><![CDATA[ Brent Roose ]]></name>
                </author>

                <summary type="html"><![CDATA[ <p>This is the last alpha version of Stitcher. The next release will be beta for the first time, and only bugfixes and improvements will be added from now on. Alpha 5 adds the last important pieces for Stitcher to be feature-complete before a stable 1.0 release. The most important things to note are the plugin support, improved command feedback and the internal use of the service container.</p>
<p>You can read about the upcoming plugin support in <a href="/blog/simplest-plugin-support">this blogpost</a>. Furthermore, I'm already working on the first plugin to support a REST API. Next step is a web interface to manage your content. For developers, Stitcher 1.0 will of course be completely useable without any plugins.</p>
<p>It's important to note that this update has <strong>a breaking change</strong> which existing Stitcher projects should take into account.</p>
<h3 id="installation"><a href="#installation" class="heading-anchor">#</a> Installation</h3>
<pre><code class="language-php hljs php" data-lang="php">composer <span class="hljs-keyword">require</span> pageon/stitcher-core <span class="hljs-number">1.0</span><span class="hljs-number">.0</span>-alpha5</code></pre>
<h3 id="update---breaking-changes"><a href="#update---breaking-changes" class="heading-anchor">#</a> Update - breaking changes</h3>
<p>A last big refactor has been done to support more extensions in the future. This means both the <code>Console</code> and the <code>DevController</code>
now live in a different namespace. You'll need an updated version of <code>stitcher</code> and <code>index.php</code>. This can be done with the
following commands.</p>
<pre><code class="language-properties hljs properties" data-lang="properties"><span class="hljs-attr">rm</span> <span class="hljs-string">./stitcher</span>
<span class="hljs-attr">rm</span> <span class="hljs-string">./dev/index.php</span>
<span class="hljs-attr">cp</span> <span class="hljs-string">vendor/pageon/stitcher-core/install/stitcher ./stitcher</span>
<span class="hljs-attr">cp</span> <span class="hljs-string">vendor/pageon/stitcher-core/install/dev/index.php ./dev/index.php</span>
<span class="hljs-comment">
# Remove the cache dir, this might be another directory depending on your configuration.</span>
<span class="hljs-attr">rm</span> <span class="hljs-string">-r .cache/</span></code></pre>
<h3 id="changelog"><a href="#changelog" class="heading-anchor">#</a> Changelog</h3>
<ul>
<li>Add plugin support!</li>
<li>Add PHP 7.0 support.</li>
<li>Add Command tests for Router commands and Generate command.</li>
<li>Improved meta support.</li>
<li>Improved generate command feedback.</li>
<li>Refactor the use of the dependency container, enabling future extensions. (See breaking changes).</li>
<li>Use stable version of <code>pageon/html-meta</code>.</li>
<li>Fix folder parser bug with nested folders.</li>
<li>Fix with Sass compiler import paths. The Sass compiler can now also look directly in <code>src/css</code>. This is useful when doing includes and IDE auto-completion.</li>
<li>Fix global meta tags not being loaded.</li>
<li>Fix for meta tags on detail pages not correctly set.</li>
</ul>
 ]]></summary>

                <updated>2017-05-01T00:00:00+00:00</updated>
            </entry>
                                <entry>
                <title><![CDATA[ The simplest plugin support ]]></title>

                <link rel="alternate" href="https://stitcher.io/blog/simplest-plugin-support"/>

                <id>https://www.stitcher.io/blog/simplest-plugin-support</id>

                <author>
                    <name><![CDATA[ Brent Roose ]]></name>
                </author>

                <summary type="html"><![CDATA[ <p><em>Stitcher's plugin support is available as of <a href="/blog/stitcher-alpha-5">stitcher 1.0.0-alpha5</a>.</em></p>
<p>In this post, you'll read about Stitcher's plugin system. It might get a bit technical, but is definitely worth the read.</p>
<p>Stitcher plugins are built on top of two powerful components which already exist in many modern projects.</p>
<ul>
<li>Composer's auto loading</li>
<li>Symfony's service container</li>
</ul>
<p>Using these two components, a plugin is no more than a composer package, telling Stitcher it should add its own classes and parameters to the existing services. It's a wonderfully simple concept, and it works like a charm. Like almost everything in Stitcher: the simpler, the better. Let's take a look at an example.</p>
<h3 id="myplugin"><a href="#myplugin" class="heading-anchor">#</a> MyPlugin</h3>
<p>This is what a plugin's folder structure could look like.</p>
<pre><code class="language-stylus hljs stylus" data-lang="stylus">MyPlugin/
	├── src/
	│   ├── My/
	│   │    ├── MyPlugin<span class="hljs-selector-class">.php</span>
	│   │    └── Service<span class="hljs-selector-class">.php</span>
	├── config<span class="hljs-selector-class">.yml</span>
	├── services<span class="hljs-selector-class">.yml</span>
	├── composer<span class="hljs-selector-class">.json</span>
	└── README<span class="hljs-selector-class">.md</span></code></pre>
<p>The only requirement for a package to be "a plugin" is a class implementing the <code>Brendt\Stitcher\Plugin\Plugin</code> interface. In this example, that would be <code>My\MyPlugin</code>. When this class can be autoloaded with composer, your plugin is ready!</p>
<h3 id="plugin-interface"><a href="#plugin-interface" class="heading-anchor">#</a> Plugin interface</h3>
<p>The <code>Plugin</code> interface requires you to only implement three methods. These methods tell Stitcher where the <code>services.yml</code> and <code>config.yml</code> files are located and how to intialise the plugin. Any other binding with Stitcher is done via the service container.</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-keyword">namespace</span> <span class="hljs-title">My</span>;

<span class="hljs-keyword">use</span> <span class="hljs-title">Brendt</span>\<span class="hljs-title">Stitcher</span>\<span class="hljs-title">Plugin</span>\<span class="hljs-title">Plugin</span>;

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyPlugin</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Plugin</span>
</span>{
    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">init</span><span class="hljs-params">()</span> </span>{
        <span class="hljs-keyword">return</span>;
    }

    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getConfigPath</span><span class="hljs-params">()</span> </span>{
        <span class="hljs-keyword">return</span> <span class="hljs-keyword">__DIR__</span> . <span class="hljs-string">'/plugin.config.yml'</span>;
    }

    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getServicesPath</span><span class="hljs-params">()</span> </span>{
        <span class="hljs-keyword">return</span> <span class="hljs-keyword">__DIR__</span> . <span class="hljs-string">'/plugin.services.yml'</span>;
    }
}</code></pre>
<h3 id="init-method"><a href="#init-method" class="heading-anchor">#</a> <code>init</code> method</h3>
<p>The <code>init</code> method is called after all plugin config is loaded. This method can be used as a hook to add plugin configuration to existing services. An example would be adding a command to the console application.</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-comment">/**
 * <span class="hljs-doctag">@return</span> void
 */</span>
<span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">init</span><span class="hljs-params">()</span> </span>{
    <span class="hljs-comment">/** <span class="hljs-doctag">@var</span> Console $console */</span>
    $console = App::get(<span class="hljs-string">'app.console'</span>);

    $console-&gt;add(App::get(<span class="hljs-string">'my.plugin.command.my.cmd'</span>));
}</code></pre>
<h3 id="plugin.config.yml"><a href="#plugin.config.yml" class="heading-anchor">#</a> plugin.config.yml</h3>
<p>The name doesn't matter as long as its a yaml file. This file works exactly the same as other config files: key-value pairs can be added and will be available as parameters in the service container. Keys can be nested, but will be flattened when loaded. One thing to note is that plugins cannot override existing parameters.</p>
<p>Your plugin parameters can of course be overridden from within a Stitcher project.</p>
<pre><code class="language-yaml hljs yaml" data-lang="yaml"><span class="hljs-comment"># ./vendor/MyPlugin/plugin.services.yml</span>

<span class="hljs-attr">my.plugin:</span>
    <span class="hljs-attr">parameter:</span> <span class="hljs-string">test</span></code></pre>
<h3 id="plugin.services.yml"><a href="#plugin.services.yml" class="heading-anchor">#</a> plugin.services.yml</h3>
<p>Again, the name doesn't matter, but the root element must be named <code>services</code> as per Symfony's requirements. You could also add <code>parameters</code> here.</p>
<pre><code class="language-yaml hljs yaml" data-lang="yaml"><span class="hljs-comment"># ./vendor/MyPlugin/plugin.services.yml</span>

<span class="hljs-attr">services:</span>
    <span class="hljs-attr">my.plugin.my.service:</span>
        <span class="hljs-attr">class:</span> <span class="hljs-string">My\Service</span>
        <span class="hljs-attr">arguments:</span> <span class="hljs-string">['%my.plugin.parameter%',</span> <span class="hljs-string">'%directories.src%'</span><span class="hljs-string">,</span> <span class="hljs-string">'@stitcher'</span><span class="hljs-string">]</span></code></pre>
<p>As you can see, Stitcher services and parameters are available, as well as your own.</p>
<h3 id="loading-a-plugin"><a href="#loading-a-plugin" class="heading-anchor">#</a> Loading a plugin</h3>
<p>Finally, a plugin must be loaded into your project for it to be active. The <code>plugins</code> parameter in your project's config file is used for doing that.</p>
<pre><code class="language-yaml hljs yaml" data-lang="yaml"><span class="hljs-comment"># ./config.yml</span>

<span class="hljs-attr">plugins:</span>
    <span class="hljs-bullet">-</span> <span class="hljs-string">My\MyPlugin</span></code></pre>
<p>That's it!</p>
<h2 id="future-possibilities"><a href="#future-possibilities" class="heading-anchor">#</a> Future possibilities</h2>
<p>This plugin system is so simple, yet it opens the possibility to add all kinds of functionality to a Stitcher project. It's an important step towards some of my own ideas; custom themes and other applications (API and CMS); and we'll discover more of its true strength in the future.</p>
<p>The most important thing for me is its simplicity. When looking at plugin systems in other applications, you'll often find complex setups like a virtual directory structure, a custom plugin loader, dirty file naming conventions, own package managers, etc. I wanted to use existing and proven technologies to build on top on, and keep the system as clean as possible. I believe this approach is a step towards the right direction.</p>
 ]]></summary>

                <updated>2017-04-27T00:00:00+00:00</updated>
            </entry>
                                <entry>
                <title><![CDATA[ Stitcher alpha 4 ]]></title>

                <link rel="alternate" href="https://stitcher.io/blog/stitcher-alpha-4"/>

                <id>https://www.stitcher.io/blog/stitcher-alpha-4</id>

                <author>
                    <name><![CDATA[ Brent Roose ]]></name>
                </author>

                <summary type="html"><![CDATA[ <p>A new alpha release has arrived for Stitcher!</p>
<p>This release brings a lot of optimizations and bugfixes to many parts of Stitcher. The biggest changes are found in <code>brendt/responsive-images</code>, in which a lot of bugfixes and extra options are added. Furthermore, there's one change reverted, namely the asynchronous support for image rendering. This functionality relied on several <code>amphp</code> development packages, and broke with almost every update. Async support might be re-added in the future, but for now it's disabled.</p>
<p>One of the biggest new features is the support for custom htaccess headers and with that, HTTP2 server push! This feature has been added and is tested, but not yet used in any real projects. So there's more testing to do before declaring it "stable". You can use it in almost any template function by added the <code>push=true</code> parameter.</p>
<p>Stitcher also uses <code>papgeon/html-meta</code> now, and will build on top of this library more and more in the future.</p>
<p>One final new feature is the addition of the <code>cdn</code> config parameter. This parameter takes an array of files, located in the source directory, and will copy them on-the-fly or during compile-time to the public directory. This way you can expose folders or files directly, without parsing them through Stitcher.</p>
<h3 id="installation"><a href="#installation" class="heading-anchor">#</a> Installation</h3>
<p>The installation package, <code>pageon/stitcher</code>, still comes with <code>1.0.0-alpha3</code> by default. Feel free to manually update the composer requirement to <code>1.0.0-alpha4</code>. The default version will change as soon as HTTP/2 server push is fully tested.</p>
<p>Some people might need to run <code>composer dump-autoload -o</code> one more time when updating to alpha4.</p>
<h3 id="future-updates"><a href="#future-updates" class="heading-anchor">#</a> Future updates</h3>
<p>Before this update, Stitcher was always re-tagged on the fly when new things were added. From now on, tags will only be added after a certain feature set is complete. By doing so, updating Stitcher won't break things as much as it used to do. Keep in mind Stitcher is still in alpha phase, so breaking changes will happen now and then. There's still a small feature set to be added before a first beta release will be available. Slowly but surely, we're getting there.</p>
 ]]></summary>

                <updated>2017-04-21T00:00:00+00:00</updated>
            </entry>
                                <entry>
                <title><![CDATA[ Static site generators vs. caching ]]></title>

                <link rel="alternate" href="https://stitcher.io/blog/static_sites_vs_caching"/>

                <id>https://www.stitcher.io/blog/static_sites_vs_caching</id>

                <author>
                    <name><![CDATA[ Brent Roose ]]></name>
                </author>

                <summary type="html"><![CDATA[ <p>What's the difference between static site generators and caching you ask?</p>
<p>A short answer might be: there is no technical benefit between both. But the mindset behind the two is completely different.</p>
<p>I think the topic is too interesting to leave it like that. Let's talk about caching.</p>
<p>For many years now, we've been creating systems which help us build websites. Many of those systems are built around the idea of "dynamic websites". Instead of writing HTML and CSS pages; we've designed systems which can load information from a data source (say for example, a MySQL database); parse that data into so called "templates" (these are like blueprints for HTML pages); and finally send the rendered HTML to the client. Of course, there is more than just HTML and CSS to a website, but that's a topic for another day.</p>
<p>Now imagine you've got many visitors on your website, each of them visiting the same page. Rendering that page for every visit would require more server resources than to render the page once, and send that output to everyone asking it. That's a cached page. You could also cache other parts of the application. For example: not always perform the same database query, but rather cache the result of that query and reuse that over and over again.</p>
<p>Evidently, caching is way more than what I just described. My try at a general definition for caching on the web would be something like this.</p>
<blockquote>
<p>Once a resource intensive operation is done, remember the outcome. The next time the same operation is requested, you can just give the result instead of doing that operation again.</p>
</blockquote>
<p>Caching is a very powerful tool which <strong>wraps around</strong> your system, enabling it to be much more performant.</p>
<p>Stitcher, and all static site generators, are the opposite. These tools don't <em>wrap around</em> a system. Rather, their core <strong>is</strong> the HTML ouput. All other things needed by developers to smoothly build websites, are <strong>plugged in</strong> into that core. What's the downside? You'll have to re-render parts of your website before they are visible to the visitor. A tedious task. Luckily computers are good at performing the same tedious tasks over and over again. Re-rendering your website isn't really a bother when you have the right tools available.</p>
<p>Another "downside" of static websites? It requires a bit more thought of the developer. But when could that a bad thing?</p>
<p>So static websites do have their downsides. But take a look at the things you're able to "plug in" that HTML rendering core:</p>
<ul>
<li>
<a href="/blog/tackling_responsive_images-part_1">Image optimisation</a>: enabling the developer to use the responsive images specification to its full extent, without any work.</li>
<li>SASS precompiling: I'm not a frontend developer, but these guys tell me that's a must.</li>
<li>Pagination, overviews and detail pages.</li>
<li>Parse MarkDown, YAML and JSON into templates and use those templates like in any dynamic system.</li>
<li>JavaScript and CSS minifying: very important for website performance.</li>
<li>Things like ordering and filtering data sets.</li>
</ul>
<p>Some important things are still missing in Stitcher though.</p>
<ul>
<li>Form support: although Stitcher will not include form handling at its core. That will be a separate module.</li>
<li>Frontend filtering of data sets: technically this is possible, but it might have huge performance costs depending on the amount of filters. I will be working on it in the future though.</li>
<li>Content management: this is also possible, but not from within Stitcher's core. It would be a separate module acting as a client to modify a Stitcher project.</li>
</ul>
<p>To be clear: I don't think static site generators are the best solution for all websites. But there are lots of cases which could benesfit from using a static site generator over of a dynamic system and caching. I view many caching systems as like putting a bandaid on top of a wound, but not <em>stitching</em> the wound (pun intended). Don't forget that clearing caches is one of the most difficult parts of software development. But we should also be realistic: the static website approach mainly targets small to medium websites, not complex web applications.</p>
<p>So if you want to give it a go, be sure to check out a static site generator, there are many!</p>
<ul>
<li>
<a target="_blank" href="https://jekyllrb.com/">Jekyll</a>
</li>
<li>
<a target="_blank" href="http://gohugo.io/">Hugo</a>
</li>
<li>
<a target="_blank" href="https://github.com/pageon/stitcher-core">Stitcher</a>
</li>
<li>
<a target="_blank" href="https://sculpin.io/">Sculpin</a>
</li>
</ul>
 ]]></summary>

                <updated>2017-03-02T00:00:00+00:00</updated>
            </entry>
                                <entry>
                <title><![CDATA[ Image optimizers ]]></title>

                <link rel="alternate" href="https://stitcher.io/blog/image_optimizers"/>

                <id>https://www.stitcher.io/blog/image_optimizers</id>

                <author>
                    <name><![CDATA[ Brent Roose ]]></name>
                </author>

                <summary type="html"><![CDATA[ <p>I've been working lately on image optimisation in Stitcher. As a try-out, I've added <a href="https://github.com/psliwa/image-optimizer">this library</a> to the responsive images module.</p>
<p>Enabling the optimizer is done by updating Stitcher (1.0.0-alpha2), and adding the following parameter in <code>config.yml</code>.</p>
<pre><code class="language-yaml hljs yaml" data-lang="yaml"><span class="hljs-attr">engines:</span>
    <span class="hljs-attr">optimizer:</span> <span class="hljs-literal">true</span></code></pre>
 ]]></summary>

                <updated>2017-02-26T00:00:00+00:00</updated>
            </entry>
                                <entry>
                <title><![CDATA[ Tackling responsive images - part 2 ]]></title>

                <link rel="alternate" href="https://stitcher.io/blog/tackling_responsive_images-part_2"/>

                <id>https://www.stitcher.io/blog/tackling_responsive_images-part_2</id>

                <author>
                    <name><![CDATA[ Brent Roose ]]></name>
                </author>

                <summary type="html"><![CDATA[ <p>In my <a href="/blog/tackling_responsive_images-part_1">previous post</a>, I wrote about the idea behind integrating responsive images and Stitcher. A pretty robust library came to be. You could throw it any image, and it would generate a set of variations of that images, scaled down for multiple devices. It returned an object, which Stitcher parsed into a template variable. In templates, the following is now possible.</p>
<pre><code class="language-html hljs xml" data-lang="html"><span class="hljs-tag">&lt;<span class="hljs-name">img <span class="hljs-attr">src=<span class="hljs-string">"{$image.src}"</span> <span class="hljs-attr">srcset</span>=<span class="hljs-string">"{$image.srcset}"</span> <span class="hljs-attr">sizes</span>=<span class="hljs-string">"{$image.sizes}"</span> /&gt;</span></code></pre>
<p>If you would like to read the source code instead of this post, <a href="https://github.com/brendt/responsive-images">here you go</a>.</p>
<p>Like I wrote earlier, the first version of the scaling down algorithm was based on the width of images. It worked, but it wasn't solving the actual problem: optimizing bandwidth usage. The real solution was in downscaling images based on their filesizes. The problem there: how could you know the dimensions of an image, when you know the desired filesize. This is where high school maths came into play. I was actually surprised how much fun I had figuring out this "formula". I haven't been in school for a few years, and I was rather happy I could use some basic maths skills again!</p>
<p>This is what I did:</p>
<pre><code class="language-routeros hljs routeros" data-lang="routeros">filesize = 1.000.000
width = 1920
ratio = 9 / 16
height = ratio * width
<span class="hljs-built_in">
area </span>= width * height
 &lt;=&gt;<span class="hljs-built_in"> area </span>= width * width * ratio

pixelprice = filesize /<span class="hljs-built_in"> area
</span> &lt;=&gt; filesize = pixelprice *<span class="hljs-built_in"> area
</span> &lt;=&gt; filesize = pixelprice * (width * width * ratio)
 &lt;=&gt; width * width * ratio = filesize / pixelprice
 &lt;=&gt; width ^ 2 = (filesize / pixelprice) / ratio
 &lt;=&gt; width = sqrt((filesize / pixelprice) / ratio)</code></pre>
<p>So given a constant <code>pixelprice</code>, I can calculate the required width an image needs to have a specified filesize. Here's the thing though: <code>pixelprice</code> is an approximation of what one pixel in this image costs. That's because not all pixels are worth the same amount of bytes. It heavily depends on which image codecs are used. It is however the best I could do for now, and whilst I might add some more logic in the future, I'd like to try this algorithm out for a while.</p>
<p>So now the Responsive Factory scales down images by filesize instead of width. A much better metric when you're trying to reduce bandwidth usage. This is how the library is used in Stitcher:</p>
<pre><code class="language-php hljs php" data-lang="php"><span class="hljs-keyword">use</span> <span class="hljs-title">Brendt</span>\<span class="hljs-title">Image</span>\<span class="hljs-title">Config</span>\<span class="hljs-title">DefaultConfigurator</span>;
<span class="hljs-keyword">use</span> <span class="hljs-title">Brendt</span>\<span class="hljs-title">Image</span>\<span class="hljs-title">ResponsiveFactory</span>;

$config = <span class="hljs-keyword">new</span> DefaultConfigurator([
    <span class="hljs-string">'driver'</span>      =&gt; Config::get(<span class="hljs-string">'engines.image'</span>),
    <span class="hljs-string">'publicPath'</span>  =&gt; Config::get(<span class="hljs-string">'directories.public'</span>),
    <span class="hljs-string">'sourcePath'</span>  =&gt; Config::get(<span class="hljs-string">'directories.src'</span>),
    <span class="hljs-string">'enableCache'</span> =&gt; Config::get(<span class="hljs-string">'caches.image'</span>),
]);

$responsiveFactory = <span class="hljs-keyword">new</span> ResponsiveFactory($config);</code></pre>
<p>All images in Stitcher go through this factory, the factory will generate x-amount of variations of the image, and the browser decides which one it will download. Its pretty cool, and I hope it will help websites to serve more optimized images, while a developer can still focus on the most important parts of his project.</p>
 ]]></summary>

                <updated>2017-02-18T00:00:00+00:00</updated>
            </entry>
                                <entry>
                <title><![CDATA[ Tackling responsive images - part 1 ]]></title>

                <link rel="alternate" href="https://stitcher.io/blog/tackling_responsive_images-part_1"/>

                <id>https://www.stitcher.io/blog/tackling_responsive_images-part_1</id>

                <author>
                    <name><![CDATA[ Brent Roose ]]></name>
                </author>

                <summary type="html"><![CDATA[ <p>One of the main goals when I started with Stitcher was heavily optimized images. Looking at the <a href="http://httparchive.org/trends.php">HTTP Archive</a> stats, it's clear we're doing something wrong. Luckily, the <a href="http://responsiveimages.org/">Responsive images spec</a> has been made by a lot of smart people to counter the image problem. My goal was to implement this spec in Stitcher in a way that was easy enough for developers to use it to its full extent. We're not completely there yet, but we're close. In this blogpost I want to talk about the challenges I faced creating this library. And if you're more into code then into reading a blog post, <a href="https://github.com/brendt/responsive-images">here you go</a>.</p>
<p>To be clear: the goal of the responsive images spec is to reduce bandwith used when downloading images. Images nowadays require so much bandwith. When you think about it, it's insane to load an image which is 2000 pixels wide, when the image on screen is only 500 pixels wide. That's the issue the spec addresses, and that's the issue I wanted to solve in Stitcher.</p>
<p>So I want one image to go in, x-amount of the same image with varying sizes coming out, and let the browser decide which image is the best to load. How could I downscale that source image? That was the most important question I wanted answered. All other problems like accessebility in templates and how to expose the generated image files, were concerns of Stitcher itself.</p>
<p>My first take on downscaling images was the following:</p>
<p>Take the source image and a set of configuration parameters. These parameters would decide the maximum amount of image variations and the minimum width of the image. Eg. I want a maximum of ten images, with the smallest image being 300 pixels wide. Now the algorithm would loop a maximum of 10 times, always creating an image which is 10% smaller in width than the previous one.</p>
<p>You might already see this is not the optimal approach. After all: we're trying to reduce bandwith used when loading images. There is no guarantee an image which is downscaled 10%, is also reduced in size. Much depends on which image codecs are used, and what's in the image itself. But by using this approach early on, I was able to implement this "image factory" with Stitcher. Next I would be working on optimizing the algorithm, but for the time being I could tackle the Stitcher integration.</p>
<h2 id="linking-with-stitcher"><a href="#linking-with-stitcher" class="heading-anchor">#</a> Linking with Stitcher</h2>
<p>Letting Stitcher know about responsive images was both easy and difficult at the same time. The basic framework was already there. So I could easily create an image provider which used the responsive factory, and returned an array representation of the image. The template syntax looks like this:</p>
<pre><code class="language-html hljs xml" data-lang="html"><span class="hljs-tag">&lt;<span class="hljs-name">img <span class="hljs-attr">src=<span class="hljs-string">"{$image.src}"</span> <span class="hljs-attr">srcset</span>=<span class="hljs-string">"{$image.srcset}"</span> <span class="hljs-attr">sizes</span>=<span class="hljs-string">"{$image.sizes}"</span> /&gt;</span></code></pre>
<p>Unfortunately, there is no way to automate the sizes part, unless you start crawling all CSS and basically implement a browser engine in PHP. My solution for this part is pre-defined sets of sizes. That's still a work in progress though, I'm not sure yet how to make it easy enough to use. For now, I'm just manually specifying sizes when writing template code.</p>
<p>But the tricky part wasn't the sizes, neither the srcset. It was handling paths and URLs. I've noticed this throughout the whole Stitcher framework: creating the right paths and URLs (correct amount of slashes, correct root directory etc.) is actually quite the pain to manage. I'm convinced by now I need some kind of helper which always renders the correct paths and URLs. It's on my todo list.</p>
<p>That's it for this blogpost, next up I'll be writing about optimizing the image algorithm.</p>
 ]]></summary>

                <updated>2017-02-17T00:00:00+00:00</updated>
            </entry>
                                <entry>
                <title><![CDATA[ Which editor to choose? ]]></title>

                <link rel="alternate" href="https://stitcher.io/blog/which-editor-to-choose"/>

                <id>https://www.stitcher.io/blog/which-editor-to-choose</id>

                <author>
                    <name><![CDATA[ Brent Roose ]]></name>
                </author>

                <summary type="html"><![CDATA[ <p>So many editors to choose from! Which one is the best for you?
I can already tell you that you won’t find the answer here. But maybe I can list some pros and cons.
We’ll be looking at Sublime Text, Github’s Atom, Adobe’s Brackets and Microsoft’s Visual Studio Code.
All of these editors are based on the same core concepts, some of which Sublime made extremely popular.
But there are some big and subtle differences.</p>
<h2 id="out-of-the-box-features"><a href="#out-of-the-box-features" class="heading-anchor">#</a> Out of the box features</h2>
<p>All four editors are multi platform, have the command palette and fuzzy finder we’ve grown accustomed to.
It’s important to keep in mind that Sublime and Atom are primarily focussed on packages to provide functionality,
while Brackets and Visual Studio Code provide a more all-in-one solution from the start.
More about packages later, here are the most important differences out of the box.</p>
<p><strong>Visual Studio Code</strong> comes with built-in GIT support, a task runner and a linter.
You can start to code without having to set up anything.
It’s focussed on Node and ASP.NET development, which is reflected in the tools provided.
But you can use it for any other language.</p>
<p><strong>Sublime Text</strong> provides a lot of themes from the start,
has a built in project manager and offers many customisable keybindings and commands to do text manipulation.
There are however a lot of packages you’ll want to download immediately.</p>
<p><strong>Atom</strong> has a package manager shipped by default.
Atom’s file tree sidebar has some very nice features such as GIT support and file manipulation (see below).
There’s also a live MarkDown editor which is really neat.
But like Sublime, you’ll want to install extra packages from the start.</p>
<p><strong>Brackets</strong> has an awesome live preview feature which just blew my mind.
Brackets is focussed on front-end web development and provides very good tools to do so.
It also comes with a linter, debugger, inline editor and Photoshop integration.
There’s an extension manager available too. (That’s the Adobe version of packages, more about those later).</p>
<p>I felt Visual Studio Code and Brackets were really just plug-and-play from the start.
Both Sublime and Atom require a lot of tweaking to set everything up for the best coding experience.
This isn’t a bad thing, but in this category, Visual Studio Code and Brackets are the best.</p>
<hr />
<p>
    <img src="/resources/img/static/editors/1.png" class="editor-badge"/>
</p>
<hr />
<h2 id="packages"><a href="#packages" class="heading-anchor">#</a> Packages</h2>
<p>Packages (or extensions, thanks Adobe), give you access to a lot of extra features.</p>
<p><strong>Brackets</strong> has an extension manager which is rather slow and bulky and has an “Adobe feel” to it.
You can easily install packages from a local source, URL or an online repository.
The extension manager lacks however good package documentation.</p>
<p>In <strong>Sublime</strong>, you’ll need Package Control if you want to easily install other packages.
There’s a very wide variety of packages available there.
Chances are that you’ll be able to do that one thing you like with an existing package.
Browsing packages is a bit of a pain from the command palette though.
There are many small undocumented packages which makes it often a guess as to what a package really does.
The online documentation isn’t user friendly either. It’s mostly a huge pile of text per package.</p>
<p><strong>Atom</strong> shines when it comes to packages. It has a built-in package manager which works directly with GitHub.
Not only are there a lot of packages available, there’s also a very high standard on documentation.
You’ll be able to see screenshots, keybinding references and even animated GIFs explaining how a package works and what it does.
All from within Atom. It’s super easy to update packages and Atom will tell you when a package is outdated or uses deprecated code.
It shouldn’t surprise you that Atom itself is actually a collection of these same packages.</p>
<p><strong>Visual Studio Code</strong> as of VSC V0.10.1 there’s extension support, which looks a lot like Sublime’s Package Control.
Because of the recent popularity of Visual Studio Code, there's a big plugin system rising.</p>
<p>Atom is a winner when it comes to packages.
The whole system is built upon the package manager, and there’s a big community behind it.
That should be no surprise, knowing that GitHub is creating this editor.</p>
<hr />
<p>
    <img src="/resources/img/static/editors/2.png" class="editor-badge"/>
</p>
<hr />
<h2 id="file-tree"><a href="#file-tree" class="heading-anchor">#</a> File tree</h2>
<p>You might find it odd I list the file tree as a category.
From experience though, I feel the tree is one of the most important features which can really work with or work against you.
You might not use the file tree at all, but a lot of people do.
So I felt it was right to talk about it here.</p>
<p><strong>Sublime Text</strong> is fast and this is also reflected in the tree.
It lacks however some important functionality related to file manipulation from the tree.</p>
<p><strong>Brackets</strong> has a very bulky and slow tree. Opening folders and files takes a notable time.
It also offers only the bare minimal tools like Sublime:
new files and folders, renaming, deleting and revealing/searching files.</p>
<p><strong>Visual Studio Code</strong> doesn’t have a lot more tools than Brackets or Sublime,
but it allows you to move files inside the tree, which is a big help.
There are some minor points though. Visual Studio Code doesn’t show tabs, but uses the tree pane to show open files.
It makes this pane become cluttered and makes it difficult to find the open file you’re looking for.
It’s also not possible to scroll sideways.
But you can use the same pane as a search and debugger view, which is space efficient.</p>
<p><strong>Atom</strong> has a lot of tree functionality: there are simple tools like copy/paste,
but also cut, duplicate, rename etc.
You can also move files by dragging them.
Atom furthermore integrates GIT project status in the file tree.
The tree might feel a bit slower than Sublime or Visual Studio Code though.</p>
<p>Both Atom and Sublime have great file tree features, and both lack some.
Sublime can’t be beaten by speed, but Atom offers a lot more functionality.
Many people don’t use the tree view in Sublime,
but together with Atom’s GIT status you’ll get a good project overview by just looking at the tree.</p>
<hr />
<p>
    <img src="/resources/img/static/editors/3.png" class="editor-badge"/>
</p>
<hr />
<h2 id="performance"><a href="#performance" class="heading-anchor">#</a> Performance</h2>
<p>Performance is one of the most important metrics.
All of these editors are performant for sure, but each has its own small differences.</p>
<p><strong>Atom</strong> lacks in this category.
There are two major issues: startup time and big files.
Atom is built upon web technologies (HTML, CSS and JavaScript).
It has some major advantages, but takes a while longer to load.
It’s however only the startup, and still considerably faster than any IDE.
Once everything is loaded, Atom is as fast as Brackets. On the other side, big file loading time is a disaster.
Atom will open files once you’ve selected them in the tree view.
It’s easy to miss click a minified file, which will make Atom hang for several seconds or even minutes.</p>
<p><strong>Visual Studio Code</strong> is a bit faster than Atom and Brackets,
it works as you might expect from a Microsoft product: not slow, but also not the fastest.</p>
<p><strong>Brackets</strong> is comparable to Atom, but the slow and bulky tree view makes everything feel slower.</p>
<p><strong>Sublime</strong> is by far the winner here.
It’s lightning fast all the time, and can’t be beaten by any other editor.
Atom and Brackets loose this competition, but are still a lot faster than full blown IDEs.
Another aspect to keep in mind is the amount of packages you’re using.
Atom actually tells you how much milliseconds each package adds to startup time.
Sublime is also subject to this: the more packages the slower.
But without any doubt: Sublime shines in the field of performance.</p>
<hr />
<p>
    <img src="/resources/img/static/editors/4.png" class="editor-badge"/>
</p>
<hr />
<h2 id="configuration"><a href="#configuration" class="heading-anchor">#</a> Configuration</h2>
<p><strong>Sublime</strong>, <strong>Brackets</strong> and <strong>Visual Studio Code</strong> offer an easy JSON config file for settings and keybindings.
Brackets and Visual Studio Code even open a two column layout when editing settings, one with the defaults and one with your own.
A small but convenient feature.</p>
<p><strong>Atom</strong> however excels at customisability with its own stylesheet and startup script which can be hacked in any way you want.
It has a built-in keybinding debugger, the Chrome developer tools, works with CoffeeScript (JS) and CSS.
You don’t need to learn another language to customise Atom, it’s built upon web technologies.
Furthermore, each package has its own configuration page with a lot of documentation and sometimes input fields to set parameters.</p>
<hr />
<p>
    <img src="/resources/img/static/editors/5.png" class="editor-badge"/>
</p>
<hr />
<p>That was a lot of information! Some of the most important things summarized:</p>
<p><strong>Visual Studio Code</strong> is focused on Node and ASP.NET development.
It isn’t very customisable but has the Microsoft IDE feel to it.
It’s an easy plug and play setup.
Files are not shown in tabs, which makes it feel a bit unorganised,
but I think that this is a preference and a developer can get used to this method of work.</p>
<p><strong>Sublime Text</strong> has a lot of power. It’s fast and reliable.
There are a lot of packages to customise your development environment,
but they are often not very well documented. Sublime starts out as a text editor,
but can be made the perfect, performant IDE with time and effort.</p>
<p><strong>Brackets</strong> has some awesome front-end web development features like live previews, linters and PSD integration.
The main downside is that it feels a bit slow, especially the file tree.</p>
<p><strong>Atom</strong> is built on web technologies and its packages.
It’s offers a very nice interface for packages and configuration and is “hackable to the core”.
It has some quirks still with performance, but there’s a very active community working on it.
Its customisability makes Atom accessible for a wide variety of programmers with their own workflow.</p>
 ]]></summary>

                <updated>2015-08-24T00:00:00+00:00</updated>
            </entry>
            </feed>
